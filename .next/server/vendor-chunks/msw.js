"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/msw";
exports.ids = ["vendor-chunks/msw"];
exports.modules = {

/***/ "(ssr)/./node_modules/msw/lib/browser/index.mjs":
/*!************************************************!*\
  !*** ./node_modules/msw/lib/browser/index.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SetupWorkerApi: () => (/* binding */ SetupWorkerApi),\n/* harmony export */   setupWorker: () => (/* binding */ setupWorker)\n/* harmony export */ });\n/* harmony import */ var _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/utils/internal/devUtils.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/devUtils.mjs\");\n/* harmony import */ var _core_handlers_RequestHandler_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/handlers/RequestHandler.mjs */ \"(ssr)/./node_modules/msw/lib/core/handlers/RequestHandler.mjs\");\n/* harmony import */ var _core_utils_handleRequest_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/utils/handleRequest.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/handleRequest.mjs\");\n/* harmony import */ var _core_utils_toResponseInit_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/utils/toResponseInit.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/toResponseInit.mjs\");\n/* harmony import */ var _core_utils_internal_isHandlerKind_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/utils/internal/isHandlerKind.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/isHandlerKind.mjs\");\n/* harmony import */ var _core_SetupApi_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/SetupApi.mjs */ \"(ssr)/./node_modules/msw/lib/core/SetupApi.mjs\");\n/* harmony import */ var _core_utils_internal_mergeRight_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/utils/internal/mergeRight.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/mergeRight.mjs\");\n/* harmony import */ var _core_ws_webSocketInterceptor_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../core/ws/webSocketInterceptor.mjs */ \"(ssr)/./node_modules/msw/lib/core/ws/webSocketInterceptor.mjs\");\n/* harmony import */ var _core_ws_handleWebSocketEvent_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/ws/handleWebSocketEvent.mjs */ \"(ssr)/./node_modules/msw/lib/core/ws/handleWebSocketEvent.mjs\");\n/* harmony import */ var _core_ws_utils_attachWebSocketLogger_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../core/ws/utils/attachWebSocketLogger.mjs */ \"(ssr)/./node_modules/msw/lib/core/ws/utils/attachWebSocketLogger.mjs\");\n// node_modules/.pnpm/outvariant@1.4.3/node_modules/outvariant/lib/index.mjs\nvar POSITIONALS_EXP = /(%?)(%([sdijo]))/g;\nfunction serializePositional(positional, flag) {\n  switch (flag) {\n    case \"s\":\n      return positional;\n    case \"d\":\n    case \"i\":\n      return Number(positional);\n    case \"j\":\n      return JSON.stringify(positional);\n    case \"o\": {\n      if (typeof positional === \"string\") {\n        return positional;\n      }\n      const json = JSON.stringify(positional);\n      if (json === \"{}\" || json === \"[]\" || /^\\[object .+?\\]$/.test(json)) {\n        return positional;\n      }\n      return json;\n    }\n  }\n}\nfunction format(message, ...positionals) {\n  if (positionals.length === 0) {\n    return message;\n  }\n  let positionalIndex = 0;\n  let formattedMessage = message.replace(\n    POSITIONALS_EXP,\n    (match, isEscaped, _, flag) => {\n      const positional = positionals[positionalIndex];\n      const value = serializePositional(positional, flag);\n      if (!isEscaped) {\n        positionalIndex++;\n        return value;\n      }\n      return match;\n    }\n  );\n  if (positionalIndex < positionals.length) {\n    formattedMessage += ` ${positionals.slice(positionalIndex).join(\" \")}`;\n  }\n  formattedMessage = formattedMessage.replace(/%{2,2}/g, \"%\");\n  return formattedMessage;\n}\nvar STACK_FRAMES_TO_IGNORE = 2;\nfunction cleanErrorStack(error2) {\n  if (!error2.stack) {\n    return;\n  }\n  const nextStack = error2.stack.split(\"\\n\");\n  nextStack.splice(1, STACK_FRAMES_TO_IGNORE);\n  error2.stack = nextStack.join(\"\\n\");\n}\nvar InvariantError = class extends Error {\n  constructor(message, ...positionals) {\n    super(message);\n    this.message = message;\n    this.name = \"Invariant Violation\";\n    this.message = format(message, ...positionals);\n    cleanErrorStack(this);\n  }\n};\nvar invariant = (predicate, message, ...positionals) => {\n  if (!predicate) {\n    throw new InvariantError(message, ...positionals);\n  }\n};\ninvariant.as = (ErrorConstructor, predicate, message, ...positionals) => {\n  if (!predicate) {\n    const formatMessage = positionals.length === 0 ? message : format(message, ...positionals);\n    let error2;\n    try {\n      error2 = Reflect.construct(ErrorConstructor, [\n        formatMessage\n      ]);\n    } catch (err) {\n      error2 = ErrorConstructor(formatMessage);\n    }\n    throw error2;\n  }\n};\n\n// node_modules/.pnpm/is-node-process@1.2.0/node_modules/is-node-process/lib/index.mjs\nfunction isNodeProcess() {\n  if (typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") {\n    return true;\n  }\n  if (typeof process !== \"undefined\") {\n    const type = process.type;\n    if (type === \"renderer\" || type === \"worker\") {\n      return false;\n    }\n    return !!(process.versions && process.versions.node);\n  }\n  return false;\n}\n\n// src/browser/setupWorker/start/createStartHandler.ts\n\n\n// node_modules/.pnpm/@open-draft+until@2.1.0/node_modules/@open-draft/until/lib/index.mjs\nvar until = async (promise) => {\n  try {\n    const data = await promise().catch((error2) => {\n      throw error2;\n    });\n    return { error: null, data };\n  } catch (error2) {\n    return { error: error2, data: null };\n  }\n};\n\n// src/browser/setupWorker/start/utils/getWorkerInstance.ts\n\n\n// src/browser/utils/getAbsoluteWorkerUrl.ts\nfunction getAbsoluteWorkerUrl(workerUrl) {\n  return new URL(workerUrl, location.href).href;\n}\n\n// src/browser/setupWorker/start/utils/getWorkerByRegistration.ts\nfunction getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker) {\n  const allStates = [\n    registration.active,\n    registration.installing,\n    registration.waiting\n  ];\n  const relevantStates = allStates.filter((state) => {\n    return state != null;\n  });\n  const worker = relevantStates.find((worker2) => {\n    return findWorker(worker2.scriptURL, absoluteWorkerUrl);\n  });\n  return worker || null;\n}\n\n// src/browser/setupWorker/start/utils/getWorkerInstance.ts\nvar getWorkerInstance = async (url, options = {}, findWorker) => {\n  const absoluteWorkerUrl = getAbsoluteWorkerUrl(url);\n  const mockRegistrations = await navigator.serviceWorker.getRegistrations().then(\n    (registrations) => registrations.filter(\n      (registration) => getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker)\n    )\n  );\n  if (!navigator.serviceWorker.controller && mockRegistrations.length > 0) {\n    location.reload();\n  }\n  const [existingRegistration] = mockRegistrations;\n  if (existingRegistration) {\n    existingRegistration.update();\n    return [\n      getWorkerByRegistration(\n        existingRegistration,\n        absoluteWorkerUrl,\n        findWorker\n      ),\n      existingRegistration\n    ];\n  }\n  const registrationResult = await until(\n    async () => {\n      const registration = await navigator.serviceWorker.register(url, options);\n      return [\n        // Compare existing worker registration by its worker URL,\n        // to prevent irrelevant workers to resolve here (such as Codesandbox worker).\n        getWorkerByRegistration(registration, absoluteWorkerUrl, findWorker),\n        registration\n      ];\n    }\n  );\n  if (registrationResult.error) {\n    const isWorkerMissing = registrationResult.error.message.includes(\"(404)\");\n    if (isWorkerMissing) {\n      const scopeUrl = new URL(options?.scope || \"/\", location.href);\n      throw new Error(\n        _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.formatMessage(`Failed to register a Service Worker for scope ('${scopeUrl.href}') with script ('${absoluteWorkerUrl}'): Service Worker script does not exist at the given path.\n\nDid you forget to run \"npx msw init <PUBLIC_DIR>\"?\n\nLearn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`)\n      );\n    }\n    throw new Error(\n      _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.formatMessage(\n        \"Failed to register the Service Worker:\\n\\n%s\",\n        registrationResult.error.message\n      )\n    );\n  }\n  return registrationResult.data;\n};\n\n// src/browser/setupWorker/start/utils/enableMocking.ts\n\n\n// src/browser/setupWorker/start/utils/printStartMessage.ts\n\nfunction printStartMessage(args = {}) {\n  if (args.quiet) {\n    return;\n  }\n  const message = args.message || \"Mocking enabled.\";\n  console.groupCollapsed(\n    `%c${_core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.formatMessage(message)}`,\n    \"color:orangered;font-weight:bold;\"\n  );\n  console.log(\n    \"%cDocumentation: %chttps://mswjs.io/docs\",\n    \"font-weight:bold\",\n    \"font-weight:normal\"\n  );\n  console.log(\"Found an issue? https://github.com/mswjs/msw/issues\");\n  if (args.workerUrl) {\n    console.log(\"Worker script URL:\", args.workerUrl);\n  }\n  if (args.workerScope) {\n    console.log(\"Worker scope:\", args.workerScope);\n  }\n  if (args.client) {\n    console.log(\"Client ID: %s (%s)\", args.client.id, args.client.frameType);\n  }\n  console.groupEnd();\n}\n\n// src/browser/setupWorker/start/utils/enableMocking.ts\nasync function enableMocking(context, options) {\n  context.workerChannel.send(\"MOCK_ACTIVATE\");\n  const { payload } = await context.events.once(\"MOCKING_ENABLED\");\n  if (context.isMockingEnabled) {\n    _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.warn(\n      `Found a redundant \"worker.start()\" call. Note that starting the worker while mocking is already enabled will have no effect. Consider removing this \"worker.start()\" call.`\n    );\n    return;\n  }\n  context.isMockingEnabled = true;\n  printStartMessage({\n    quiet: options.quiet,\n    workerScope: context.registration?.scope,\n    workerUrl: context.worker?.scriptURL,\n    client: payload.client\n  });\n}\n\n// src/browser/setupWorker/start/utils/createMessageChannel.ts\nvar WorkerChannel = class {\n  constructor(port) {\n    this.port = port;\n  }\n  postMessage(event, ...rest) {\n    const [data, transfer] = rest;\n    this.port.postMessage({ type: event, data }, { transfer });\n  }\n};\n\n// src/browser/utils/pruneGetRequestBody.ts\nfunction pruneGetRequestBody(request) {\n  if ([\"HEAD\", \"GET\"].includes(request.method)) {\n    return void 0;\n  }\n  return request.body;\n}\n\n// src/browser/utils/deserializeRequest.ts\nfunction deserializeRequest(serializedRequest) {\n  return new Request(serializedRequest.url, {\n    ...serializedRequest,\n    body: pruneGetRequestBody(serializedRequest)\n  });\n}\n\n// src/browser/setupWorker/start/createRequestListener.ts\n\n\n\n\n\nvar createRequestListener = (context, options) => {\n  return async (event, message) => {\n    const messageChannel = new WorkerChannel(event.ports[0]);\n    const requestId = message.payload.id;\n    const request = deserializeRequest(message.payload);\n    const requestCloneForLogs = request.clone();\n    const requestClone = request.clone();\n    _core_handlers_RequestHandler_mjs__WEBPACK_IMPORTED_MODULE_1__.RequestHandler.cache.set(request, requestClone);\n    try {\n      await (0,_core_utils_handleRequest_mjs__WEBPACK_IMPORTED_MODULE_2__.handleRequest)(\n        request,\n        requestId,\n        context.getRequestHandlers().filter((0,_core_utils_internal_isHandlerKind_mjs__WEBPACK_IMPORTED_MODULE_3__.isHandlerKind)(\"RequestHandler\")),\n        options,\n        context.emitter,\n        {\n          onPassthroughResponse() {\n            messageChannel.postMessage(\"PASSTHROUGH\");\n          },\n          async onMockedResponse(response, { handler, parsedResult }) {\n            const responseClone = response.clone();\n            const responseCloneForLogs = response.clone();\n            const responseInit = (0,_core_utils_toResponseInit_mjs__WEBPACK_IMPORTED_MODULE_4__.toResponseInit)(response);\n            if (context.supports.readableStreamTransfer) {\n              const responseStreamOrNull = response.body;\n              messageChannel.postMessage(\n                \"MOCK_RESPONSE\",\n                {\n                  ...responseInit,\n                  body: responseStreamOrNull\n                },\n                responseStreamOrNull ? [responseStreamOrNull] : void 0\n              );\n            } else {\n              const responseBufferOrNull = response.body === null ? null : await responseClone.arrayBuffer();\n              messageChannel.postMessage(\"MOCK_RESPONSE\", {\n                ...responseInit,\n                body: responseBufferOrNull\n              });\n            }\n            if (!options.quiet) {\n              context.emitter.once(\"response:mocked\", () => {\n                handler.log({\n                  request: requestCloneForLogs,\n                  response: responseCloneForLogs,\n                  parsedResult\n                });\n              });\n            }\n          }\n        }\n      );\n    } catch (error2) {\n      if (error2 instanceof Error) {\n        _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.error(\n          `Uncaught exception in the request handler for \"%s %s\":\n\n%s\n\nThis exception has been gracefully handled as a 500 response, however, it's strongly recommended to resolve this error, as it indicates a mistake in your code. If you wish to mock an error response, please see this guide: https://mswjs.io/docs/http/mocking-responses/error-responses`,\n          request.method,\n          request.url,\n          error2.stack ?? error2\n        );\n        messageChannel.postMessage(\"MOCK_RESPONSE\", {\n          status: 500,\n          statusText: \"Request Handler Error\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: error2.name,\n            message: error2.message,\n            stack: error2.stack\n          })\n        });\n      }\n    }\n  };\n};\n\n// src/browser/utils/checkWorkerIntegrity.ts\n\nasync function checkWorkerIntegrity(context) {\n  context.workerChannel.send(\"INTEGRITY_CHECK_REQUEST\");\n  const { payload } = await context.events.once(\"INTEGRITY_CHECK_RESPONSE\");\n  if (payload.checksum !== \"f5825c521429caf22a4dd13b66e243af\") {\n    _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.warn(\n      `The currently registered Service Worker has been generated by a different version of MSW (${payload.packageVersion}) and may not be fully compatible with the installed version.\n\nIt's recommended you update your worker script by running this command:\n\n  \\u2022 npx msw init <PUBLIC_DIR>\n\nYou can also automate this process and make the worker script update automatically upon the library installations. Read more: https://mswjs.io/docs/cli/init.`\n    );\n  }\n}\n\n// node_modules/.pnpm/@mswjs+interceptors@0.39.1/node_modules/@mswjs/interceptors/lib/browser/chunk-6HYIRFX2.mjs\nvar encoder = new TextEncoder();\nfunction encodeBuffer(text) {\n  return encoder.encode(text);\n}\nfunction decodeBuffer(buffer, encoding) {\n  const decoder = new TextDecoder(encoding);\n  return decoder.decode(buffer);\n}\nfunction toArrayBuffer(array) {\n  return array.buffer.slice(\n    array.byteOffset,\n    array.byteOffset + array.byteLength\n  );\n}\n\n// node_modules/.pnpm/@mswjs+interceptors@0.39.1/node_modules/@mswjs/interceptors/lib/browser/chunk-3RXCRGL2.mjs\nvar IS_PATCHED_MODULE = Symbol(\"isPatchedModule\");\nfunction canParseUrl(url) {\n  try {\n    new URL(url);\n    return true;\n  } catch (_error) {\n    return false;\n  }\n}\nfunction getValueBySymbol(symbolName, source) {\n  const ownSymbols = Object.getOwnPropertySymbols(source);\n  const symbol = ownSymbols.find((symbol2) => {\n    return symbol2.description === symbolName;\n  });\n  if (symbol) {\n    return Reflect.get(source, symbol);\n  }\n  return;\n}\nvar _FetchResponse = class extends Response {\n  static isConfigurableStatusCode(status) {\n    return status >= 200 && status <= 599;\n  }\n  static isRedirectResponse(status) {\n    return _FetchResponse.STATUS_CODES_WITH_REDIRECT.includes(status);\n  }\n  /**\n   * Returns a boolean indicating whether the given response status\n   * code represents a response that can have a body.\n   */\n  static isResponseWithBody(status) {\n    return !_FetchResponse.STATUS_CODES_WITHOUT_BODY.includes(status);\n  }\n  static setUrl(url, response) {\n    if (!url || url === \"about:\" || !canParseUrl(url)) {\n      return;\n    }\n    const state = getValueBySymbol(\"state\", response);\n    if (state) {\n      state.urlList.push(new URL(url));\n    } else {\n      Object.defineProperty(response, \"url\", {\n        value: url,\n        enumerable: true,\n        configurable: true,\n        writable: false\n      });\n    }\n  }\n  /**\n   * Parses the given raw HTTP headers into a Fetch API `Headers` instance.\n   */\n  static parseRawHeaders(rawHeaders) {\n    const headers = new Headers();\n    for (let line = 0; line < rawHeaders.length; line += 2) {\n      headers.append(rawHeaders[line], rawHeaders[line + 1]);\n    }\n    return headers;\n  }\n  constructor(body, init = {}) {\n    var _a;\n    const status = (_a = init.status) != null ? _a : 200;\n    const safeStatus = _FetchResponse.isConfigurableStatusCode(status) ? status : 200;\n    const finalBody = _FetchResponse.isResponseWithBody(status) ? body : null;\n    super(finalBody, {\n      status: safeStatus,\n      statusText: init.statusText,\n      headers: init.headers\n    });\n    if (status !== safeStatus) {\n      const state = getValueBySymbol(\"state\", this);\n      if (state) {\n        state.status = status;\n      } else {\n        Object.defineProperty(this, \"status\", {\n          value: status,\n          enumerable: true,\n          configurable: true,\n          writable: false\n        });\n      }\n    }\n    _FetchResponse.setUrl(init.url, this);\n  }\n};\nvar FetchResponse = _FetchResponse;\nFetchResponse.STATUS_CODES_WITHOUT_BODY = [101, 103, 204, 205, 304];\nFetchResponse.STATUS_CODES_WITH_REDIRECT = [301, 302, 303, 307, 308];\nvar kRawRequest = Symbol(\"kRawRequest\");\nfunction setRawRequest(request, rawRequest) {\n  Reflect.set(request, kRawRequest, rawRequest);\n}\n\n// node_modules/.pnpm/@open-draft+logger@0.3.0/node_modules/@open-draft/logger/lib/index.mjs\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar colors_exports = {};\n__export(colors_exports, {\n  blue: () => blue,\n  gray: () => gray,\n  green: () => green,\n  red: () => red,\n  yellow: () => yellow\n});\nfunction yellow(text) {\n  return `\\x1B[33m${text}\\x1B[0m`;\n}\nfunction blue(text) {\n  return `\\x1B[34m${text}\\x1B[0m`;\n}\nfunction gray(text) {\n  return `\\x1B[90m${text}\\x1B[0m`;\n}\nfunction red(text) {\n  return `\\x1B[31m${text}\\x1B[0m`;\n}\nfunction green(text) {\n  return `\\x1B[32m${text}\\x1B[0m`;\n}\nvar IS_NODE = isNodeProcess();\nvar Logger = class {\n  constructor(name) {\n    this.name = name;\n    this.prefix = `[${this.name}]`;\n    const LOGGER_NAME = getVariable(\"DEBUG\");\n    const LOGGER_LEVEL = getVariable(\"LOG_LEVEL\");\n    const isLoggingEnabled = LOGGER_NAME === \"1\" || LOGGER_NAME === \"true\" || typeof LOGGER_NAME !== \"undefined\" && this.name.startsWith(LOGGER_NAME);\n    if (isLoggingEnabled) {\n      this.debug = isDefinedAndNotEquals(LOGGER_LEVEL, \"debug\") ? noop : this.debug;\n      this.info = isDefinedAndNotEquals(LOGGER_LEVEL, \"info\") ? noop : this.info;\n      this.success = isDefinedAndNotEquals(LOGGER_LEVEL, \"success\") ? noop : this.success;\n      this.warning = isDefinedAndNotEquals(LOGGER_LEVEL, \"warning\") ? noop : this.warning;\n      this.error = isDefinedAndNotEquals(LOGGER_LEVEL, \"error\") ? noop : this.error;\n    } else {\n      this.info = noop;\n      this.success = noop;\n      this.warning = noop;\n      this.error = noop;\n      this.only = noop;\n    }\n  }\n  prefix;\n  extend(domain) {\n    return new Logger(`${this.name}:${domain}`);\n  }\n  /**\n   * Print a debug message.\n   * @example\n   * logger.debug('no duplicates found, creating a document...')\n   */\n  debug(message, ...positionals) {\n    this.logEntry({\n      level: \"debug\",\n      message: gray(message),\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"gray\"\n      }\n    });\n  }\n  /**\n   * Print an info message.\n   * @example\n   * logger.info('start parsing...')\n   */\n  info(message, ...positionals) {\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: this.prefix,\n      colors: {\n        prefix: \"blue\"\n      }\n    });\n    const performance2 = new PerformanceEntry();\n    return (message2, ...positionals2) => {\n      performance2.measure();\n      this.logEntry({\n        level: \"info\",\n        message: `${message2} ${gray(`${performance2.deltaTime}ms`)}`,\n        positionals: positionals2,\n        prefix: this.prefix,\n        colors: {\n          prefix: \"blue\"\n        }\n      });\n    };\n  }\n  /**\n   * Print a success message.\n   * @example\n   * logger.success('successfully created document')\n   */\n  success(message, ...positionals) {\n    this.logEntry({\n      level: \"info\",\n      message,\n      positionals,\n      prefix: `\\u2714 ${this.prefix}`,\n      colors: {\n        timestamp: \"green\",\n        prefix: \"green\"\n      }\n    });\n  }\n  /**\n   * Print a warning.\n   * @example\n   * logger.warning('found legacy document format')\n   */\n  warning(message, ...positionals) {\n    this.logEntry({\n      level: \"warning\",\n      message,\n      positionals,\n      prefix: `\\u26A0 ${this.prefix}`,\n      colors: {\n        timestamp: \"yellow\",\n        prefix: \"yellow\"\n      }\n    });\n  }\n  /**\n   * Print an error message.\n   * @example\n   * logger.error('something went wrong')\n   */\n  error(message, ...positionals) {\n    this.logEntry({\n      level: \"error\",\n      message,\n      positionals,\n      prefix: `\\u2716 ${this.prefix}`,\n      colors: {\n        timestamp: \"red\",\n        prefix: \"red\"\n      }\n    });\n  }\n  /**\n   * Execute the given callback only when the logging is enabled.\n   * This is skipped in its entirety and has no runtime cost otherwise.\n   * This executes regardless of the log level.\n   * @example\n   * logger.only(() => {\n   *   logger.info('additional info')\n   * })\n   */\n  only(callback) {\n    callback();\n  }\n  createEntry(level, message) {\n    return {\n      timestamp: /* @__PURE__ */ new Date(),\n      level,\n      message\n    };\n  }\n  logEntry(args) {\n    const {\n      level,\n      message,\n      prefix,\n      colors: customColors,\n      positionals = []\n    } = args;\n    const entry = this.createEntry(level, message);\n    const timestampColor = customColors?.timestamp || \"gray\";\n    const prefixColor = customColors?.prefix || \"gray\";\n    const colorize = {\n      timestamp: colors_exports[timestampColor],\n      prefix: colors_exports[prefixColor]\n    };\n    const write = this.getWriter(level);\n    write(\n      [colorize.timestamp(this.formatTimestamp(entry.timestamp))].concat(prefix != null ? colorize.prefix(prefix) : []).concat(serializeInput(message)).join(\" \"),\n      ...positionals.map(serializeInput)\n    );\n  }\n  formatTimestamp(timestamp) {\n    return `${timestamp.toLocaleTimeString(\n      \"en-GB\"\n    )}:${timestamp.getMilliseconds()}`;\n  }\n  getWriter(level) {\n    switch (level) {\n      case \"debug\":\n      case \"success\":\n      case \"info\": {\n        return log;\n      }\n      case \"warning\": {\n        return warn;\n      }\n      case \"error\": {\n        return error;\n      }\n    }\n  }\n};\nvar PerformanceEntry = class {\n  startTime;\n  endTime;\n  deltaTime;\n  constructor() {\n    this.startTime = performance.now();\n  }\n  measure() {\n    this.endTime = performance.now();\n    const deltaTime = this.endTime - this.startTime;\n    this.deltaTime = deltaTime.toFixed(2);\n  }\n};\nvar noop = () => void 0;\nfunction log(message, ...positionals) {\n  if (IS_NODE) {\n    process.stdout.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.log(message, ...positionals);\n}\nfunction warn(message, ...positionals) {\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.warn(message, ...positionals);\n}\nfunction error(message, ...positionals) {\n  if (IS_NODE) {\n    process.stderr.write(format(message, ...positionals) + \"\\n\");\n    return;\n  }\n  console.error(message, ...positionals);\n}\nfunction getVariable(variableName) {\n  if (IS_NODE) {\n    return process.env[variableName];\n  }\n  return globalThis[variableName]?.toString();\n}\nfunction isDefinedAndNotEquals(value, expected) {\n  return value !== void 0 && value !== expected;\n}\nfunction serializeInput(message) {\n  if (typeof message === \"undefined\") {\n    return \"undefined\";\n  }\n  if (message === null) {\n    return \"null\";\n  }\n  if (typeof message === \"string\") {\n    return message;\n  }\n  if (typeof message === \"object\") {\n    return JSON.stringify(message);\n  }\n  return message.toString();\n}\n\n// node_modules/.pnpm/strict-event-emitter@0.5.1/node_modules/strict-event-emitter/lib/index.mjs\nvar MemoryLeakError = class extends Error {\n  constructor(emitter, type, count) {\n    super(\n      `Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`\n    );\n    this.emitter = emitter;\n    this.type = type;\n    this.count = count;\n    this.name = \"MaxListenersExceededWarning\";\n  }\n};\nvar _Emitter = class {\n  static listenerCount(emitter, eventName) {\n    return emitter.listenerCount(eventName);\n  }\n  constructor() {\n    this.events = /* @__PURE__ */ new Map();\n    this.maxListeners = _Emitter.defaultMaxListeners;\n    this.hasWarnedAboutPotentialMemoryLeak = false;\n  }\n  _emitInternalEvent(internalEventName, eventName, listener) {\n    this.emit(\n      internalEventName,\n      ...[eventName, listener]\n    );\n  }\n  _getListeners(eventName) {\n    return Array.prototype.concat.apply([], this.events.get(eventName)) || [];\n  }\n  _removeListener(listeners, listener) {\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n    return [];\n  }\n  _wrapOnceListener(eventName, listener) {\n    const onceListener = (...data) => {\n      this.removeListener(eventName, onceListener);\n      return listener.apply(this, data);\n    };\n    Object.defineProperty(onceListener, \"name\", { value: listener.name });\n    return onceListener;\n  }\n  setMaxListeners(maxListeners) {\n    this.maxListeners = maxListeners;\n    return this;\n  }\n  /**\n   * Returns the current max listener value for the `Emitter` which is\n   * either set by `emitter.setMaxListeners(n)` or defaults to\n   * `Emitter.defaultMaxListeners`.\n   */\n  getMaxListeners() {\n    return this.maxListeners;\n  }\n  /**\n   * Returns an array listing the events for which the emitter has registered listeners.\n   * The values in the array will be strings or Symbols.\n   */\n  eventNames() {\n    return Array.from(this.events.keys());\n  }\n  /**\n   * Synchronously calls each of the listeners registered for the event named `eventName`,\n   * in the order they were registered, passing the supplied arguments to each.\n   * Returns `true` if the event has listeners, `false` otherwise.\n   *\n   * @example\n   * const emitter = new Emitter<{ hello: [string] }>()\n   * emitter.emit('hello', 'John')\n   */\n  emit(eventName, ...data) {\n    const listeners = this._getListeners(eventName);\n    listeners.forEach((listener) => {\n      listener.apply(this, data);\n    });\n    return listeners.length > 0;\n  }\n  addListener(eventName, listener) {\n    this._emitInternalEvent(\"newListener\", eventName, listener);\n    const nextListeners = this._getListeners(eventName).concat(listener);\n    this.events.set(eventName, nextListeners);\n    if (this.maxListeners > 0 && this.listenerCount(eventName) > this.maxListeners && !this.hasWarnedAboutPotentialMemoryLeak) {\n      this.hasWarnedAboutPotentialMemoryLeak = true;\n      const memoryLeakWarning = new MemoryLeakError(\n        this,\n        eventName,\n        this.listenerCount(eventName)\n      );\n      console.warn(memoryLeakWarning);\n    }\n    return this;\n  }\n  on(eventName, listener) {\n    return this.addListener(eventName, listener);\n  }\n  once(eventName, listener) {\n    return this.addListener(\n      eventName,\n      this._wrapOnceListener(eventName, listener)\n    );\n  }\n  prependListener(eventName, listener) {\n    const listeners = this._getListeners(eventName);\n    if (listeners.length > 0) {\n      const nextListeners = [listener].concat(listeners);\n      this.events.set(eventName, nextListeners);\n    } else {\n      this.events.set(eventName, listeners.concat(listener));\n    }\n    return this;\n  }\n  prependOnceListener(eventName, listener) {\n    return this.prependListener(\n      eventName,\n      this._wrapOnceListener(eventName, listener)\n    );\n  }\n  removeListener(eventName, listener) {\n    const listeners = this._getListeners(eventName);\n    if (listeners.length > 0) {\n      this._removeListener(listeners, listener);\n      this.events.set(eventName, listeners);\n      this._emitInternalEvent(\"removeListener\", eventName, listener);\n    }\n    return this;\n  }\n  /**\n   * Alias for `emitter.removeListener()`.\n   *\n   * @example\n   * emitter.off('hello', listener)\n   */\n  off(eventName, listener) {\n    return this.removeListener(eventName, listener);\n  }\n  removeAllListeners(eventName) {\n    if (eventName) {\n      this.events.delete(eventName);\n    } else {\n      this.events.clear();\n    }\n    return this;\n  }\n  /**\n   * Returns a copy of the array of listeners for the event named `eventName`.\n   */\n  listeners(eventName) {\n    return Array.from(this._getListeners(eventName));\n  }\n  /**\n   * Returns the number of listeners listening to the event named `eventName`.\n   */\n  listenerCount(eventName) {\n    return this._getListeners(eventName).length;\n  }\n  rawListeners(eventName) {\n    return this.listeners(eventName);\n  }\n};\nvar Emitter = _Emitter;\nEmitter.defaultMaxListeners = 10;\n\n// node_modules/.pnpm/@mswjs+interceptors@0.39.1/node_modules/@mswjs/interceptors/lib/browser/chunk-QED3Q6Z2.mjs\nvar INTERNAL_REQUEST_ID_HEADER_NAME = \"x-interceptors-internal-request-id\";\nfunction getGlobalSymbol(symbol) {\n  return (\n    // @ts-ignore https://github.com/Microsoft/TypeScript/issues/24587\n    globalThis[symbol] || void 0\n  );\n}\nfunction setGlobalSymbol(symbol, value) {\n  globalThis[symbol] = value;\n}\nfunction deleteGlobalSymbol(symbol) {\n  delete globalThis[symbol];\n}\nvar Interceptor = class {\n  constructor(symbol) {\n    this.symbol = symbol;\n    this.readyState = \"INACTIVE\";\n    this.emitter = new Emitter();\n    this.subscriptions = [];\n    this.logger = new Logger(symbol.description);\n    this.emitter.setMaxListeners(0);\n    this.logger.info(\"constructing the interceptor...\");\n  }\n  /**\n   * Determine if this interceptor can be applied\n   * in the current environment.\n   */\n  checkEnvironment() {\n    return true;\n  }\n  /**\n   * Apply this interceptor to the current process.\n   * Returns an already running interceptor instance if it's present.\n   */\n  apply() {\n    const logger = this.logger.extend(\"apply\");\n    logger.info(\"applying the interceptor...\");\n    if (this.readyState === \"APPLIED\") {\n      logger.info(\"intercepted already applied!\");\n      return;\n    }\n    const shouldApply = this.checkEnvironment();\n    if (!shouldApply) {\n      logger.info(\"the interceptor cannot be applied in this environment!\");\n      return;\n    }\n    this.readyState = \"APPLYING\";\n    const runningInstance = this.getInstance();\n    if (runningInstance) {\n      logger.info(\"found a running instance, reusing...\");\n      this.on = (event, listener) => {\n        logger.info('proxying the \"%s\" listener', event);\n        runningInstance.emitter.addListener(event, listener);\n        this.subscriptions.push(() => {\n          runningInstance.emitter.removeListener(event, listener);\n          logger.info('removed proxied \"%s\" listener!', event);\n        });\n        return this;\n      };\n      this.readyState = \"APPLIED\";\n      return;\n    }\n    logger.info(\"no running instance found, setting up a new instance...\");\n    this.setup();\n    this.setInstance();\n    this.readyState = \"APPLIED\";\n  }\n  /**\n   * Setup the module augments and stubs necessary for this interceptor.\n   * This method is not run if there's a running interceptor instance\n   * to prevent instantiating an interceptor multiple times.\n   */\n  setup() {\n  }\n  /**\n   * Listen to the interceptor's public events.\n   */\n  on(event, listener) {\n    const logger = this.logger.extend(\"on\");\n    if (this.readyState === \"DISPOSING\" || this.readyState === \"DISPOSED\") {\n      logger.info(\"cannot listen to events, already disposed!\");\n      return this;\n    }\n    logger.info('adding \"%s\" event listener:', event, listener);\n    this.emitter.on(event, listener);\n    return this;\n  }\n  once(event, listener) {\n    this.emitter.once(event, listener);\n    return this;\n  }\n  off(event, listener) {\n    this.emitter.off(event, listener);\n    return this;\n  }\n  removeAllListeners(event) {\n    this.emitter.removeAllListeners(event);\n    return this;\n  }\n  /**\n   * Disposes of any side-effects this interceptor has introduced.\n   */\n  dispose() {\n    const logger = this.logger.extend(\"dispose\");\n    if (this.readyState === \"DISPOSED\") {\n      logger.info(\"cannot dispose, already disposed!\");\n      return;\n    }\n    logger.info(\"disposing the interceptor...\");\n    this.readyState = \"DISPOSING\";\n    if (!this.getInstance()) {\n      logger.info(\"no interceptors running, skipping dispose...\");\n      return;\n    }\n    this.clearInstance();\n    logger.info(\"global symbol deleted:\", getGlobalSymbol(this.symbol));\n    if (this.subscriptions.length > 0) {\n      logger.info(\"disposing of %d subscriptions...\", this.subscriptions.length);\n      for (const dispose of this.subscriptions) {\n        dispose();\n      }\n      this.subscriptions = [];\n      logger.info(\"disposed of all subscriptions!\", this.subscriptions.length);\n    }\n    this.emitter.removeAllListeners();\n    logger.info(\"destroyed the listener!\");\n    this.readyState = \"DISPOSED\";\n  }\n  getInstance() {\n    var _a;\n    const instance = getGlobalSymbol(this.symbol);\n    this.logger.info(\"retrieved global instance:\", (_a = instance == null ? void 0 : instance.constructor) == null ? void 0 : _a.name);\n    return instance;\n  }\n  setInstance() {\n    setGlobalSymbol(this.symbol, this);\n    this.logger.info(\"set global instance!\", this.symbol.description);\n  }\n  clearInstance() {\n    deleteGlobalSymbol(this.symbol);\n    this.logger.info(\"cleared global instance!\", this.symbol.description);\n  }\n};\nfunction createRequestId() {\n  return Math.random().toString(16).slice(2);\n}\n\n// node_modules/.pnpm/@mswjs+interceptors@0.39.1/node_modules/@mswjs/interceptors/lib/browser/index.mjs\nvar BatchInterceptor = class extends Interceptor {\n  constructor(options) {\n    BatchInterceptor.symbol = Symbol(options.name);\n    super(BatchInterceptor.symbol);\n    this.interceptors = options.interceptors;\n  }\n  setup() {\n    const logger = this.logger.extend(\"setup\");\n    logger.info(\"applying all %d interceptors...\", this.interceptors.length);\n    for (const interceptor of this.interceptors) {\n      logger.info('applying \"%s\" interceptor...', interceptor.constructor.name);\n      interceptor.apply();\n      logger.info(\"adding interceptor dispose subscription\");\n      this.subscriptions.push(() => interceptor.dispose());\n    }\n  }\n  on(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.on(event, listener);\n    }\n    return this;\n  }\n  once(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.once(event, listener);\n    }\n    return this;\n  }\n  off(event, listener) {\n    for (const interceptor of this.interceptors) {\n      interceptor.off(event, listener);\n    }\n    return this;\n  }\n  removeAllListeners(event) {\n    for (const interceptors of this.interceptors) {\n      interceptors.removeAllListeners(event);\n    }\n    return this;\n  }\n};\n\n// src/browser/setupWorker/start/createResponseListener.ts\nfunction createResponseListener(context) {\n  return (_, message) => {\n    const { payload: responseJson } = message;\n    const request = deserializeRequest(responseJson.request);\n    if (responseJson.response.type?.includes(\"opaque\")) {\n      return;\n    }\n    const response = responseJson.response.status === 0 ? Response.error() : new FetchResponse(\n      /**\n       * Responses may be streams here, but when we create a response object\n       * with null-body status codes, like 204, 205, 304 Response will\n       * throw when passed a non-null body, so ensure it's null here\n       * for those codes\n       */\n      FetchResponse.isResponseWithBody(responseJson.response.status) ? responseJson.response.body : null,\n      {\n        ...responseJson,\n        /**\n         * Set response URL if it's not set already.\n         * @see https://github.com/mswjs/msw/issues/2030\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Response/url\n         */\n        url: request.url\n      }\n    );\n    context.emitter.emit(\n      responseJson.isMockedResponse ? \"response:mocked\" : \"response:bypass\",\n      {\n        requestId: responseJson.request.id,\n        request,\n        response\n      }\n    );\n  };\n}\n\n// src/browser/setupWorker/start/utils/validateWorkerScope.ts\n\nfunction validateWorkerScope(registration, options) {\n  if (!options?.quiet && !location.href.startsWith(registration.scope)) {\n    _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.warn(\n      `Cannot intercept requests on this page because it's outside of the worker's scope (\"${registration.scope}\"). If you wish to mock API requests on this page, you must resolve this scope issue.\n\n- (Recommended) Register the worker at the root level (\"/\") of your application.\n- Set the \"Service-Worker-Allowed\" response header to allow out-of-scope workers.`\n    );\n  }\n}\n\n// src/browser/setupWorker/start/createStartHandler.ts\nvar createStartHandler = (context) => {\n  return function start(options, customOptions) {\n    const startWorkerInstance = async () => {\n      context.events.removeAllListeners();\n      context.workerChannel.on(\n        \"REQUEST\",\n        createRequestListener(context, options)\n      );\n      context.workerChannel.on(\"RESPONSE\", createResponseListener(context));\n      const instance = await getWorkerInstance(\n        options.serviceWorker.url,\n        options.serviceWorker.options,\n        options.findWorker\n      );\n      const [worker, registration] = instance;\n      if (!worker) {\n        const missingWorkerMessage = customOptions?.findWorker ? _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.formatMessage(\n          `Failed to locate the Service Worker registration using a custom \"findWorker\" predicate.\n\nPlease ensure that the custom predicate properly locates the Service Worker registration at \"%s\".\nMore details: https://mswjs.io/docs/api/setup-worker/start#findworker\n`,\n          options.serviceWorker.url\n        ) : _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.formatMessage(\n          `Failed to locate the Service Worker registration.\n\nThis most likely means that the worker script URL \"%s\" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.\n\nPlease consider using a custom \"serviceWorker.url\" option to point to the actual worker script location, or a custom \"findWorker\" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`,\n          options.serviceWorker.url,\n          location.host\n        );\n        throw new Error(missingWorkerMessage);\n      }\n      context.worker = worker;\n      context.registration = registration;\n      context.events.addListener(window, \"beforeunload\", () => {\n        if (worker.state !== \"redundant\") {\n          context.workerChannel.send(\"CLIENT_CLOSED\");\n        }\n        window.clearInterval(context.keepAliveInterval);\n        window.postMessage({ type: \"msw/worker:stop\" });\n      });\n      await checkWorkerIntegrity(context).catch((error2) => {\n        _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.error(\n          \"Error while checking the worker script integrity. Please report this on GitHub (https://github.com/mswjs/msw/issues), including the original error below.\"\n        );\n        console.error(error2);\n      });\n      context.keepAliveInterval = window.setInterval(\n        () => context.workerChannel.send(\"KEEPALIVE_REQUEST\"),\n        5e3\n      );\n      validateWorkerScope(registration, context.startOptions);\n      return registration;\n    };\n    const workerRegistration = startWorkerInstance().then(\n      async (registration) => {\n        const pendingInstance = registration.installing || registration.waiting;\n        if (pendingInstance) {\n          await new Promise((resolve) => {\n            pendingInstance.addEventListener(\"statechange\", () => {\n              if (pendingInstance.state === \"activated\") {\n                return resolve();\n              }\n            });\n          });\n        }\n        await enableMocking(context, options).catch((error2) => {\n          throw new Error(`Failed to enable mocking: ${error2?.message}`);\n        });\n        return registration;\n      }\n    );\n    return workerRegistration;\n  };\n};\n\n// src/browser/setupWorker/stop/createStop.ts\n\n\n// src/browser/setupWorker/stop/utils/printStopMessage.ts\n\nfunction printStopMessage(args = {}) {\n  if (args.quiet) {\n    return;\n  }\n  console.log(\n    `%c${_core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.formatMessage(\"Mocking disabled.\")}`,\n    \"color:orangered;font-weight:bold;\"\n  );\n}\n\n// src/browser/setupWorker/stop/createStop.ts\nvar createStop = (context) => {\n  return function stop() {\n    if (!context.isMockingEnabled) {\n      _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.warn(\n        'Found a redundant \"worker.stop()\" call. Note that stopping the worker while mocking already stopped has no effect. Consider removing this \"worker.stop()\" call.'\n      );\n      return;\n    }\n    context.workerChannel.send(\"MOCK_DEACTIVATE\");\n    context.isMockingEnabled = false;\n    window.clearInterval(context.keepAliveInterval);\n    window.postMessage({ type: \"msw/worker:stop\" });\n    printStopMessage({ quiet: context.startOptions?.quiet });\n  };\n};\n\n// src/browser/setupWorker/start/utils/prepareStartHandler.ts\n\nvar DEFAULT_START_OPTIONS = {\n  serviceWorker: {\n    url: \"/mockServiceWorker.js\",\n    options: null\n  },\n  quiet: false,\n  waitUntilReady: true,\n  onUnhandledRequest: \"warn\",\n  findWorker(scriptURL, mockServiceWorkerUrl) {\n    return scriptURL === mockServiceWorkerUrl;\n  }\n};\n\n// node_modules/.pnpm/@open-draft+deferred-promise@2.2.0/node_modules/@open-draft/deferred-promise/build/index.mjs\nfunction createDeferredExecutor() {\n  const executor = (resolve, reject) => {\n    executor.state = \"pending\";\n    executor.resolve = (data) => {\n      if (executor.state !== \"pending\") {\n        return;\n      }\n      executor.result = data;\n      const onFulfilled = (value) => {\n        executor.state = \"fulfilled\";\n        return value;\n      };\n      return resolve(\n        data instanceof Promise ? data : Promise.resolve(data).then(onFulfilled)\n      );\n    };\n    executor.reject = (reason) => {\n      if (executor.state !== \"pending\") {\n        return;\n      }\n      queueMicrotask(() => {\n        executor.state = \"rejected\";\n      });\n      return reject(executor.rejectionReason = reason);\n    };\n  };\n  return executor;\n}\nvar DeferredPromise = class extends Promise {\n  #executor;\n  resolve;\n  reject;\n  constructor(executor = null) {\n    const deferredExecutor = createDeferredExecutor();\n    super((originalResolve, originalReject) => {\n      deferredExecutor(originalResolve, originalReject);\n      executor?.(deferredExecutor.resolve, deferredExecutor.reject);\n    });\n    this.#executor = deferredExecutor;\n    this.resolve = this.#executor.resolve;\n    this.reject = this.#executor.reject;\n  }\n  get state() {\n    return this.#executor.state;\n  }\n  get rejectionReason() {\n    return this.#executor.rejectionReason;\n  }\n  then(onFulfilled, onRejected) {\n    return this.#decorate(super.then(onFulfilled, onRejected));\n  }\n  catch(onRejected) {\n    return this.#decorate(super.catch(onRejected));\n  }\n  finally(onfinally) {\n    return this.#decorate(super.finally(onfinally));\n  }\n  #decorate(promise) {\n    return Object.defineProperties(promise, {\n      resolve: { configurable: true, value: this.resolve },\n      reject: { configurable: true, value: this.reject }\n    });\n  }\n};\n\n// node_modules/.pnpm/@mswjs+interceptors@0.39.1/node_modules/@mswjs/interceptors/lib/browser/chunk-L37TY7LC.mjs\nvar InterceptorError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"InterceptorError\";\n    Object.setPrototypeOf(this, InterceptorError.prototype);\n  }\n};\nvar kRequestHandled = Symbol(\"kRequestHandled\");\nvar kResponsePromise = Symbol(\"kResponsePromise\");\nvar RequestController = class {\n  constructor(request) {\n    this.request = request;\n    this[kRequestHandled] = false;\n    this[kResponsePromise] = new DeferredPromise();\n  }\n  /**\n   * Respond to this request with the given `Response` instance.\n   * @example\n   * controller.respondWith(new Response())\n   * controller.respondWith(Response.json({ id }))\n   * controller.respondWith(Response.error())\n   */\n  respondWith(response) {\n    invariant.as(\n      InterceptorError,\n      !this[kRequestHandled],\n      'Failed to respond to the \"%s %s\" request: the \"request\" event has already been handled.',\n      this.request.method,\n      this.request.url\n    );\n    this[kRequestHandled] = true;\n    this[kResponsePromise].resolve(response);\n  }\n  /**\n   * Error this request with the given reason.\n   *\n   * @example\n   * controller.errorWith()\n   * controller.errorWith(new Error('Oops!'))\n   * controller.errorWith({ message: 'Oops!'})\n   */\n  errorWith(reason) {\n    invariant.as(\n      InterceptorError,\n      !this[kRequestHandled],\n      'Failed to error the \"%s %s\" request: the \"request\" event has already been handled.',\n      this.request.method,\n      this.request.url\n    );\n    this[kRequestHandled] = true;\n    this[kResponsePromise].resolve(reason);\n  }\n};\nasync function emitAsync(emitter, eventName, ...data) {\n  const listners = emitter.listeners(eventName);\n  if (listners.length === 0) {\n    return;\n  }\n  for (const listener of listners) {\n    await listener.apply(emitter, data);\n  }\n}\nfunction isObject(value, loose = false) {\n  return loose ? Object.prototype.toString.call(value).startsWith(\"[object \") : Object.prototype.toString.call(value) === \"[object Object]\";\n}\nfunction isPropertyAccessible(obj, key) {\n  try {\n    obj[key];\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction createServerErrorResponse(body) {\n  return new Response(\n    JSON.stringify(\n      body instanceof Error ? {\n        name: body.name,\n        message: body.message,\n        stack: body.stack\n      } : body\n    ),\n    {\n      status: 500,\n      statusText: \"Unhandled Exception\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n}\nfunction isResponseError(response) {\n  return response != null && response instanceof Response && isPropertyAccessible(response, \"type\") && response.type === \"error\";\n}\nfunction isResponseLike(value) {\n  return isObject(value, true) && isPropertyAccessible(value, \"status\") && isPropertyAccessible(value, \"statusText\") && isPropertyAccessible(value, \"bodyUsed\");\n}\nfunction isNodeLikeError(error2) {\n  if (error2 == null) {\n    return false;\n  }\n  if (!(error2 instanceof Error)) {\n    return false;\n  }\n  return \"code\" in error2 && \"errno\" in error2;\n}\nasync function handleRequest2(options) {\n  const handleResponse = async (response) => {\n    if (response instanceof Error) {\n      options.onError(response);\n      return true;\n    }\n    if (isResponseError(response)) {\n      options.onRequestError(response);\n      return true;\n    }\n    if (isResponseLike(response)) {\n      await options.onResponse(response);\n      return true;\n    }\n    if (isObject(response)) {\n      options.onError(response);\n      return true;\n    }\n    return false;\n  };\n  const handleResponseError = async (error2) => {\n    if (error2 instanceof InterceptorError) {\n      throw result.error;\n    }\n    if (isNodeLikeError(error2)) {\n      options.onError(error2);\n      return true;\n    }\n    if (error2 instanceof Response) {\n      return await handleResponse(error2);\n    }\n    return false;\n  };\n  options.emitter.once(\"request\", ({ requestId: pendingRequestId }) => {\n    if (pendingRequestId !== options.requestId) {\n      return;\n    }\n    if (options.controller[kResponsePromise].state === \"pending\") {\n      options.controller[kResponsePromise].resolve(void 0);\n    }\n  });\n  const requestAbortPromise = new DeferredPromise();\n  if (options.request.signal) {\n    if (options.request.signal.aborted) {\n      requestAbortPromise.reject(options.request.signal.reason);\n    } else {\n      options.request.signal.addEventListener(\n        \"abort\",\n        () => {\n          requestAbortPromise.reject(options.request.signal.reason);\n        },\n        { once: true }\n      );\n    }\n  }\n  const result = await until(async () => {\n    const requestListenersPromise = emitAsync(options.emitter, \"request\", {\n      requestId: options.requestId,\n      request: options.request,\n      controller: options.controller\n    });\n    await Promise.race([\n      // Short-circuit the request handling promise if the request gets aborted.\n      requestAbortPromise,\n      requestListenersPromise,\n      options.controller[kResponsePromise]\n    ]);\n    return await options.controller[kResponsePromise];\n  });\n  if (requestAbortPromise.state === \"rejected\") {\n    options.onError(requestAbortPromise.rejectionReason);\n    return true;\n  }\n  if (result.error) {\n    if (await handleResponseError(result.error)) {\n      return true;\n    }\n    if (options.emitter.listenerCount(\"unhandledException\") > 0) {\n      const unhandledExceptionController = new RequestController(\n        options.request\n      );\n      await emitAsync(options.emitter, \"unhandledException\", {\n        error: result.error,\n        request: options.request,\n        requestId: options.requestId,\n        controller: unhandledExceptionController\n      }).then(() => {\n        if (unhandledExceptionController[kResponsePromise].state === \"pending\") {\n          unhandledExceptionController[kResponsePromise].resolve(void 0);\n        }\n      });\n      const nextResult = await until(\n        () => unhandledExceptionController[kResponsePromise]\n      );\n      if (nextResult.error) {\n        return handleResponseError(nextResult.error);\n      }\n      if (nextResult.data) {\n        return handleResponse(nextResult.data);\n      }\n    }\n    options.onResponse(createServerErrorResponse(result.error));\n    return true;\n  }\n  if (result.data) {\n    return handleResponse(result.data);\n  }\n  return false;\n}\n\n// node_modules/.pnpm/@mswjs+interceptors@0.39.1/node_modules/@mswjs/interceptors/lib/browser/chunk-TX5GBTFY.mjs\nfunction hasConfigurableGlobal(propertyName) {\n  const descriptor = Object.getOwnPropertyDescriptor(globalThis, propertyName);\n  if (typeof descriptor === \"undefined\") {\n    return false;\n  }\n  if (typeof descriptor.get === \"function\" && typeof descriptor.get() === \"undefined\") {\n    return false;\n  }\n  if (typeof descriptor.get === \"undefined\" && descriptor.value == null) {\n    return false;\n  }\n  if (typeof descriptor.set === \"undefined\" && !descriptor.configurable) {\n    console.error(\n      `[MSW] Failed to apply interceptor: the global \\`${propertyName}\\` property is non-configurable. This is likely an issue with your environment. If you are using a framework, please open an issue about this in their repository.`\n    );\n    return false;\n  }\n  return true;\n}\n\n// node_modules/.pnpm/@mswjs+interceptors@0.39.1/node_modules/@mswjs/interceptors/lib/browser/chunk-ARPHZXGT.mjs\nfunction createNetworkError(cause) {\n  return Object.assign(new TypeError(\"Failed to fetch\"), {\n    cause\n  });\n}\nvar REQUEST_BODY_HEADERS = [\n  \"content-encoding\",\n  \"content-language\",\n  \"content-location\",\n  \"content-type\",\n  \"content-length\"\n];\nvar kRedirectCount = Symbol(\"kRedirectCount\");\nasync function followFetchRedirect(request, response) {\n  if (response.status !== 303 && request.body != null) {\n    return Promise.reject(createNetworkError());\n  }\n  const requestUrl = new URL(request.url);\n  let locationUrl;\n  try {\n    locationUrl = new URL(response.headers.get(\"location\"), request.url);\n  } catch (error2) {\n    return Promise.reject(createNetworkError(error2));\n  }\n  if (!(locationUrl.protocol === \"http:\" || locationUrl.protocol === \"https:\")) {\n    return Promise.reject(\n      createNetworkError(\"URL scheme must be a HTTP(S) scheme\")\n    );\n  }\n  if (Reflect.get(request, kRedirectCount) > 20) {\n    return Promise.reject(createNetworkError(\"redirect count exceeded\"));\n  }\n  Object.defineProperty(request, kRedirectCount, {\n    value: (Reflect.get(request, kRedirectCount) || 0) + 1\n  });\n  if (request.mode === \"cors\" && (locationUrl.username || locationUrl.password) && !sameOrigin(requestUrl, locationUrl)) {\n    return Promise.reject(\n      createNetworkError('cross origin not allowed for request mode \"cors\"')\n    );\n  }\n  const requestInit = {};\n  if ([301, 302].includes(response.status) && request.method === \"POST\" || response.status === 303 && ![\"HEAD\", \"GET\"].includes(request.method)) {\n    requestInit.method = \"GET\";\n    requestInit.body = null;\n    REQUEST_BODY_HEADERS.forEach((headerName) => {\n      request.headers.delete(headerName);\n    });\n  }\n  if (!sameOrigin(requestUrl, locationUrl)) {\n    request.headers.delete(\"authorization\");\n    request.headers.delete(\"proxy-authorization\");\n    request.headers.delete(\"cookie\");\n    request.headers.delete(\"host\");\n  }\n  requestInit.headers = request.headers;\n  return fetch(new Request(locationUrl, requestInit));\n}\nfunction sameOrigin(left, right) {\n  if (left.origin === right.origin && left.origin === \"null\") {\n    return true;\n  }\n  if (left.protocol === right.protocol && left.hostname === right.hostname && left.port === right.port) {\n    return true;\n  }\n  return false;\n}\nvar BrotliDecompressionStream = class extends TransformStream {\n  constructor() {\n    console.warn(\n      \"[Interceptors]: Brotli decompression of response streams is not supported in the browser\"\n    );\n    super({\n      transform(chunk, controller) {\n        controller.enqueue(chunk);\n      }\n    });\n  }\n};\nvar PipelineStream = class extends TransformStream {\n  constructor(transformStreams, ...strategies) {\n    super({}, ...strategies);\n    const readable = [super.readable, ...transformStreams].reduce(\n      (readable2, transform) => readable2.pipeThrough(transform)\n    );\n    Object.defineProperty(this, \"readable\", {\n      get() {\n        return readable;\n      }\n    });\n  }\n};\nfunction parseContentEncoding(contentEncoding) {\n  return contentEncoding.toLowerCase().split(\",\").map((coding) => coding.trim());\n}\nfunction createDecompressionStream(contentEncoding) {\n  if (contentEncoding === \"\") {\n    return null;\n  }\n  const codings = parseContentEncoding(contentEncoding);\n  if (codings.length === 0) {\n    return null;\n  }\n  const transformers = codings.reduceRight(\n    (transformers2, coding) => {\n      if (coding === \"gzip\" || coding === \"x-gzip\") {\n        return transformers2.concat(new DecompressionStream(\"gzip\"));\n      } else if (coding === \"deflate\") {\n        return transformers2.concat(new DecompressionStream(\"deflate\"));\n      } else if (coding === \"br\") {\n        return transformers2.concat(new BrotliDecompressionStream());\n      } else {\n        transformers2.length = 0;\n      }\n      return transformers2;\n    },\n    []\n  );\n  return new PipelineStream(transformers);\n}\nfunction decompressResponse(response) {\n  if (response.body === null) {\n    return null;\n  }\n  const decompressionStream = createDecompressionStream(\n    response.headers.get(\"content-encoding\") || \"\"\n  );\n  if (!decompressionStream) {\n    return null;\n  }\n  response.body.pipeTo(decompressionStream.writable);\n  return decompressionStream.readable;\n}\nvar _FetchInterceptor = class extends Interceptor {\n  constructor() {\n    super(_FetchInterceptor.symbol);\n  }\n  checkEnvironment() {\n    return hasConfigurableGlobal(\"fetch\");\n  }\n  async setup() {\n    const pureFetch = globalThis.fetch;\n    invariant(\n      !pureFetch[IS_PATCHED_MODULE],\n      'Failed to patch the \"fetch\" module: already patched.'\n    );\n    globalThis.fetch = async (input, init) => {\n      const requestId = createRequestId();\n      const resolvedInput = typeof input === \"string\" && typeof location !== \"undefined\" && !canParseUrl(input) ? new URL(input, location.href) : input;\n      const request = new Request(resolvedInput, init);\n      if (input instanceof Request) {\n        setRawRequest(request, input);\n      }\n      const responsePromise = new DeferredPromise();\n      const controller = new RequestController(request);\n      this.logger.info(\"[%s] %s\", request.method, request.url);\n      this.logger.info(\"awaiting for the mocked response...\");\n      this.logger.info(\n        'emitting the \"request\" event for %s listener(s)...',\n        this.emitter.listenerCount(\"request\")\n      );\n      const isRequestHandled = await handleRequest2({\n        request,\n        requestId,\n        emitter: this.emitter,\n        controller,\n        onResponse: async (rawResponse) => {\n          this.logger.info(\"received mocked response!\", {\n            rawResponse\n          });\n          const decompressedStream = decompressResponse(rawResponse);\n          const response = decompressedStream === null ? rawResponse : new FetchResponse(decompressedStream, rawResponse);\n          FetchResponse.setUrl(request.url, response);\n          if (FetchResponse.isRedirectResponse(response.status)) {\n            if (request.redirect === \"error\") {\n              responsePromise.reject(createNetworkError(\"unexpected redirect\"));\n              return;\n            }\n            if (request.redirect === \"follow\") {\n              followFetchRedirect(request, response).then(\n                (response2) => {\n                  responsePromise.resolve(response2);\n                },\n                (reason) => {\n                  responsePromise.reject(reason);\n                }\n              );\n              return;\n            }\n          }\n          if (this.emitter.listenerCount(\"response\") > 0) {\n            this.logger.info('emitting the \"response\" event...');\n            await emitAsync(this.emitter, \"response\", {\n              // Clone the mocked response for the \"response\" event listener.\n              // This way, the listener can read the response and not lock its body\n              // for the actual fetch consumer.\n              response: response.clone(),\n              isMockedResponse: true,\n              request,\n              requestId\n            });\n          }\n          responsePromise.resolve(response);\n        },\n        onRequestError: (response) => {\n          this.logger.info(\"request has errored!\", { response });\n          responsePromise.reject(createNetworkError(response));\n        },\n        onError: (error2) => {\n          this.logger.info(\"request has been aborted!\", { error: error2 });\n          responsePromise.reject(error2);\n        }\n      });\n      if (isRequestHandled) {\n        this.logger.info(\"request has been handled, returning mock promise...\");\n        return responsePromise;\n      }\n      this.logger.info(\n        \"no mocked response received, performing request as-is...\"\n      );\n      const requestCloneForResponseEvent = request.clone();\n      return pureFetch(request).then(async (response) => {\n        this.logger.info(\"original fetch performed\", response);\n        if (this.emitter.listenerCount(\"response\") > 0) {\n          this.logger.info('emitting the \"response\" event...');\n          const responseClone = response.clone();\n          await emitAsync(this.emitter, \"response\", {\n            response: responseClone,\n            isMockedResponse: false,\n            request: requestCloneForResponseEvent,\n            requestId\n          });\n        }\n        return response;\n      });\n    };\n    Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true\n    });\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.fetch, IS_PATCHED_MODULE, {\n        value: void 0\n      });\n      globalThis.fetch = pureFetch;\n      this.logger.info(\n        'restored native \"globalThis.fetch\"!',\n        globalThis.fetch.name\n      );\n    });\n  }\n};\nvar FetchInterceptor = _FetchInterceptor;\nFetchInterceptor.symbol = Symbol(\"fetch\");\n\n// node_modules/.pnpm/@mswjs+interceptors@0.39.1/node_modules/@mswjs/interceptors/lib/browser/chunk-QKSBFQDK.mjs\nfunction concatArrayBuffer(left, right) {\n  const result = new Uint8Array(left.byteLength + right.byteLength);\n  result.set(left, 0);\n  result.set(right, left.byteLength);\n  return result;\n}\nvar EventPolyfill = class {\n  constructor(type, options) {\n    this.NONE = 0;\n    this.CAPTURING_PHASE = 1;\n    this.AT_TARGET = 2;\n    this.BUBBLING_PHASE = 3;\n    this.type = \"\";\n    this.srcElement = null;\n    this.currentTarget = null;\n    this.eventPhase = 0;\n    this.isTrusted = true;\n    this.composed = false;\n    this.cancelable = true;\n    this.defaultPrevented = false;\n    this.bubbles = true;\n    this.lengthComputable = true;\n    this.loaded = 0;\n    this.total = 0;\n    this.cancelBubble = false;\n    this.returnValue = true;\n    this.type = type;\n    this.target = (options == null ? void 0 : options.target) || null;\n    this.currentTarget = (options == null ? void 0 : options.currentTarget) || null;\n    this.timeStamp = Date.now();\n  }\n  composedPath() {\n    return [];\n  }\n  initEvent(type, bubbles, cancelable) {\n    this.type = type;\n    this.bubbles = !!bubbles;\n    this.cancelable = !!cancelable;\n  }\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n  stopPropagation() {\n  }\n  stopImmediatePropagation() {\n  }\n};\nvar ProgressEventPolyfill = class extends EventPolyfill {\n  constructor(type, init) {\n    super(type);\n    this.lengthComputable = (init == null ? void 0 : init.lengthComputable) || false;\n    this.composed = (init == null ? void 0 : init.composed) || false;\n    this.loaded = (init == null ? void 0 : init.loaded) || 0;\n    this.total = (init == null ? void 0 : init.total) || 0;\n  }\n};\nvar SUPPORTS_PROGRESS_EVENT = typeof ProgressEvent !== \"undefined\";\nfunction createEvent(target, type, init) {\n  const progressEvents = [\n    \"error\",\n    \"progress\",\n    \"loadstart\",\n    \"loadend\",\n    \"load\",\n    \"timeout\",\n    \"abort\"\n  ];\n  const ProgressEventClass = SUPPORTS_PROGRESS_EVENT ? ProgressEvent : ProgressEventPolyfill;\n  const event = progressEvents.includes(type) ? new ProgressEventClass(type, {\n    lengthComputable: true,\n    loaded: (init == null ? void 0 : init.loaded) || 0,\n    total: (init == null ? void 0 : init.total) || 0\n  }) : new EventPolyfill(type, {\n    target,\n    currentTarget: target\n  });\n  return event;\n}\nfunction findPropertySource(target, propertyName) {\n  if (!(propertyName in target)) {\n    return null;\n  }\n  const hasProperty = Object.prototype.hasOwnProperty.call(target, propertyName);\n  if (hasProperty) {\n    return target;\n  }\n  const prototype = Reflect.getPrototypeOf(target);\n  return prototype ? findPropertySource(prototype, propertyName) : null;\n}\nfunction createProxy(target, options) {\n  const proxy = new Proxy(target, optionsToProxyHandler(options));\n  return proxy;\n}\nfunction optionsToProxyHandler(options) {\n  const { constructorCall, methodCall, getProperty, setProperty } = options;\n  const handler = {};\n  if (typeof constructorCall !== \"undefined\") {\n    handler.construct = function(target, args, newTarget) {\n      const next = Reflect.construct.bind(null, target, args, newTarget);\n      return constructorCall.call(newTarget, args, next);\n    };\n  }\n  handler.set = function(target, propertyName, nextValue) {\n    const next = () => {\n      const propertySource = findPropertySource(target, propertyName) || target;\n      const ownDescriptors = Reflect.getOwnPropertyDescriptor(\n        propertySource,\n        propertyName\n      );\n      if (typeof (ownDescriptors == null ? void 0 : ownDescriptors.set) !== \"undefined\") {\n        ownDescriptors.set.apply(target, [nextValue]);\n        return true;\n      }\n      return Reflect.defineProperty(propertySource, propertyName, {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: nextValue\n      });\n    };\n    if (typeof setProperty !== \"undefined\") {\n      return setProperty.call(target, [propertyName, nextValue], next);\n    }\n    return next();\n  };\n  handler.get = function(target, propertyName, receiver) {\n    const next = () => target[propertyName];\n    const value = typeof getProperty !== \"undefined\" ? getProperty.call(target, [propertyName, receiver], next) : next();\n    if (typeof value === \"function\") {\n      return (...args) => {\n        const next2 = value.bind(target, ...args);\n        if (typeof methodCall !== \"undefined\") {\n          return methodCall.call(target, [propertyName, args], next2);\n        }\n        return next2();\n      };\n    }\n    return value;\n  };\n  return handler;\n}\nfunction isDomParserSupportedType(type) {\n  const supportedTypes = [\n    \"application/xhtml+xml\",\n    \"application/xml\",\n    \"image/svg+xml\",\n    \"text/html\",\n    \"text/xml\"\n  ];\n  return supportedTypes.some((supportedType) => {\n    return type.startsWith(supportedType);\n  });\n}\nfunction parseJson(data) {\n  try {\n    const json = JSON.parse(data);\n    return json;\n  } catch (_) {\n    return null;\n  }\n}\nfunction createResponse(request, body) {\n  const responseBodyOrNull = FetchResponse.isResponseWithBody(request.status) ? body : null;\n  return new FetchResponse(responseBodyOrNull, {\n    url: request.responseURL,\n    status: request.status,\n    statusText: request.statusText,\n    headers: createHeadersFromXMLHttpReqestHeaders(\n      request.getAllResponseHeaders()\n    )\n  });\n}\nfunction createHeadersFromXMLHttpReqestHeaders(headersString) {\n  const headers = new Headers();\n  const lines = headersString.split(/[\\r\\n]+/);\n  for (const line of lines) {\n    if (line.trim() === \"\") {\n      continue;\n    }\n    const [name, ...parts] = line.split(\": \");\n    const value = parts.join(\": \");\n    headers.append(name, value);\n  }\n  return headers;\n}\nasync function getBodyByteLength(input) {\n  const explicitContentLength = input.headers.get(\"content-length\");\n  if (explicitContentLength != null && explicitContentLength !== \"\") {\n    return Number(explicitContentLength);\n  }\n  const buffer = await input.arrayBuffer();\n  return buffer.byteLength;\n}\nvar kIsRequestHandled = Symbol(\"kIsRequestHandled\");\nvar IS_NODE2 = isNodeProcess();\nvar kFetchRequest = Symbol(\"kFetchRequest\");\nvar XMLHttpRequestController = class {\n  constructor(initialRequest, logger) {\n    this.initialRequest = initialRequest;\n    this.logger = logger;\n    this.method = \"GET\";\n    this.url = null;\n    this[kIsRequestHandled] = false;\n    this.events = /* @__PURE__ */ new Map();\n    this.uploadEvents = /* @__PURE__ */ new Map();\n    this.requestId = createRequestId();\n    this.requestHeaders = new Headers();\n    this.responseBuffer = new Uint8Array();\n    this.request = createProxy(initialRequest, {\n      setProperty: ([propertyName, nextValue], invoke) => {\n        switch (propertyName) {\n          case \"ontimeout\": {\n            const eventName = propertyName.slice(\n              2\n            );\n            this.request.addEventListener(eventName, nextValue);\n            return invoke();\n          }\n          default: {\n            return invoke();\n          }\n        }\n      },\n      methodCall: ([methodName, args], invoke) => {\n        var _a;\n        switch (methodName) {\n          case \"open\": {\n            const [method, url] = args;\n            if (typeof url === \"undefined\") {\n              this.method = \"GET\";\n              this.url = toAbsoluteUrl(method);\n            } else {\n              this.method = method;\n              this.url = toAbsoluteUrl(url);\n            }\n            this.logger = this.logger.extend(`${this.method} ${this.url.href}`);\n            this.logger.info(\"open\", this.method, this.url.href);\n            return invoke();\n          }\n          case \"addEventListener\": {\n            const [eventName, listener] = args;\n            this.registerEvent(eventName, listener);\n            this.logger.info(\"addEventListener\", eventName, listener);\n            return invoke();\n          }\n          case \"setRequestHeader\": {\n            const [name, value] = args;\n            this.requestHeaders.set(name, value);\n            this.logger.info(\"setRequestHeader\", name, value);\n            return invoke();\n          }\n          case \"send\": {\n            const [body] = args;\n            this.request.addEventListener(\"load\", () => {\n              if (typeof this.onResponse !== \"undefined\") {\n                const fetchResponse = createResponse(\n                  this.request,\n                  /**\n                   * The `response` property is the right way to read\n                   * the ambiguous response body, as the request's \"responseType\" may differ.\n                   * @see https://xhr.spec.whatwg.org/#the-response-attribute\n                   */\n                  this.request.response\n                );\n                this.onResponse.call(this, {\n                  response: fetchResponse,\n                  isMockedResponse: this[kIsRequestHandled],\n                  request: fetchRequest,\n                  requestId: this.requestId\n                });\n              }\n            });\n            const requestBody = typeof body === \"string\" ? encodeBuffer(body) : body;\n            const fetchRequest = this.toFetchApiRequest(requestBody);\n            this[kFetchRequest] = fetchRequest.clone();\n            const onceRequestSettled = ((_a = this.onRequest) == null ? void 0 : _a.call(this, {\n              request: fetchRequest,\n              requestId: this.requestId\n            })) || Promise.resolve();\n            onceRequestSettled.finally(() => {\n              if (!this[kIsRequestHandled]) {\n                this.logger.info(\n                  \"request callback settled but request has not been handled (readystate %d), performing as-is...\",\n                  this.request.readyState\n                );\n                if (IS_NODE2) {\n                  this.request.setRequestHeader(\n                    INTERNAL_REQUEST_ID_HEADER_NAME,\n                    this.requestId\n                  );\n                }\n                return invoke();\n              }\n            });\n            break;\n          }\n          default: {\n            return invoke();\n          }\n        }\n      }\n    });\n    define(\n      this.request,\n      \"upload\",\n      createProxy(this.request.upload, {\n        setProperty: ([propertyName, nextValue], invoke) => {\n          switch (propertyName) {\n            case \"onloadstart\":\n            case \"onprogress\":\n            case \"onaboart\":\n            case \"onerror\":\n            case \"onload\":\n            case \"ontimeout\":\n            case \"onloadend\": {\n              const eventName = propertyName.slice(\n                2\n              );\n              this.registerUploadEvent(eventName, nextValue);\n            }\n          }\n          return invoke();\n        },\n        methodCall: ([methodName, args], invoke) => {\n          switch (methodName) {\n            case \"addEventListener\": {\n              const [eventName, listener] = args;\n              this.registerUploadEvent(eventName, listener);\n              this.logger.info(\"upload.addEventListener\", eventName, listener);\n              return invoke();\n            }\n          }\n        }\n      })\n    );\n  }\n  registerEvent(eventName, listener) {\n    const prevEvents = this.events.get(eventName) || [];\n    const nextEvents = prevEvents.concat(listener);\n    this.events.set(eventName, nextEvents);\n    this.logger.info('registered event \"%s\"', eventName, listener);\n  }\n  registerUploadEvent(eventName, listener) {\n    const prevEvents = this.uploadEvents.get(eventName) || [];\n    const nextEvents = prevEvents.concat(listener);\n    this.uploadEvents.set(eventName, nextEvents);\n    this.logger.info('registered upload event \"%s\"', eventName, listener);\n  }\n  /**\n   * Responds to the current request with the given\n   * Fetch API `Response` instance.\n   */\n  async respondWith(response) {\n    this[kIsRequestHandled] = true;\n    if (this[kFetchRequest]) {\n      const totalRequestBodyLength = await getBodyByteLength(\n        this[kFetchRequest]\n      );\n      this.trigger(\"loadstart\", this.request.upload, {\n        loaded: 0,\n        total: totalRequestBodyLength\n      });\n      this.trigger(\"progress\", this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength\n      });\n      this.trigger(\"load\", this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength\n      });\n      this.trigger(\"loadend\", this.request.upload, {\n        loaded: totalRequestBodyLength,\n        total: totalRequestBodyLength\n      });\n    }\n    this.logger.info(\n      \"responding with a mocked response: %d %s\",\n      response.status,\n      response.statusText\n    );\n    define(this.request, \"status\", response.status);\n    define(this.request, \"statusText\", response.statusText);\n    define(this.request, \"responseURL\", this.url.href);\n    this.request.getResponseHeader = new Proxy(this.request.getResponseHeader, {\n      apply: (_, __, args) => {\n        this.logger.info(\"getResponseHeader\", args[0]);\n        if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n          this.logger.info(\"headers not received yet, returning null\");\n          return null;\n        }\n        const headerValue = response.headers.get(args[0]);\n        this.logger.info(\n          'resolved response header \"%s\" to',\n          args[0],\n          headerValue\n        );\n        return headerValue;\n      }\n    });\n    this.request.getAllResponseHeaders = new Proxy(\n      this.request.getAllResponseHeaders,\n      {\n        apply: () => {\n          this.logger.info(\"getAllResponseHeaders\");\n          if (this.request.readyState < this.request.HEADERS_RECEIVED) {\n            this.logger.info(\"headers not received yet, returning empty string\");\n            return \"\";\n          }\n          const headersList = Array.from(response.headers.entries());\n          const allHeaders = headersList.map(([headerName, headerValue]) => {\n            return `${headerName}: ${headerValue}`;\n          }).join(\"\\r\\n\");\n          this.logger.info(\"resolved all response headers to\", allHeaders);\n          return allHeaders;\n        }\n      }\n    );\n    Object.defineProperties(this.request, {\n      response: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.response\n      },\n      responseText: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseText\n      },\n      responseXML: {\n        enumerable: true,\n        configurable: false,\n        get: () => this.responseXML\n      }\n    });\n    const totalResponseBodyLength = await getBodyByteLength(response.clone());\n    this.logger.info(\"calculated response body length\", totalResponseBodyLength);\n    this.trigger(\"loadstart\", this.request, {\n      loaded: 0,\n      total: totalResponseBodyLength\n    });\n    this.setReadyState(this.request.HEADERS_RECEIVED);\n    this.setReadyState(this.request.LOADING);\n    const finalizeResponse = () => {\n      this.logger.info(\"finalizing the mocked response...\");\n      this.setReadyState(this.request.DONE);\n      this.trigger(\"load\", this.request, {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength\n      });\n      this.trigger(\"loadend\", this.request, {\n        loaded: this.responseBuffer.byteLength,\n        total: totalResponseBodyLength\n      });\n    };\n    if (response.body) {\n      this.logger.info(\"mocked response has body, streaming...\");\n      const reader = response.body.getReader();\n      const readNextResponseBodyChunk = async () => {\n        const { value, done } = await reader.read();\n        if (done) {\n          this.logger.info(\"response body stream done!\");\n          finalizeResponse();\n          return;\n        }\n        if (value) {\n          this.logger.info(\"read response body chunk:\", value);\n          this.responseBuffer = concatArrayBuffer(this.responseBuffer, value);\n          this.trigger(\"progress\", this.request, {\n            loaded: this.responseBuffer.byteLength,\n            total: totalResponseBodyLength\n          });\n        }\n        readNextResponseBodyChunk();\n      };\n      readNextResponseBodyChunk();\n    } else {\n      finalizeResponse();\n    }\n  }\n  responseBufferToText() {\n    return decodeBuffer(this.responseBuffer);\n  }\n  get response() {\n    this.logger.info(\n      \"getResponse (responseType: %s)\",\n      this.request.responseType\n    );\n    if (this.request.readyState !== this.request.DONE) {\n      return null;\n    }\n    switch (this.request.responseType) {\n      case \"json\": {\n        const responseJson = parseJson(this.responseBufferToText());\n        this.logger.info(\"resolved response JSON\", responseJson);\n        return responseJson;\n      }\n      case \"arraybuffer\": {\n        const arrayBuffer = toArrayBuffer(this.responseBuffer);\n        this.logger.info(\"resolved response ArrayBuffer\", arrayBuffer);\n        return arrayBuffer;\n      }\n      case \"blob\": {\n        const mimeType = this.request.getResponseHeader(\"Content-Type\") || \"text/plain\";\n        const responseBlob = new Blob([this.responseBufferToText()], {\n          type: mimeType\n        });\n        this.logger.info(\n          \"resolved response Blob (mime type: %s)\",\n          responseBlob,\n          mimeType\n        );\n        return responseBlob;\n      }\n      default: {\n        const responseText = this.responseBufferToText();\n        this.logger.info(\n          'resolving \"%s\" response type as text',\n          this.request.responseType,\n          responseText\n        );\n        return responseText;\n      }\n    }\n  }\n  get responseText() {\n    invariant(\n      this.request.responseType === \"\" || this.request.responseType === \"text\",\n      \"InvalidStateError: The object is in invalid state.\"\n    );\n    if (this.request.readyState !== this.request.LOADING && this.request.readyState !== this.request.DONE) {\n      return \"\";\n    }\n    const responseText = this.responseBufferToText();\n    this.logger.info('getResponseText: \"%s\"', responseText);\n    return responseText;\n  }\n  get responseXML() {\n    invariant(\n      this.request.responseType === \"\" || this.request.responseType === \"document\",\n      \"InvalidStateError: The object is in invalid state.\"\n    );\n    if (this.request.readyState !== this.request.DONE) {\n      return null;\n    }\n    const contentType = this.request.getResponseHeader(\"Content-Type\") || \"\";\n    if (typeof DOMParser === \"undefined\") {\n      console.warn(\n        \"Cannot retrieve XMLHttpRequest response body as XML: DOMParser is not defined. You are likely using an environment that is not browser or does not polyfill browser globals correctly.\"\n      );\n      return null;\n    }\n    if (isDomParserSupportedType(contentType)) {\n      return new DOMParser().parseFromString(\n        this.responseBufferToText(),\n        contentType\n      );\n    }\n    return null;\n  }\n  errorWith(error2) {\n    this[kIsRequestHandled] = true;\n    this.logger.info(\"responding with an error\");\n    this.setReadyState(this.request.DONE);\n    this.trigger(\"error\", this.request);\n    this.trigger(\"loadend\", this.request);\n  }\n  /**\n   * Transitions this request's `readyState` to the given one.\n   */\n  setReadyState(nextReadyState) {\n    this.logger.info(\n      \"setReadyState: %d -> %d\",\n      this.request.readyState,\n      nextReadyState\n    );\n    if (this.request.readyState === nextReadyState) {\n      this.logger.info(\"ready state identical, skipping transition...\");\n      return;\n    }\n    define(this.request, \"readyState\", nextReadyState);\n    this.logger.info(\"set readyState to: %d\", nextReadyState);\n    if (nextReadyState !== this.request.UNSENT) {\n      this.logger.info('triggerring \"readystatechange\" event...');\n      this.trigger(\"readystatechange\", this.request);\n    }\n  }\n  /**\n   * Triggers given event on the `XMLHttpRequest` instance.\n   */\n  trigger(eventName, target, options) {\n    const callback = target[`on${eventName}`];\n    const event = createEvent(target, eventName, options);\n    this.logger.info('trigger \"%s\"', eventName, options || \"\");\n    if (typeof callback === \"function\") {\n      this.logger.info('found a direct \"%s\" callback, calling...', eventName);\n      callback.call(target, event);\n    }\n    const events = target instanceof XMLHttpRequestUpload ? this.uploadEvents : this.events;\n    for (const [registeredEventName, listeners] of events) {\n      if (registeredEventName === eventName) {\n        this.logger.info(\n          'found %d listener(s) for \"%s\" event, calling...',\n          listeners.length,\n          eventName\n        );\n        listeners.forEach((listener) => listener.call(target, event));\n      }\n    }\n  }\n  /**\n   * Converts this `XMLHttpRequest` instance into a Fetch API `Request` instance.\n   */\n  toFetchApiRequest(body) {\n    this.logger.info(\"converting request to a Fetch API Request...\");\n    const resolvedBody = body instanceof Document ? body.documentElement.innerText : body;\n    const fetchRequest = new Request(this.url.href, {\n      method: this.method,\n      headers: this.requestHeaders,\n      /**\n       * @see https://xhr.spec.whatwg.org/#cross-origin-credentials\n       */\n      credentials: this.request.withCredentials ? \"include\" : \"same-origin\",\n      body: [\"GET\", \"HEAD\"].includes(this.method.toUpperCase()) ? null : resolvedBody\n    });\n    const proxyHeaders = createProxy(fetchRequest.headers, {\n      methodCall: ([methodName, args], invoke) => {\n        switch (methodName) {\n          case \"append\":\n          case \"set\": {\n            const [headerName, headerValue] = args;\n            this.request.setRequestHeader(headerName, headerValue);\n            break;\n          }\n          case \"delete\": {\n            const [headerName] = args;\n            console.warn(\n              `XMLHttpRequest: Cannot remove a \"${headerName}\" header from the Fetch API representation of the \"${fetchRequest.method} ${fetchRequest.url}\" request. XMLHttpRequest headers cannot be removed.`\n            );\n            break;\n          }\n        }\n        return invoke();\n      }\n    });\n    define(fetchRequest, \"headers\", proxyHeaders);\n    setRawRequest(fetchRequest, this.request);\n    this.logger.info(\"converted request to a Fetch API Request!\", fetchRequest);\n    return fetchRequest;\n  }\n};\nfunction toAbsoluteUrl(url) {\n  if (typeof location === \"undefined\") {\n    return new URL(url);\n  }\n  return new URL(url.toString(), location.href);\n}\nfunction define(target, property, value) {\n  Reflect.defineProperty(target, property, {\n    // Ensure writable properties to allow redefining readonly properties.\n    writable: true,\n    enumerable: true,\n    value\n  });\n}\nfunction createXMLHttpRequestProxy({\n  emitter,\n  logger\n}) {\n  const XMLHttpRequestProxy = new Proxy(globalThis.XMLHttpRequest, {\n    construct(target, args, newTarget) {\n      logger.info(\"constructed new XMLHttpRequest\");\n      const originalRequest = Reflect.construct(\n        target,\n        args,\n        newTarget\n      );\n      const prototypeDescriptors = Object.getOwnPropertyDescriptors(\n        target.prototype\n      );\n      for (const propertyName in prototypeDescriptors) {\n        Reflect.defineProperty(\n          originalRequest,\n          propertyName,\n          prototypeDescriptors[propertyName]\n        );\n      }\n      const xhrRequestController = new XMLHttpRequestController(\n        originalRequest,\n        logger\n      );\n      xhrRequestController.onRequest = async function({ request, requestId }) {\n        const controller = new RequestController(request);\n        this.logger.info(\"awaiting mocked response...\");\n        this.logger.info(\n          'emitting the \"request\" event for %s listener(s)...',\n          emitter.listenerCount(\"request\")\n        );\n        const isRequestHandled = await handleRequest2({\n          request,\n          requestId,\n          controller,\n          emitter,\n          onResponse: async (response) => {\n            await this.respondWith(response);\n          },\n          onRequestError: () => {\n            this.errorWith(new TypeError(\"Network error\"));\n          },\n          onError: (error2) => {\n            this.logger.info(\"request errored!\", { error: error2 });\n            if (error2 instanceof Error) {\n              this.errorWith(error2);\n            }\n          }\n        });\n        if (!isRequestHandled) {\n          this.logger.info(\n            \"no mocked response received, performing request as-is...\"\n          );\n        }\n      };\n      xhrRequestController.onResponse = async function({\n        response,\n        isMockedResponse,\n        request,\n        requestId\n      }) {\n        this.logger.info(\n          'emitting the \"response\" event for %s listener(s)...',\n          emitter.listenerCount(\"response\")\n        );\n        emitter.emit(\"response\", {\n          response,\n          isMockedResponse,\n          request,\n          requestId\n        });\n      };\n      return xhrRequestController.request;\n    }\n  });\n  return XMLHttpRequestProxy;\n}\nvar _XMLHttpRequestInterceptor = class extends Interceptor {\n  constructor() {\n    super(_XMLHttpRequestInterceptor.interceptorSymbol);\n  }\n  checkEnvironment() {\n    return hasConfigurableGlobal(\"XMLHttpRequest\");\n  }\n  setup() {\n    const logger = this.logger.extend(\"setup\");\n    logger.info('patching \"XMLHttpRequest\" module...');\n    const PureXMLHttpRequest = globalThis.XMLHttpRequest;\n    invariant(\n      !PureXMLHttpRequest[IS_PATCHED_MODULE],\n      'Failed to patch the \"XMLHttpRequest\" module: already patched.'\n    );\n    globalThis.XMLHttpRequest = createXMLHttpRequestProxy({\n      emitter: this.emitter,\n      logger: this.logger\n    });\n    logger.info(\n      'native \"XMLHttpRequest\" module patched!',\n      globalThis.XMLHttpRequest.name\n    );\n    Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\n      enumerable: true,\n      configurable: true,\n      value: true\n    });\n    this.subscriptions.push(() => {\n      Object.defineProperty(globalThis.XMLHttpRequest, IS_PATCHED_MODULE, {\n        value: void 0\n      });\n      globalThis.XMLHttpRequest = PureXMLHttpRequest;\n      logger.info(\n        'native \"XMLHttpRequest\" module restored!',\n        globalThis.XMLHttpRequest.name\n      );\n    });\n  }\n};\nvar XMLHttpRequestInterceptor = _XMLHttpRequestInterceptor;\nXMLHttpRequestInterceptor.interceptorSymbol = Symbol(\"xhr\");\n\n// src/browser/setupWorker/start/createFallbackRequestListener.ts\n\n\nfunction createFallbackRequestListener(context, options) {\n  const interceptor = new BatchInterceptor({\n    name: \"fallback\",\n    interceptors: [new FetchInterceptor(), new XMLHttpRequestInterceptor()]\n  });\n  interceptor.on(\"request\", async ({ request, requestId, controller }) => {\n    const requestCloneForLogs = request.clone();\n    const response = await (0,_core_utils_handleRequest_mjs__WEBPACK_IMPORTED_MODULE_2__.handleRequest)(\n      request,\n      requestId,\n      context.getRequestHandlers().filter((0,_core_utils_internal_isHandlerKind_mjs__WEBPACK_IMPORTED_MODULE_3__.isHandlerKind)(\"RequestHandler\")),\n      options,\n      context.emitter,\n      {\n        onMockedResponse(_, { handler, parsedResult }) {\n          if (!options.quiet) {\n            context.emitter.once(\"response:mocked\", ({ response: response2 }) => {\n              handler.log({\n                request: requestCloneForLogs,\n                response: response2,\n                parsedResult\n              });\n            });\n          }\n        }\n      }\n    );\n    if (response) {\n      controller.respondWith(response);\n    }\n  });\n  interceptor.on(\n    \"response\",\n    ({ response, isMockedResponse, request, requestId }) => {\n      context.emitter.emit(\n        isMockedResponse ? \"response:mocked\" : \"response:bypass\",\n        {\n          response,\n          request,\n          requestId\n        }\n      );\n    }\n  );\n  interceptor.apply();\n  return interceptor;\n}\n\n// src/browser/setupWorker/start/createFallbackStart.ts\nfunction createFallbackStart(context) {\n  return async function start(options) {\n    context.fallbackInterceptor = createFallbackRequestListener(\n      context,\n      options\n    );\n    printStartMessage({\n      message: \"Mocking enabled (fallback mode).\",\n      quiet: options.quiet\n    });\n    return void 0;\n  };\n}\n\n// src/browser/setupWorker/stop/createFallbackStop.ts\nfunction createFallbackStop(context) {\n  return function stop() {\n    context.fallbackInterceptor?.dispose();\n    printStopMessage({ quiet: context.startOptions?.quiet });\n  };\n}\n\n// src/browser/setupWorker/setupWorker.ts\n\n\n\n\n// src/browser/utils/supportsReadableStreamTransfer.ts\nfunction supportsReadableStreamTransfer() {\n  try {\n    const stream = new ReadableStream({\n      start: (controller) => controller.close()\n    });\n    const message = new MessageChannel();\n    message.port1.postMessage(stream, [stream]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// src/browser/setupWorker/setupWorker.ts\n\n\n\nvar SetupWorkerApi = class extends _core_SetupApi_mjs__WEBPACK_IMPORTED_MODULE_5__.SetupApi {\n  context;\n  startHandler = null;\n  stopHandler = null;\n  listeners;\n  constructor(...handlers) {\n    super(...handlers);\n    invariant(\n      !isNodeProcess(),\n      _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.formatMessage(\n        \"Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead.\"\n      )\n    );\n    this.listeners = [];\n    this.context = this.createWorkerContext();\n  }\n  createWorkerContext() {\n    const context = {\n      // Mocking is not considered enabled until the worker\n      // signals back the successful activation event.\n      isMockingEnabled: false,\n      startOptions: null,\n      worker: null,\n      getRequestHandlers: () => {\n        return this.handlersController.currentHandlers();\n      },\n      registration: null,\n      emitter: this.emitter,\n      workerChannel: {\n        on: (eventType, callback) => {\n          this.context.events.addListener(navigator.serviceWorker, \"message\", (event) => {\n            if (event.source !== this.context.worker) {\n              return;\n            }\n            const message = event.data;\n            if (!message) {\n              return;\n            }\n            if (message.type === eventType) {\n              callback(event, message);\n            }\n          });\n        },\n        send: (type) => {\n          this.context.worker?.postMessage(type);\n        }\n      },\n      events: {\n        addListener: (target, eventType, callback) => {\n          target.addEventListener(eventType, callback);\n          this.listeners.push({\n            eventType,\n            target,\n            callback\n          });\n          return () => {\n            target.removeEventListener(eventType, callback);\n          };\n        },\n        removeAllListeners: () => {\n          for (const { target, eventType, callback } of this.listeners) {\n            target.removeEventListener(eventType, callback);\n          }\n          this.listeners = [];\n        },\n        once: (eventType) => {\n          const bindings = [];\n          return new Promise((resolve, reject) => {\n            const handleIncomingMessage = (event) => {\n              try {\n                const message = event.data;\n                if (message.type === eventType) {\n                  resolve(message);\n                }\n              } catch (error2) {\n                reject(error2);\n              }\n            };\n            bindings.push(\n              this.context.events.addListener(\n                navigator.serviceWorker,\n                \"message\",\n                handleIncomingMessage\n              ),\n              this.context.events.addListener(\n                navigator.serviceWorker,\n                \"messageerror\",\n                reject\n              )\n            );\n          }).finally(() => {\n            bindings.forEach((unbind) => unbind());\n          });\n        }\n      },\n      supports: {\n        serviceWorkerApi: !(\"serviceWorker\" in navigator) || location.protocol === \"file:\",\n        readableStreamTransfer: supportsReadableStreamTransfer()\n      }\n    };\n    this.startHandler = context.supports.serviceWorkerApi ? createFallbackStart(context) : createStartHandler(context);\n    this.stopHandler = context.supports.serviceWorkerApi ? createFallbackStop(context) : createStop(context);\n    return context;\n  }\n  async start(options = {}) {\n    if (options.waitUntilReady === true) {\n      _core_utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.devUtils.warn(\n        'The \"waitUntilReady\" option has been deprecated. Please remove it from this \"worker.start()\" call. Follow the recommended Browser integration (https://mswjs.io/docs/integrations/browser) to eliminate any race conditions between the Service Worker registration and any requests made by your application on initial render.'\n      );\n    }\n    this.context.startOptions = (0,_core_utils_internal_mergeRight_mjs__WEBPACK_IMPORTED_MODULE_6__.mergeRight)(\n      DEFAULT_START_OPTIONS,\n      options\n    );\n    (0,_core_ws_handleWebSocketEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.handleWebSocketEvent)({\n      getUnhandledRequestStrategy: () => {\n        return this.context.startOptions.onUnhandledRequest;\n      },\n      getHandlers: () => {\n        return this.handlersController.currentHandlers();\n      },\n      onMockedConnection: (connection) => {\n        if (!this.context.startOptions.quiet) {\n          (0,_core_ws_utils_attachWebSocketLogger_mjs__WEBPACK_IMPORTED_MODULE_8__.attachWebSocketLogger)(connection);\n        }\n      },\n      onPassthroughConnection() {\n      }\n    });\n    _core_ws_webSocketInterceptor_mjs__WEBPACK_IMPORTED_MODULE_9__.webSocketInterceptor.apply();\n    this.subscriptions.push(() => {\n      _core_ws_webSocketInterceptor_mjs__WEBPACK_IMPORTED_MODULE_9__.webSocketInterceptor.dispose();\n    });\n    return await this.startHandler(this.context.startOptions, options);\n  }\n  stop() {\n    super.dispose();\n    this.context.events.removeAllListeners();\n    this.context.emitter.removeAllListeners();\n    this.stopHandler();\n  }\n};\nfunction setupWorker(...handlers) {\n  return new SetupWorkerApi(...handlers);\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/browser/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/HttpResponse.mjs":
/*!****************************************************!*\
  !*** ./node_modules/msw/lib/core/HttpResponse.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpResponse: () => (/* binding */ HttpResponse),\n/* harmony export */   bodyType: () => (/* binding */ bodyType)\n/* harmony export */ });\n/* harmony import */ var _mswjs_interceptors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mswjs/interceptors */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/index.mjs\");\n/* harmony import */ var _utils_HttpResponse_decorators_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/HttpResponse/decorators.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/HttpResponse/decorators.mjs\");\n\n\nconst bodyType = Symbol(\"bodyType\");\nclass HttpResponse extends _mswjs_interceptors__WEBPACK_IMPORTED_MODULE_0__.FetchResponse {\n  [bodyType] = null;\n  constructor(body, init) {\n    const responseInit = (0,_utils_HttpResponse_decorators_mjs__WEBPACK_IMPORTED_MODULE_1__.normalizeResponseInit)(init);\n    super(body, responseInit);\n    (0,_utils_HttpResponse_decorators_mjs__WEBPACK_IMPORTED_MODULE_1__.decorateResponse)(this, responseInit);\n  }\n  static error() {\n    return super.error();\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"text/plain\"` body.\n   * @example\n   * HttpResponse.text('hello world')\n   * HttpResponse.text('Error', { status: 500 })\n   */\n  static text(body, init) {\n    const responseInit = (0,_utils_HttpResponse_decorators_mjs__WEBPACK_IMPORTED_MODULE_1__.normalizeResponseInit)(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"text/plain\");\n    }\n    if (!responseInit.headers.has(\"Content-Length\")) {\n      responseInit.headers.set(\n        \"Content-Length\",\n        body ? new Blob([body]).size.toString() : \"0\"\n      );\n    }\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"application/json\"` body.\n   * @example\n   * HttpResponse.json({ firstName: 'John' })\n   * HttpResponse.json({ error: 'Not Authorized' }, { status: 401 })\n   */\n  static json(body, init) {\n    const responseInit = (0,_utils_HttpResponse_decorators_mjs__WEBPACK_IMPORTED_MODULE_1__.normalizeResponseInit)(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"application/json\");\n    }\n    const responseText = JSON.stringify(body);\n    if (!responseInit.headers.has(\"Content-Length\")) {\n      responseInit.headers.set(\n        \"Content-Length\",\n        responseText ? new Blob([responseText]).size.toString() : \"0\"\n      );\n    }\n    return new HttpResponse(responseText, responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"application/xml\"` body.\n   * @example\n   * HttpResponse.xml(`<user name=\"John\" />`)\n   * HttpResponse.xml(`<article id=\"abc-123\" />`, { status: 201 })\n   */\n  static xml(body, init) {\n    const responseInit = (0,_utils_HttpResponse_decorators_mjs__WEBPACK_IMPORTED_MODULE_1__.normalizeResponseInit)(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"text/xml\");\n    }\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"text/html\"` body.\n   * @example\n   * HttpResponse.html(`<p class=\"author\">Jane Doe</p>`)\n   * HttpResponse.html(`<main id=\"abc-123\">Main text</main>`, { status: 201 })\n   */\n  static html(body, init) {\n    const responseInit = (0,_utils_HttpResponse_decorators_mjs__WEBPACK_IMPORTED_MODULE_1__.normalizeResponseInit)(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"text/html\");\n    }\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with an `ArrayBuffer` body.\n   * @example\n   * const buffer = new ArrayBuffer(3)\n   * const view = new Uint8Array(buffer)\n   * view.set([1, 2, 3])\n   *\n   * HttpResponse.arrayBuffer(buffer)\n   */\n  static arrayBuffer(body, init) {\n    const responseInit = (0,_utils_HttpResponse_decorators_mjs__WEBPACK_IMPORTED_MODULE_1__.normalizeResponseInit)(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"application/octet-stream\");\n    }\n    if (body && !responseInit.headers.has(\"Content-Length\")) {\n      responseInit.headers.set(\"Content-Length\", body.byteLength.toString());\n    }\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with a `FormData` body.\n   * @example\n   * const data = new FormData()\n   * data.set('name', 'Alice')\n   *\n   * HttpResponse.formData(data)\n   */\n  static formData(body, init) {\n    return new HttpResponse(body, (0,_utils_HttpResponse_decorators_mjs__WEBPACK_IMPORTED_MODULE_1__.normalizeResponseInit)(init));\n  }\n}\n\n//# sourceMappingURL=HttpResponse.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL0h0dHBSZXNwb25zZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRDtBQUlQO0FBQzdDO0FBQ0EsMkJBQTJCLDhEQUFhO0FBQ3hDO0FBQ0E7QUFDQSx5QkFBeUIseUZBQXFCO0FBQzlDO0FBQ0EsSUFBSSxvRkFBZ0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxhQUFhO0FBQy9DO0FBQ0E7QUFDQSx5QkFBeUIseUZBQXFCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsbUJBQW1CO0FBQzVDLHlCQUF5Qix5QkFBeUIsSUFBSSxhQUFhO0FBQ25FO0FBQ0E7QUFDQSx5QkFBeUIseUZBQXFCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGFBQWE7QUFDakU7QUFDQTtBQUNBLHlCQUF5Qix5RkFBcUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGFBQWE7QUFDN0U7QUFDQTtBQUNBLHlCQUF5Qix5RkFBcUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHlGQUFxQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHlGQUFxQjtBQUN2RDtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa29sYXMvbmlrL2lxdXAvbm9kZV9tb2R1bGVzL21zdy9saWIvY29yZS9IdHRwUmVzcG9uc2UubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZldGNoUmVzcG9uc2UgfSBmcm9tIFwiQG1zd2pzL2ludGVyY2VwdG9yc1wiO1xuaW1wb3J0IHtcbiAgZGVjb3JhdGVSZXNwb25zZSxcbiAgbm9ybWFsaXplUmVzcG9uc2VJbml0XG59IGZyb20gJy4vdXRpbHMvSHR0cFJlc3BvbnNlL2RlY29yYXRvcnMubWpzJztcbmNvbnN0IGJvZHlUeXBlID0gU3ltYm9sKFwiYm9keVR5cGVcIik7XG5jbGFzcyBIdHRwUmVzcG9uc2UgZXh0ZW5kcyBGZXRjaFJlc3BvbnNlIHtcbiAgW2JvZHlUeXBlXSA9IG51bGw7XG4gIGNvbnN0cnVjdG9yKGJvZHksIGluaXQpIHtcbiAgICBjb25zdCByZXNwb25zZUluaXQgPSBub3JtYWxpemVSZXNwb25zZUluaXQoaW5pdCk7XG4gICAgc3VwZXIoYm9keSwgcmVzcG9uc2VJbml0KTtcbiAgICBkZWNvcmF0ZVJlc3BvbnNlKHRoaXMsIHJlc3BvbnNlSW5pdCk7XG4gIH1cbiAgc3RhdGljIGVycm9yKCkge1xuICAgIHJldHVybiBzdXBlci5lcnJvcigpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBgUmVzcG9uc2VgIHdpdGggYSBgQ29udGVudC1UeXBlOiBcInRleHQvcGxhaW5cImAgYm9keS5cbiAgICogQGV4YW1wbGVcbiAgICogSHR0cFJlc3BvbnNlLnRleHQoJ2hlbGxvIHdvcmxkJylcbiAgICogSHR0cFJlc3BvbnNlLnRleHQoJ0Vycm9yJywgeyBzdGF0dXM6IDUwMCB9KVxuICAgKi9cbiAgc3RhdGljIHRleHQoYm9keSwgaW5pdCkge1xuICAgIGNvbnN0IHJlc3BvbnNlSW5pdCA9IG5vcm1hbGl6ZVJlc3BvbnNlSW5pdChpbml0KTtcbiAgICBpZiAoIXJlc3BvbnNlSW5pdC5oZWFkZXJzLmhhcyhcIkNvbnRlbnQtVHlwZVwiKSkge1xuICAgICAgcmVzcG9uc2VJbml0LmhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIFwidGV4dC9wbGFpblwiKTtcbiAgICB9XG4gICAgaWYgKCFyZXNwb25zZUluaXQuaGVhZGVycy5oYXMoXCJDb250ZW50LUxlbmd0aFwiKSkge1xuICAgICAgcmVzcG9uc2VJbml0LmhlYWRlcnMuc2V0KFxuICAgICAgICBcIkNvbnRlbnQtTGVuZ3RoXCIsXG4gICAgICAgIGJvZHkgPyBuZXcgQmxvYihbYm9keV0pLnNpemUudG9TdHJpbmcoKSA6IFwiMFwiXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEh0dHBSZXNwb25zZShib2R5LCByZXNwb25zZUluaXQpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBgUmVzcG9uc2VgIHdpdGggYSBgQ29udGVudC1UeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cImAgYm9keS5cbiAgICogQGV4YW1wbGVcbiAgICogSHR0cFJlc3BvbnNlLmpzb24oeyBmaXJzdE5hbWU6ICdKb2huJyB9KVxuICAgKiBIdHRwUmVzcG9uc2UuanNvbih7IGVycm9yOiAnTm90IEF1dGhvcml6ZWQnIH0sIHsgc3RhdHVzOiA0MDEgfSlcbiAgICovXG4gIHN0YXRpYyBqc29uKGJvZHksIGluaXQpIHtcbiAgICBjb25zdCByZXNwb25zZUluaXQgPSBub3JtYWxpemVSZXNwb25zZUluaXQoaW5pdCk7XG4gICAgaWYgKCFyZXNwb25zZUluaXQuaGVhZGVycy5oYXMoXCJDb250ZW50LVR5cGVcIikpIHtcbiAgICAgIHJlc3BvbnNlSW5pdC5oZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xuICAgIGlmICghcmVzcG9uc2VJbml0LmhlYWRlcnMuaGFzKFwiQ29udGVudC1MZW5ndGhcIikpIHtcbiAgICAgIHJlc3BvbnNlSW5pdC5oZWFkZXJzLnNldChcbiAgICAgICAgXCJDb250ZW50LUxlbmd0aFwiLFxuICAgICAgICByZXNwb25zZVRleHQgPyBuZXcgQmxvYihbcmVzcG9uc2VUZXh0XSkuc2l6ZS50b1N0cmluZygpIDogXCIwXCJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSHR0cFJlc3BvbnNlKHJlc3BvbnNlVGV4dCwgcmVzcG9uc2VJbml0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgYFJlc3BvbnNlYCB3aXRoIGEgYENvbnRlbnQtVHlwZTogXCJhcHBsaWNhdGlvbi94bWxcImAgYm9keS5cbiAgICogQGV4YW1wbGVcbiAgICogSHR0cFJlc3BvbnNlLnhtbChgPHVzZXIgbmFtZT1cIkpvaG5cIiAvPmApXG4gICAqIEh0dHBSZXNwb25zZS54bWwoYDxhcnRpY2xlIGlkPVwiYWJjLTEyM1wiIC8+YCwgeyBzdGF0dXM6IDIwMSB9KVxuICAgKi9cbiAgc3RhdGljIHhtbChib2R5LCBpbml0KSB7XG4gICAgY29uc3QgcmVzcG9uc2VJbml0ID0gbm9ybWFsaXplUmVzcG9uc2VJbml0KGluaXQpO1xuICAgIGlmICghcmVzcG9uc2VJbml0LmhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgICByZXNwb25zZUluaXQuaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJ0ZXh0L3htbFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBIdHRwUmVzcG9uc2UoYm9keSwgcmVzcG9uc2VJbml0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgYFJlc3BvbnNlYCB3aXRoIGEgYENvbnRlbnQtVHlwZTogXCJ0ZXh0L2h0bWxcImAgYm9keS5cbiAgICogQGV4YW1wbGVcbiAgICogSHR0cFJlc3BvbnNlLmh0bWwoYDxwIGNsYXNzPVwiYXV0aG9yXCI+SmFuZSBEb2U8L3A+YClcbiAgICogSHR0cFJlc3BvbnNlLmh0bWwoYDxtYWluIGlkPVwiYWJjLTEyM1wiPk1haW4gdGV4dDwvbWFpbj5gLCB7IHN0YXR1czogMjAxIH0pXG4gICAqL1xuICBzdGF0aWMgaHRtbChib2R5LCBpbml0KSB7XG4gICAgY29uc3QgcmVzcG9uc2VJbml0ID0gbm9ybWFsaXplUmVzcG9uc2VJbml0KGluaXQpO1xuICAgIGlmICghcmVzcG9uc2VJbml0LmhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgICByZXNwb25zZUluaXQuaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJ0ZXh0L2h0bWxcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSHR0cFJlc3BvbnNlKGJvZHksIHJlc3BvbnNlSW5pdCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGBSZXNwb25zZWAgd2l0aCBhbiBgQXJyYXlCdWZmZXJgIGJvZHkuXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigzKVxuICAgKiBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKVxuICAgKiB2aWV3LnNldChbMSwgMiwgM10pXG4gICAqXG4gICAqIEh0dHBSZXNwb25zZS5hcnJheUJ1ZmZlcihidWZmZXIpXG4gICAqL1xuICBzdGF0aWMgYXJyYXlCdWZmZXIoYm9keSwgaW5pdCkge1xuICAgIGNvbnN0IHJlc3BvbnNlSW5pdCA9IG5vcm1hbGl6ZVJlc3BvbnNlSW5pdChpbml0KTtcbiAgICBpZiAoIXJlc3BvbnNlSW5pdC5oZWFkZXJzLmhhcyhcIkNvbnRlbnQtVHlwZVwiKSkge1xuICAgICAgcmVzcG9uc2VJbml0LmhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIpO1xuICAgIH1cbiAgICBpZiAoYm9keSAmJiAhcmVzcG9uc2VJbml0LmhlYWRlcnMuaGFzKFwiQ29udGVudC1MZW5ndGhcIikpIHtcbiAgICAgIHJlc3BvbnNlSW5pdC5oZWFkZXJzLnNldChcIkNvbnRlbnQtTGVuZ3RoXCIsIGJvZHkuYnl0ZUxlbmd0aC50b1N0cmluZygpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBIdHRwUmVzcG9uc2UoYm9keSwgcmVzcG9uc2VJbml0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgYFJlc3BvbnNlYCB3aXRoIGEgYEZvcm1EYXRhYCBib2R5LlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBkYXRhID0gbmV3IEZvcm1EYXRhKClcbiAgICogZGF0YS5zZXQoJ25hbWUnLCAnQWxpY2UnKVxuICAgKlxuICAgKiBIdHRwUmVzcG9uc2UuZm9ybURhdGEoZGF0YSlcbiAgICovXG4gIHN0YXRpYyBmb3JtRGF0YShib2R5LCBpbml0KSB7XG4gICAgcmV0dXJuIG5ldyBIdHRwUmVzcG9uc2UoYm9keSwgbm9ybWFsaXplUmVzcG9uc2VJbml0KGluaXQpKTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgSHR0cFJlc3BvbnNlLFxuICBib2R5VHlwZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUh0dHBSZXNwb25zZS5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/HttpResponse.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/SetupApi.mjs":
/*!************************************************!*\
  !*** ./node_modules/msw/lib/core/SetupApi.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HandlersController: () => (/* binding */ HandlersController),\n/* harmony export */   InMemoryHandlersController: () => (/* binding */ InMemoryHandlersController),\n/* harmony export */   SetupApi: () => (/* binding */ SetupApi)\n/* harmony export */ });\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var strict_event_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! strict-event-emitter */ \"(ssr)/./node_modules/strict-event-emitter/lib/index.mjs\");\n/* harmony import */ var _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/internal/devUtils.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/devUtils.mjs\");\n/* harmony import */ var _utils_internal_pipeEvents_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/internal/pipeEvents.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/pipeEvents.mjs\");\n/* harmony import */ var _utils_internal_toReadonlyArray_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/internal/toReadonlyArray.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/toReadonlyArray.mjs\");\n/* harmony import */ var _utils_internal_Disposable_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/internal/Disposable.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/Disposable.mjs\");\n\n\n\n\n\n\nclass HandlersController {\n}\nclass InMemoryHandlersController {\n  constructor(initialHandlers) {\n    this.initialHandlers = initialHandlers;\n    this.handlers = [...initialHandlers];\n  }\n  handlers;\n  prepend(runtimeHandles) {\n    this.handlers.unshift(...runtimeHandles);\n  }\n  reset(nextHandlers) {\n    this.handlers = nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers];\n  }\n  currentHandlers() {\n    return this.handlers;\n  }\n}\nclass SetupApi extends _utils_internal_Disposable_mjs__WEBPACK_IMPORTED_MODULE_2__.Disposable {\n  handlersController;\n  emitter;\n  publicEmitter;\n  events;\n  constructor(...initialHandlers) {\n    super();\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(\n      this.validateHandlers(initialHandlers),\n      _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.devUtils.formatMessage(\n        `Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`\n      )\n    );\n    this.handlersController = new InMemoryHandlersController(initialHandlers);\n    this.emitter = new strict_event_emitter__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n    this.publicEmitter = new strict_event_emitter__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n    (0,_utils_internal_pipeEvents_mjs__WEBPACK_IMPORTED_MODULE_4__.pipeEvents)(this.emitter, this.publicEmitter);\n    this.events = this.createLifeCycleEvents();\n    this.subscriptions.push(() => {\n      this.emitter.removeAllListeners();\n      this.publicEmitter.removeAllListeners();\n    });\n  }\n  validateHandlers(handlers) {\n    return handlers.every((handler) => !Array.isArray(handler));\n  }\n  use(...runtimeHandlers) {\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(\n      this.validateHandlers(runtimeHandlers),\n      _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.devUtils.formatMessage(\n        `Failed to call \"use()\" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`\n      )\n    );\n    this.handlersController.prepend(runtimeHandlers);\n  }\n  restoreHandlers() {\n    this.handlersController.currentHandlers().forEach((handler) => {\n      if (\"isUsed\" in handler) {\n        handler.isUsed = false;\n      }\n    });\n  }\n  resetHandlers(...nextHandlers) {\n    this.handlersController.reset(nextHandlers);\n  }\n  listHandlers() {\n    return (0,_utils_internal_toReadonlyArray_mjs__WEBPACK_IMPORTED_MODULE_5__.toReadonlyArray)(this.handlersController.currentHandlers());\n  }\n  createLifeCycleEvents() {\n    return {\n      on: (...args) => {\n        return this.publicEmitter.on(...args);\n      },\n      removeListener: (...args) => {\n        return this.publicEmitter.removeListener(...args);\n      },\n      removeAllListeners: (...args) => {\n        return this.publicEmitter.removeAllListeners(...args);\n      }\n    };\n  }\n}\n\n//# sourceMappingURL=SetupApi.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL1NldHVwQXBpLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBdUM7QUFDUTtBQUNVO0FBQ0k7QUFDVTtBQUNWO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzRUFBVTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHFEQUFTO0FBQ2I7QUFDQSxNQUFNLGtFQUFRO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIseURBQU87QUFDOUIsNkJBQTZCLHlEQUFPO0FBQ3BDLElBQUksMEVBQVU7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxxREFBUztBQUNiO0FBQ0EsTUFBTSxrRUFBUTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9GQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL1NldHVwQXBpLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwib3V0dmFyaWFudFwiO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCJzdHJpY3QtZXZlbnQtZW1pdHRlclwiO1xuaW1wb3J0IHsgZGV2VXRpbHMgfSBmcm9tICcuL3V0aWxzL2ludGVybmFsL2RldlV0aWxzLm1qcyc7XG5pbXBvcnQgeyBwaXBlRXZlbnRzIH0gZnJvbSAnLi91dGlscy9pbnRlcm5hbC9waXBlRXZlbnRzLm1qcyc7XG5pbXBvcnQgeyB0b1JlYWRvbmx5QXJyYXkgfSBmcm9tICcuL3V0aWxzL2ludGVybmFsL3RvUmVhZG9ubHlBcnJheS5tanMnO1xuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJy4vdXRpbHMvaW50ZXJuYWwvRGlzcG9zYWJsZS5tanMnO1xuY2xhc3MgSGFuZGxlcnNDb250cm9sbGVyIHtcbn1cbmNsYXNzIEluTWVtb3J5SGFuZGxlcnNDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoaW5pdGlhbEhhbmRsZXJzKSB7XG4gICAgdGhpcy5pbml0aWFsSGFuZGxlcnMgPSBpbml0aWFsSGFuZGxlcnM7XG4gICAgdGhpcy5oYW5kbGVycyA9IFsuLi5pbml0aWFsSGFuZGxlcnNdO1xuICB9XG4gIGhhbmRsZXJzO1xuICBwcmVwZW5kKHJ1bnRpbWVIYW5kbGVzKSB7XG4gICAgdGhpcy5oYW5kbGVycy51bnNoaWZ0KC4uLnJ1bnRpbWVIYW5kbGVzKTtcbiAgfVxuICByZXNldChuZXh0SGFuZGxlcnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gbmV4dEhhbmRsZXJzLmxlbmd0aCA+IDAgPyBbLi4ubmV4dEhhbmRsZXJzXSA6IFsuLi50aGlzLmluaXRpYWxIYW5kbGVyc107XG4gIH1cbiAgY3VycmVudEhhbmRsZXJzKCkge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzO1xuICB9XG59XG5jbGFzcyBTZXR1cEFwaSBleHRlbmRzIERpc3Bvc2FibGUge1xuICBoYW5kbGVyc0NvbnRyb2xsZXI7XG4gIGVtaXR0ZXI7XG4gIHB1YmxpY0VtaXR0ZXI7XG4gIGV2ZW50cztcbiAgY29uc3RydWN0b3IoLi4uaW5pdGlhbEhhbmRsZXJzKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0aGlzLnZhbGlkYXRlSGFuZGxlcnMoaW5pdGlhbEhhbmRsZXJzKSxcbiAgICAgIGRldlV0aWxzLmZvcm1hdE1lc3NhZ2UoXG4gICAgICAgIGBGYWlsZWQgdG8gYXBwbHkgZ2l2ZW4gcmVxdWVzdCBoYW5kbGVyczogaW52YWxpZCBpbnB1dC4gRGlkIHlvdSBmb3JnZXQgdG8gc3ByZWFkIHRoZSByZXF1ZXN0IGhhbmRsZXJzIEFycmF5P2BcbiAgICAgIClcbiAgICApO1xuICAgIHRoaXMuaGFuZGxlcnNDb250cm9sbGVyID0gbmV3IEluTWVtb3J5SGFuZGxlcnNDb250cm9sbGVyKGluaXRpYWxIYW5kbGVycyk7XG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICB0aGlzLnB1YmxpY0VtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xuICAgIHBpcGVFdmVudHModGhpcy5lbWl0dGVyLCB0aGlzLnB1YmxpY0VtaXR0ZXIpO1xuICAgIHRoaXMuZXZlbnRzID0gdGhpcy5jcmVhdGVMaWZlQ3ljbGVFdmVudHMoKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCgoKSA9PiB7XG4gICAgICB0aGlzLmVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLnB1YmxpY0VtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgfSk7XG4gIH1cbiAgdmFsaWRhdGVIYW5kbGVycyhoYW5kbGVycykge1xuICAgIHJldHVybiBoYW5kbGVycy5ldmVyeSgoaGFuZGxlcikgPT4gIUFycmF5LmlzQXJyYXkoaGFuZGxlcikpO1xuICB9XG4gIHVzZSguLi5ydW50aW1lSGFuZGxlcnMpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0aGlzLnZhbGlkYXRlSGFuZGxlcnMocnVudGltZUhhbmRsZXJzKSxcbiAgICAgIGRldlV0aWxzLmZvcm1hdE1lc3NhZ2UoXG4gICAgICAgIGBGYWlsZWQgdG8gY2FsbCBcInVzZSgpXCIgd2l0aCB0aGUgZ2l2ZW4gcmVxdWVzdCBoYW5kbGVyczogaW52YWxpZCBpbnB1dC4gRGlkIHlvdSBmb3JnZXQgdG8gc3ByZWFkIHRoZSBhcnJheSBvZiByZXF1ZXN0IGhhbmRsZXJzP2BcbiAgICAgIClcbiAgICApO1xuICAgIHRoaXMuaGFuZGxlcnNDb250cm9sbGVyLnByZXBlbmQocnVudGltZUhhbmRsZXJzKTtcbiAgfVxuICByZXN0b3JlSGFuZGxlcnMoKSB7XG4gICAgdGhpcy5oYW5kbGVyc0NvbnRyb2xsZXIuY3VycmVudEhhbmRsZXJzKCkuZm9yRWFjaCgoaGFuZGxlcikgPT4ge1xuICAgICAgaWYgKFwiaXNVc2VkXCIgaW4gaGFuZGxlcikge1xuICAgICAgICBoYW5kbGVyLmlzVXNlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJlc2V0SGFuZGxlcnMoLi4ubmV4dEhhbmRsZXJzKSB7XG4gICAgdGhpcy5oYW5kbGVyc0NvbnRyb2xsZXIucmVzZXQobmV4dEhhbmRsZXJzKTtcbiAgfVxuICBsaXN0SGFuZGxlcnMoKSB7XG4gICAgcmV0dXJuIHRvUmVhZG9ubHlBcnJheSh0aGlzLmhhbmRsZXJzQ29udHJvbGxlci5jdXJyZW50SGFuZGxlcnMoKSk7XG4gIH1cbiAgY3JlYXRlTGlmZUN5Y2xlRXZlbnRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbjogKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVibGljRW1pdHRlci5vbiguLi5hcmdzKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVMaXN0ZW5lcjogKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVibGljRW1pdHRlci5yZW1vdmVMaXN0ZW5lciguLi5hcmdzKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVBbGxMaXN0ZW5lcnM6ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnB1YmxpY0VtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbmV4cG9ydCB7XG4gIEhhbmRsZXJzQ29udHJvbGxlcixcbiAgSW5NZW1vcnlIYW5kbGVyc0NvbnRyb2xsZXIsXG4gIFNldHVwQXBpXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2V0dXBBcGkubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/SetupApi.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/handlers/HttpHandler.mjs":
/*!************************************************************!*\
  !*** ./node_modules/msw/lib/core/handlers/HttpHandler.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpHandler: () => (/* binding */ HttpHandler),\n/* harmony export */   HttpMethods: () => (/* binding */ HttpMethods)\n/* harmony export */ });\n/* harmony import */ var _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/internal/devUtils.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/devUtils.mjs\");\n/* harmony import */ var _utils_internal_isStringEqual_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/internal/isStringEqual.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/isStringEqual.mjs\");\n/* harmony import */ var _utils_logging_getStatusCodeColor_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/logging/getStatusCodeColor.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/logging/getStatusCodeColor.mjs\");\n/* harmony import */ var _utils_logging_getTimestamp_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/logging/getTimestamp.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/logging/getTimestamp.mjs\");\n/* harmony import */ var _utils_logging_serializeRequest_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/logging/serializeRequest.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/logging/serializeRequest.mjs\");\n/* harmony import */ var _utils_logging_serializeResponse_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/logging/serializeResponse.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/logging/serializeResponse.mjs\");\n/* harmony import */ var _utils_matching_matchRequestUrl_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/matching/matchRequestUrl.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/matching/matchRequestUrl.mjs\");\n/* harmony import */ var _utils_request_toPublicUrl_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/request/toPublicUrl.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/request/toPublicUrl.mjs\");\n/* harmony import */ var _utils_request_getRequestCookies_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/request/getRequestCookies.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/request/getRequestCookies.mjs\");\n/* harmony import */ var _utils_url_cleanUrl_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/url/cleanUrl.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/url/cleanUrl.mjs\");\n/* harmony import */ var _RequestHandler_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RequestHandler.mjs */ \"(ssr)/./node_modules/msw/lib/core/handlers/RequestHandler.mjs\");\n\n\n\n\n\n\n\n\n\n\n\nvar HttpMethods = /* @__PURE__ */ ((HttpMethods2) => {\n  HttpMethods2[\"HEAD\"] = \"HEAD\";\n  HttpMethods2[\"GET\"] = \"GET\";\n  HttpMethods2[\"POST\"] = \"POST\";\n  HttpMethods2[\"PUT\"] = \"PUT\";\n  HttpMethods2[\"PATCH\"] = \"PATCH\";\n  HttpMethods2[\"OPTIONS\"] = \"OPTIONS\";\n  HttpMethods2[\"DELETE\"] = \"DELETE\";\n  return HttpMethods2;\n})(HttpMethods || {});\nclass HttpHandler extends _RequestHandler_mjs__WEBPACK_IMPORTED_MODULE_0__.RequestHandler {\n  constructor(method, predicate, resolver, options) {\n    const displayPath = typeof predicate === \"function\" ? \"[custom predicate]\" : predicate;\n    super({\n      info: {\n        header: `${method}${displayPath ? ` ${displayPath}` : \"\"}`,\n        path: predicate,\n        method\n      },\n      resolver,\n      options\n    });\n    this.checkRedundantQueryParameters();\n  }\n  checkRedundantQueryParameters() {\n    const { method, path } = this.info;\n    if (!path || path instanceof RegExp || typeof path === \"function\") {\n      return;\n    }\n    const url = (0,_utils_url_cleanUrl_mjs__WEBPACK_IMPORTED_MODULE_1__.cleanUrl)(path);\n    if (url === path) {\n      return;\n    }\n    const searchParams = (0,_utils_url_cleanUrl_mjs__WEBPACK_IMPORTED_MODULE_1__.getSearchParams)(path);\n    const queryParams = [];\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName);\n    });\n    _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.devUtils.warn(\n      `Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters using \"new URL(request.url).searchParams\" instead. Learn more: https://mswjs.io/docs/http/intercepting-requests#querysearch-parameters`\n    );\n  }\n  async parse(args) {\n    const url = new URL(args.request.url);\n    const cookies = (0,_utils_request_getRequestCookies_mjs__WEBPACK_IMPORTED_MODULE_3__.getAllRequestCookies)(args.request);\n    if (typeof this.info.path === \"function\") {\n      const customPredicateResult = await this.info.path({\n        request: args.request,\n        cookies\n      });\n      const match2 = typeof customPredicateResult === \"boolean\" ? {\n        matches: customPredicateResult,\n        params: {}\n      } : customPredicateResult;\n      return {\n        match: match2,\n        cookies\n      };\n    }\n    const match = this.info.path ? (0,_utils_matching_matchRequestUrl_mjs__WEBPACK_IMPORTED_MODULE_4__.matchRequestUrl)(url, this.info.path, args.resolutionContext?.baseUrl) : { matches: false, params: {} };\n    return {\n      match,\n      cookies\n    };\n  }\n  async predicate(args) {\n    const hasMatchingMethod = this.matchMethod(args.request.method);\n    const hasMatchingUrl = args.parsedResult.match.matches;\n    return hasMatchingMethod && hasMatchingUrl;\n  }\n  matchMethod(actualMethod) {\n    return this.info.method instanceof RegExp ? this.info.method.test(actualMethod) : (0,_utils_internal_isStringEqual_mjs__WEBPACK_IMPORTED_MODULE_5__.isStringEqual)(this.info.method, actualMethod);\n  }\n  extendResolverArgs(args) {\n    return {\n      params: args.parsedResult.match?.params || {},\n      cookies: args.parsedResult.cookies\n    };\n  }\n  async log(args) {\n    const publicUrl = (0,_utils_request_toPublicUrl_mjs__WEBPACK_IMPORTED_MODULE_6__.toPublicUrl)(args.request.url);\n    const loggedRequest = await (0,_utils_logging_serializeRequest_mjs__WEBPACK_IMPORTED_MODULE_7__.serializeRequest)(args.request);\n    const loggedResponse = await (0,_utils_logging_serializeResponse_mjs__WEBPACK_IMPORTED_MODULE_8__.serializeResponse)(args.response);\n    const statusColor = (0,_utils_logging_getStatusCodeColor_mjs__WEBPACK_IMPORTED_MODULE_9__.getStatusCodeColor)(loggedResponse.status);\n    console.groupCollapsed(\n      _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.devUtils.formatMessage(\n        `${(0,_utils_logging_getTimestamp_mjs__WEBPACK_IMPORTED_MODULE_10__.getTimestamp)()} ${args.request.method} ${publicUrl} (%c${loggedResponse.status} ${loggedResponse.statusText}%c)`\n      ),\n      `color:${statusColor}`,\n      \"color:inherit\"\n    );\n    console.log(\"Request\", loggedRequest);\n    console.log(\"Handler:\", this);\n    console.log(\"Response\", loggedResponse);\n    console.groupEnd();\n  }\n}\n\n//# sourceMappingURL=HttpHandler.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL2hhbmRsZXJzL0h0dHBIYW5kbGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQTBEO0FBQ1U7QUFDUztBQUNaO0FBQ1E7QUFDRTtBQUc1QjtBQUNnQjtBQUNlO0FBQ1I7QUFHeEM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtQkFBbUI7QUFDcEIsMEJBQTBCLCtEQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU8sRUFBRSxrQkFBa0IsWUFBWSxPQUFPO0FBQ2pFO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxZQUFZLGVBQWU7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlFQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix3RUFBZTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSSxrRUFBUTtBQUNaLHFGQUFxRixRQUFRLEVBQUUsS0FBSztBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwRkFBb0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsb0ZBQWUsMkRBQTJEO0FBQzdHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRkFBc0YsZ0ZBQWE7QUFDbkc7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDJFQUFXO0FBQ2pDLGdDQUFnQyxxRkFBZ0I7QUFDaEQsaUNBQWlDLHVGQUFpQjtBQUNsRCx3QkFBd0IseUZBQWtCO0FBQzFDO0FBQ0EsTUFBTSxrRUFBUTtBQUNkLFdBQVcsOEVBQVksSUFBSSxFQUFFLHFCQUFxQixFQUFFLFdBQVcsS0FBSyx1QkFBdUIsRUFBRSwwQkFBMEI7QUFDdkg7QUFDQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtvbGFzL25pay9pcXVwL25vZGVfbW9kdWxlcy9tc3cvbGliL2NvcmUvaGFuZGxlcnMvSHR0cEhhbmRsZXIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRldlV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvaW50ZXJuYWwvZGV2VXRpbHMubWpzJztcbmltcG9ydCB7IGlzU3RyaW5nRXF1YWwgfSBmcm9tICcuLi91dGlscy9pbnRlcm5hbC9pc1N0cmluZ0VxdWFsLm1qcyc7XG5pbXBvcnQgeyBnZXRTdGF0dXNDb2RlQ29sb3IgfSBmcm9tICcuLi91dGlscy9sb2dnaW5nL2dldFN0YXR1c0NvZGVDb2xvci5tanMnO1xuaW1wb3J0IHsgZ2V0VGltZXN0YW1wIH0gZnJvbSAnLi4vdXRpbHMvbG9nZ2luZy9nZXRUaW1lc3RhbXAubWpzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVJlcXVlc3QgfSBmcm9tICcuLi91dGlscy9sb2dnaW5nL3NlcmlhbGl6ZVJlcXVlc3QubWpzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVJlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbHMvbG9nZ2luZy9zZXJpYWxpemVSZXNwb25zZS5tanMnO1xuaW1wb3J0IHtcbiAgbWF0Y2hSZXF1ZXN0VXJsXG59IGZyb20gJy4uL3V0aWxzL21hdGNoaW5nL21hdGNoUmVxdWVzdFVybC5tanMnO1xuaW1wb3J0IHsgdG9QdWJsaWNVcmwgfSBmcm9tICcuLi91dGlscy9yZXF1ZXN0L3RvUHVibGljVXJsLm1qcyc7XG5pbXBvcnQgeyBnZXRBbGxSZXF1ZXN0Q29va2llcyB9IGZyb20gJy4uL3V0aWxzL3JlcXVlc3QvZ2V0UmVxdWVzdENvb2tpZXMubWpzJztcbmltcG9ydCB7IGNsZWFuVXJsLCBnZXRTZWFyY2hQYXJhbXMgfSBmcm9tICcuLi91dGlscy91cmwvY2xlYW5VcmwubWpzJztcbmltcG9ydCB7XG4gIFJlcXVlc3RIYW5kbGVyXG59IGZyb20gJy4vUmVxdWVzdEhhbmRsZXIubWpzJztcbnZhciBIdHRwTWV0aG9kcyA9IC8qIEBfX1BVUkVfXyAqLyAoKEh0dHBNZXRob2RzMikgPT4ge1xuICBIdHRwTWV0aG9kczJbXCJIRUFEXCJdID0gXCJIRUFEXCI7XG4gIEh0dHBNZXRob2RzMltcIkdFVFwiXSA9IFwiR0VUXCI7XG4gIEh0dHBNZXRob2RzMltcIlBPU1RcIl0gPSBcIlBPU1RcIjtcbiAgSHR0cE1ldGhvZHMyW1wiUFVUXCJdID0gXCJQVVRcIjtcbiAgSHR0cE1ldGhvZHMyW1wiUEFUQ0hcIl0gPSBcIlBBVENIXCI7XG4gIEh0dHBNZXRob2RzMltcIk9QVElPTlNcIl0gPSBcIk9QVElPTlNcIjtcbiAgSHR0cE1ldGhvZHMyW1wiREVMRVRFXCJdID0gXCJERUxFVEVcIjtcbiAgcmV0dXJuIEh0dHBNZXRob2RzMjtcbn0pKEh0dHBNZXRob2RzIHx8IHt9KTtcbmNsYXNzIEh0dHBIYW5kbGVyIGV4dGVuZHMgUmVxdWVzdEhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihtZXRob2QsIHByZWRpY2F0ZSwgcmVzb2x2ZXIsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkaXNwbGF5UGF0aCA9IHR5cGVvZiBwcmVkaWNhdGUgPT09IFwiZnVuY3Rpb25cIiA/IFwiW2N1c3RvbSBwcmVkaWNhdGVdXCIgOiBwcmVkaWNhdGU7XG4gICAgc3VwZXIoe1xuICAgICAgaW5mbzoge1xuICAgICAgICBoZWFkZXI6IGAke21ldGhvZH0ke2Rpc3BsYXlQYXRoID8gYCAke2Rpc3BsYXlQYXRofWAgOiBcIlwifWAsXG4gICAgICAgIHBhdGg6IHByZWRpY2F0ZSxcbiAgICAgICAgbWV0aG9kXG4gICAgICB9LFxuICAgICAgcmVzb2x2ZXIsXG4gICAgICBvcHRpb25zXG4gICAgfSk7XG4gICAgdGhpcy5jaGVja1JlZHVuZGFudFF1ZXJ5UGFyYW1ldGVycygpO1xuICB9XG4gIGNoZWNrUmVkdW5kYW50UXVlcnlQYXJhbWV0ZXJzKCkge1xuICAgIGNvbnN0IHsgbWV0aG9kLCBwYXRoIH0gPSB0aGlzLmluZm87XG4gICAgaWYgKCFwYXRoIHx8IHBhdGggaW5zdGFuY2VvZiBSZWdFeHAgfHwgdHlwZW9mIHBhdGggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBjbGVhblVybChwYXRoKTtcbiAgICBpZiAodXJsID09PSBwYXRoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IGdldFNlYXJjaFBhcmFtcyhwYXRoKTtcbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IFtdO1xuICAgIHNlYXJjaFBhcmFtcy5mb3JFYWNoKChfLCBwYXJhbU5hbWUpID0+IHtcbiAgICAgIHF1ZXJ5UGFyYW1zLnB1c2gocGFyYW1OYW1lKTtcbiAgICB9KTtcbiAgICBkZXZVdGlscy53YXJuKFxuICAgICAgYEZvdW5kIGEgcmVkdW5kYW50IHVzYWdlIG9mIHF1ZXJ5IHBhcmFtZXRlcnMgaW4gdGhlIHJlcXVlc3QgaGFuZGxlciBVUkwgZm9yIFwiJHttZXRob2R9ICR7cGF0aH1cIi4gUGxlYXNlIG1hdGNoIGFnYWluc3QgYSBwYXRoIGluc3RlYWQgYW5kIGFjY2VzcyBxdWVyeSBwYXJhbWV0ZXJzIHVzaW5nIFwibmV3IFVSTChyZXF1ZXN0LnVybCkuc2VhcmNoUGFyYW1zXCIgaW5zdGVhZC4gTGVhcm4gbW9yZTogaHR0cHM6Ly9tc3dqcy5pby9kb2NzL2h0dHAvaW50ZXJjZXB0aW5nLXJlcXVlc3RzI3F1ZXJ5c2VhcmNoLXBhcmFtZXRlcnNgXG4gICAgKTtcbiAgfVxuICBhc3luYyBwYXJzZShhcmdzKSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChhcmdzLnJlcXVlc3QudXJsKTtcbiAgICBjb25zdCBjb29raWVzID0gZ2V0QWxsUmVxdWVzdENvb2tpZXMoYXJncy5yZXF1ZXN0KTtcbiAgICBpZiAodHlwZW9mIHRoaXMuaW5mby5wYXRoID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNvbnN0IGN1c3RvbVByZWRpY2F0ZVJlc3VsdCA9IGF3YWl0IHRoaXMuaW5mby5wYXRoKHtcbiAgICAgICAgcmVxdWVzdDogYXJncy5yZXF1ZXN0LFxuICAgICAgICBjb29raWVzXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IG1hdGNoMiA9IHR5cGVvZiBjdXN0b21QcmVkaWNhdGVSZXN1bHQgPT09IFwiYm9vbGVhblwiID8ge1xuICAgICAgICBtYXRjaGVzOiBjdXN0b21QcmVkaWNhdGVSZXN1bHQsXG4gICAgICAgIHBhcmFtczoge31cbiAgICAgIH0gOiBjdXN0b21QcmVkaWNhdGVSZXN1bHQ7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaDogbWF0Y2gyLFxuICAgICAgICBjb29raWVzXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBtYXRjaCA9IHRoaXMuaW5mby5wYXRoID8gbWF0Y2hSZXF1ZXN0VXJsKHVybCwgdGhpcy5pbmZvLnBhdGgsIGFyZ3MucmVzb2x1dGlvbkNvbnRleHQ/LmJhc2VVcmwpIDogeyBtYXRjaGVzOiBmYWxzZSwgcGFyYW1zOiB7fSB9O1xuICAgIHJldHVybiB7XG4gICAgICBtYXRjaCxcbiAgICAgIGNvb2tpZXNcbiAgICB9O1xuICB9XG4gIGFzeW5jIHByZWRpY2F0ZShhcmdzKSB7XG4gICAgY29uc3QgaGFzTWF0Y2hpbmdNZXRob2QgPSB0aGlzLm1hdGNoTWV0aG9kKGFyZ3MucmVxdWVzdC5tZXRob2QpO1xuICAgIGNvbnN0IGhhc01hdGNoaW5nVXJsID0gYXJncy5wYXJzZWRSZXN1bHQubWF0Y2gubWF0Y2hlcztcbiAgICByZXR1cm4gaGFzTWF0Y2hpbmdNZXRob2QgJiYgaGFzTWF0Y2hpbmdVcmw7XG4gIH1cbiAgbWF0Y2hNZXRob2QoYWN0dWFsTWV0aG9kKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5mby5tZXRob2QgaW5zdGFuY2VvZiBSZWdFeHAgPyB0aGlzLmluZm8ubWV0aG9kLnRlc3QoYWN0dWFsTWV0aG9kKSA6IGlzU3RyaW5nRXF1YWwodGhpcy5pbmZvLm1ldGhvZCwgYWN0dWFsTWV0aG9kKTtcbiAgfVxuICBleHRlbmRSZXNvbHZlckFyZ3MoYXJncykge1xuICAgIHJldHVybiB7XG4gICAgICBwYXJhbXM6IGFyZ3MucGFyc2VkUmVzdWx0Lm1hdGNoPy5wYXJhbXMgfHwge30sXG4gICAgICBjb29raWVzOiBhcmdzLnBhcnNlZFJlc3VsdC5jb29raWVzXG4gICAgfTtcbiAgfVxuICBhc3luYyBsb2coYXJncykge1xuICAgIGNvbnN0IHB1YmxpY1VybCA9IHRvUHVibGljVXJsKGFyZ3MucmVxdWVzdC51cmwpO1xuICAgIGNvbnN0IGxvZ2dlZFJlcXVlc3QgPSBhd2FpdCBzZXJpYWxpemVSZXF1ZXN0KGFyZ3MucmVxdWVzdCk7XG4gICAgY29uc3QgbG9nZ2VkUmVzcG9uc2UgPSBhd2FpdCBzZXJpYWxpemVSZXNwb25zZShhcmdzLnJlc3BvbnNlKTtcbiAgICBjb25zdCBzdGF0dXNDb2xvciA9IGdldFN0YXR1c0NvZGVDb2xvcihsb2dnZWRSZXNwb25zZS5zdGF0dXMpO1xuICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoXG4gICAgICBkZXZVdGlscy5mb3JtYXRNZXNzYWdlKFxuICAgICAgICBgJHtnZXRUaW1lc3RhbXAoKX0gJHthcmdzLnJlcXVlc3QubWV0aG9kfSAke3B1YmxpY1VybH0gKCVjJHtsb2dnZWRSZXNwb25zZS5zdGF0dXN9ICR7bG9nZ2VkUmVzcG9uc2Uuc3RhdHVzVGV4dH0lYylgXG4gICAgICApLFxuICAgICAgYGNvbG9yOiR7c3RhdHVzQ29sb3J9YCxcbiAgICAgIFwiY29sb3I6aW5oZXJpdFwiXG4gICAgKTtcbiAgICBjb25zb2xlLmxvZyhcIlJlcXVlc3RcIiwgbG9nZ2VkUmVxdWVzdCk7XG4gICAgY29uc29sZS5sb2coXCJIYW5kbGVyOlwiLCB0aGlzKTtcbiAgICBjb25zb2xlLmxvZyhcIlJlc3BvbnNlXCIsIGxvZ2dlZFJlc3BvbnNlKTtcbiAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIEh0dHBIYW5kbGVyLFxuICBIdHRwTWV0aG9kc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUh0dHBIYW5kbGVyLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/handlers/HttpHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/handlers/RequestHandler.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/msw/lib/core/handlers/RequestHandler.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestHandler: () => (/* binding */ RequestHandler)\n/* harmony export */ });\n/* harmony import */ var _utils_internal_getCallFrame_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/internal/getCallFrame.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/getCallFrame.mjs\");\n/* harmony import */ var _utils_internal_isIterable_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/internal/isIterable.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/isIterable.mjs\");\n\n\nclass RequestHandler {\n  static cache = /* @__PURE__ */ new WeakMap();\n  __kind;\n  info;\n  /**\n   * Indicates whether this request handler has been used\n   * (its resolver has successfully executed).\n   */\n  isUsed;\n  resolver;\n  resolverIterator;\n  resolverIteratorResult;\n  options;\n  constructor(args) {\n    this.resolver = args.resolver;\n    this.options = args.options;\n    const callFrame = (0,_utils_internal_getCallFrame_mjs__WEBPACK_IMPORTED_MODULE_0__.getCallFrame)(new Error());\n    this.info = {\n      ...args.info,\n      callFrame\n    };\n    this.isUsed = false;\n    this.__kind = \"RequestHandler\";\n  }\n  /**\n   * Parse the intercepted request to extract additional information from it.\n   * Parsed result is then exposed to other methods of this request handler.\n   */\n  async parse(_args) {\n    return {};\n  }\n  /**\n   * Test if this handler matches the given request.\n   *\n   * This method is not used internally but is exposed\n   * as a convenience method for consumers writing custom\n   * handlers.\n   */\n  async test(args) {\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext\n    });\n    return this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext\n    });\n  }\n  extendResolverArgs(_args) {\n    return {};\n  }\n  // Clone the request instance before it's passed to the handler phases\n  // and the response resolver so we can always read it for logging.\n  // We only clone it once per request to avoid unnecessary overhead.\n  cloneRequestOrGetFromCache(request) {\n    const existingClone = RequestHandler.cache.get(request);\n    if (typeof existingClone !== \"undefined\") {\n      return existingClone;\n    }\n    const clonedRequest = request.clone();\n    RequestHandler.cache.set(request, clonedRequest);\n    return clonedRequest;\n  }\n  /**\n   * Execute this request handler and produce a mocked response\n   * using the given resolver function.\n   */\n  async run(args) {\n    if (this.isUsed && this.options?.once) {\n      return null;\n    }\n    const requestClone = this.cloneRequestOrGetFromCache(args.request);\n    const parsedResult = await this.parse({\n      request: args.request,\n      resolutionContext: args.resolutionContext\n    });\n    const shouldInterceptRequest = await this.predicate({\n      request: args.request,\n      parsedResult,\n      resolutionContext: args.resolutionContext\n    });\n    if (!shouldInterceptRequest) {\n      return null;\n    }\n    if (this.isUsed && this.options?.once) {\n      return null;\n    }\n    this.isUsed = true;\n    const executeResolver = this.wrapResolver(this.resolver);\n    const resolverExtras = this.extendResolverArgs({\n      request: args.request,\n      parsedResult\n    });\n    const mockedResponsePromise = executeResolver({\n      ...resolverExtras,\n      requestId: args.requestId,\n      request: args.request\n    }).catch((errorOrResponse) => {\n      if (errorOrResponse instanceof Response) {\n        return errorOrResponse;\n      }\n      throw errorOrResponse;\n    });\n    const mockedResponse = await mockedResponsePromise;\n    const executionResult = this.createExecutionResult({\n      // Pass the cloned request to the result so that logging\n      // and other consumers could read its body once more.\n      request: requestClone,\n      requestId: args.requestId,\n      response: mockedResponse,\n      parsedResult\n    });\n    return executionResult;\n  }\n  wrapResolver(resolver) {\n    return async (info) => {\n      if (!this.resolverIterator) {\n        const result = await resolver(info);\n        if (!(0,_utils_internal_isIterable_mjs__WEBPACK_IMPORTED_MODULE_1__.isIterable)(result)) {\n          return result;\n        }\n        this.resolverIterator = Symbol.iterator in result ? result[Symbol.iterator]() : result[Symbol.asyncIterator]();\n      }\n      this.isUsed = false;\n      const { done, value } = await this.resolverIterator.next();\n      const nextResponse = await value;\n      if (nextResponse) {\n        this.resolverIteratorResult = nextResponse.clone();\n      }\n      if (done) {\n        this.isUsed = true;\n        return this.resolverIteratorResult?.clone();\n      }\n      return nextResponse;\n    };\n  }\n  createExecutionResult(args) {\n    return {\n      handler: this,\n      request: args.request,\n      requestId: args.requestId,\n      response: args.response,\n      parsedResult: args.parsedResult\n    };\n  }\n}\n\n//# sourceMappingURL=RequestHandler.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL2hhbmRsZXJzL1JlcXVlc3RIYW5kbGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0U7QUFHeEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsOEVBQVk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMEVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsY0FBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL2hhbmRsZXJzL1JlcXVlc3RIYW5kbGVyLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDYWxsRnJhbWUgfSBmcm9tICcuLi91dGlscy9pbnRlcm5hbC9nZXRDYWxsRnJhbWUubWpzJztcbmltcG9ydCB7XG4gIGlzSXRlcmFibGVcbn0gZnJvbSAnLi4vdXRpbHMvaW50ZXJuYWwvaXNJdGVyYWJsZS5tanMnO1xuY2xhc3MgUmVxdWVzdEhhbmRsZXIge1xuICBzdGF0aWMgY2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgX19raW5kO1xuICBpbmZvO1xuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyByZXF1ZXN0IGhhbmRsZXIgaGFzIGJlZW4gdXNlZFxuICAgKiAoaXRzIHJlc29sdmVyIGhhcyBzdWNjZXNzZnVsbHkgZXhlY3V0ZWQpLlxuICAgKi9cbiAgaXNVc2VkO1xuICByZXNvbHZlcjtcbiAgcmVzb2x2ZXJJdGVyYXRvcjtcbiAgcmVzb2x2ZXJJdGVyYXRvclJlc3VsdDtcbiAgb3B0aW9ucztcbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHRoaXMucmVzb2x2ZXIgPSBhcmdzLnJlc29sdmVyO1xuICAgIHRoaXMub3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICBjb25zdCBjYWxsRnJhbWUgPSBnZXRDYWxsRnJhbWUobmV3IEVycm9yKCkpO1xuICAgIHRoaXMuaW5mbyA9IHtcbiAgICAgIC4uLmFyZ3MuaW5mbyxcbiAgICAgIGNhbGxGcmFtZVxuICAgIH07XG4gICAgdGhpcy5pc1VzZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9fa2luZCA9IFwiUmVxdWVzdEhhbmRsZXJcIjtcbiAgfVxuICAvKipcbiAgICogUGFyc2UgdGhlIGludGVyY2VwdGVkIHJlcXVlc3QgdG8gZXh0cmFjdCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGZyb20gaXQuXG4gICAqIFBhcnNlZCByZXN1bHQgaXMgdGhlbiBleHBvc2VkIHRvIG90aGVyIG1ldGhvZHMgb2YgdGhpcyByZXF1ZXN0IGhhbmRsZXIuXG4gICAqL1xuICBhc3luYyBwYXJzZShfYXJncykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICAvKipcbiAgICogVGVzdCBpZiB0aGlzIGhhbmRsZXIgbWF0Y2hlcyB0aGUgZ2l2ZW4gcmVxdWVzdC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgbm90IHVzZWQgaW50ZXJuYWxseSBidXQgaXMgZXhwb3NlZFxuICAgKiBhcyBhIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgY29uc3VtZXJzIHdyaXRpbmcgY3VzdG9tXG4gICAqIGhhbmRsZXJzLlxuICAgKi9cbiAgYXN5bmMgdGVzdChhcmdzKSB7XG4gICAgY29uc3QgcGFyc2VkUmVzdWx0ID0gYXdhaXQgdGhpcy5wYXJzZSh7XG4gICAgICByZXF1ZXN0OiBhcmdzLnJlcXVlc3QsXG4gICAgICByZXNvbHV0aW9uQ29udGV4dDogYXJncy5yZXNvbHV0aW9uQ29udGV4dFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnByZWRpY2F0ZSh7XG4gICAgICByZXF1ZXN0OiBhcmdzLnJlcXVlc3QsXG4gICAgICBwYXJzZWRSZXN1bHQsXG4gICAgICByZXNvbHV0aW9uQ29udGV4dDogYXJncy5yZXNvbHV0aW9uQ29udGV4dFxuICAgIH0pO1xuICB9XG4gIGV4dGVuZFJlc29sdmVyQXJncyhfYXJncykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICAvLyBDbG9uZSB0aGUgcmVxdWVzdCBpbnN0YW5jZSBiZWZvcmUgaXQncyBwYXNzZWQgdG8gdGhlIGhhbmRsZXIgcGhhc2VzXG4gIC8vIGFuZCB0aGUgcmVzcG9uc2UgcmVzb2x2ZXIgc28gd2UgY2FuIGFsd2F5cyByZWFkIGl0IGZvciBsb2dnaW5nLlxuICAvLyBXZSBvbmx5IGNsb25lIGl0IG9uY2UgcGVyIHJlcXVlc3QgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgb3ZlcmhlYWQuXG4gIGNsb25lUmVxdWVzdE9yR2V0RnJvbUNhY2hlKHJlcXVlc3QpIHtcbiAgICBjb25zdCBleGlzdGluZ0Nsb25lID0gUmVxdWVzdEhhbmRsZXIuY2FjaGUuZ2V0KHJlcXVlc3QpO1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmdDbG9uZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nQ2xvbmU7XG4gICAgfVxuICAgIGNvbnN0IGNsb25lZFJlcXVlc3QgPSByZXF1ZXN0LmNsb25lKCk7XG4gICAgUmVxdWVzdEhhbmRsZXIuY2FjaGUuc2V0KHJlcXVlc3QsIGNsb25lZFJlcXVlc3QpO1xuICAgIHJldHVybiBjbG9uZWRSZXF1ZXN0O1xuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlIHRoaXMgcmVxdWVzdCBoYW5kbGVyIGFuZCBwcm9kdWNlIGEgbW9ja2VkIHJlc3BvbnNlXG4gICAqIHVzaW5nIHRoZSBnaXZlbiByZXNvbHZlciBmdW5jdGlvbi5cbiAgICovXG4gIGFzeW5jIHJ1bihhcmdzKSB7XG4gICAgaWYgKHRoaXMuaXNVc2VkICYmIHRoaXMub3B0aW9ucz8ub25jZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RDbG9uZSA9IHRoaXMuY2xvbmVSZXF1ZXN0T3JHZXRGcm9tQ2FjaGUoYXJncy5yZXF1ZXN0KTtcbiAgICBjb25zdCBwYXJzZWRSZXN1bHQgPSBhd2FpdCB0aGlzLnBhcnNlKHtcbiAgICAgIHJlcXVlc3Q6IGFyZ3MucmVxdWVzdCxcbiAgICAgIHJlc29sdXRpb25Db250ZXh0OiBhcmdzLnJlc29sdXRpb25Db250ZXh0XG4gICAgfSk7XG4gICAgY29uc3Qgc2hvdWxkSW50ZXJjZXB0UmVxdWVzdCA9IGF3YWl0IHRoaXMucHJlZGljYXRlKHtcbiAgICAgIHJlcXVlc3Q6IGFyZ3MucmVxdWVzdCxcbiAgICAgIHBhcnNlZFJlc3VsdCxcbiAgICAgIHJlc29sdXRpb25Db250ZXh0OiBhcmdzLnJlc29sdXRpb25Db250ZXh0XG4gICAgfSk7XG4gICAgaWYgKCFzaG91bGRJbnRlcmNlcHRSZXF1ZXN0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNVc2VkICYmIHRoaXMub3B0aW9ucz8ub25jZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRoaXMuaXNVc2VkID0gdHJ1ZTtcbiAgICBjb25zdCBleGVjdXRlUmVzb2x2ZXIgPSB0aGlzLndyYXBSZXNvbHZlcih0aGlzLnJlc29sdmVyKTtcbiAgICBjb25zdCByZXNvbHZlckV4dHJhcyA9IHRoaXMuZXh0ZW5kUmVzb2x2ZXJBcmdzKHtcbiAgICAgIHJlcXVlc3Q6IGFyZ3MucmVxdWVzdCxcbiAgICAgIHBhcnNlZFJlc3VsdFxuICAgIH0pO1xuICAgIGNvbnN0IG1vY2tlZFJlc3BvbnNlUHJvbWlzZSA9IGV4ZWN1dGVSZXNvbHZlcih7XG4gICAgICAuLi5yZXNvbHZlckV4dHJhcyxcbiAgICAgIHJlcXVlc3RJZDogYXJncy5yZXF1ZXN0SWQsXG4gICAgICByZXF1ZXN0OiBhcmdzLnJlcXVlc3RcbiAgICB9KS5jYXRjaCgoZXJyb3JPclJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAoZXJyb3JPclJlc3BvbnNlIGluc3RhbmNlb2YgUmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yT3JSZXNwb25zZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yT3JSZXNwb25zZTtcbiAgICB9KTtcbiAgICBjb25zdCBtb2NrZWRSZXNwb25zZSA9IGF3YWl0IG1vY2tlZFJlc3BvbnNlUHJvbWlzZTtcbiAgICBjb25zdCBleGVjdXRpb25SZXN1bHQgPSB0aGlzLmNyZWF0ZUV4ZWN1dGlvblJlc3VsdCh7XG4gICAgICAvLyBQYXNzIHRoZSBjbG9uZWQgcmVxdWVzdCB0byB0aGUgcmVzdWx0IHNvIHRoYXQgbG9nZ2luZ1xuICAgICAgLy8gYW5kIG90aGVyIGNvbnN1bWVycyBjb3VsZCByZWFkIGl0cyBib2R5IG9uY2UgbW9yZS5cbiAgICAgIHJlcXVlc3Q6IHJlcXVlc3RDbG9uZSxcbiAgICAgIHJlcXVlc3RJZDogYXJncy5yZXF1ZXN0SWQsXG4gICAgICByZXNwb25zZTogbW9ja2VkUmVzcG9uc2UsXG4gICAgICBwYXJzZWRSZXN1bHRcbiAgICB9KTtcbiAgICByZXR1cm4gZXhlY3V0aW9uUmVzdWx0O1xuICB9XG4gIHdyYXBSZXNvbHZlcihyZXNvbHZlcikge1xuICAgIHJldHVybiBhc3luYyAoaW5mbykgPT4ge1xuICAgICAgaWYgKCF0aGlzLnJlc29sdmVySXRlcmF0b3IpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb2x2ZXIoaW5mbyk7XG4gICAgICAgIGlmICghaXNJdGVyYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc29sdmVySXRlcmF0b3IgPSBTeW1ib2wuaXRlcmF0b3IgaW4gcmVzdWx0ID8gcmVzdWx0W1N5bWJvbC5pdGVyYXRvcl0oKSA6IHJlc3VsdFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaXNVc2VkID0gZmFsc2U7XG4gICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCB0aGlzLnJlc29sdmVySXRlcmF0b3IubmV4dCgpO1xuICAgICAgY29uc3QgbmV4dFJlc3BvbnNlID0gYXdhaXQgdmFsdWU7XG4gICAgICBpZiAobmV4dFJlc3BvbnNlKSB7XG4gICAgICAgIHRoaXMucmVzb2x2ZXJJdGVyYXRvclJlc3VsdCA9IG5leHRSZXNwb25zZS5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgdGhpcy5pc1VzZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlckl0ZXJhdG9yUmVzdWx0Py5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHRSZXNwb25zZTtcbiAgICB9O1xuICB9XG4gIGNyZWF0ZUV4ZWN1dGlvblJlc3VsdChhcmdzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhhbmRsZXI6IHRoaXMsXG4gICAgICByZXF1ZXN0OiBhcmdzLnJlcXVlc3QsXG4gICAgICByZXF1ZXN0SWQ6IGFyZ3MucmVxdWVzdElkLFxuICAgICAgcmVzcG9uc2U6IGFyZ3MucmVzcG9uc2UsXG4gICAgICBwYXJzZWRSZXN1bHQ6IGFyZ3MucGFyc2VkUmVzdWx0XG4gICAgfTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgUmVxdWVzdEhhbmRsZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXF1ZXN0SGFuZGxlci5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/handlers/RequestHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/http.mjs":
/*!********************************************!*\
  !*** ./node_modules/msw/lib/core/http.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   http: () => (/* binding */ http)\n/* harmony export */ });\n/* harmony import */ var _handlers_HttpHandler_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlers/HttpHandler.mjs */ \"(ssr)/./node_modules/msw/lib/core/handlers/HttpHandler.mjs\");\n\nfunction createHttpHandler(method) {\n  return (predicate, resolver, options = {}) => {\n    return new _handlers_HttpHandler_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpHandler(method, predicate, resolver, options);\n  };\n}\nconst http = {\n  all: createHttpHandler(/.+/),\n  head: createHttpHandler(_handlers_HttpHandler_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethods.HEAD),\n  get: createHttpHandler(_handlers_HttpHandler_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethods.GET),\n  post: createHttpHandler(_handlers_HttpHandler_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethods.POST),\n  put: createHttpHandler(_handlers_HttpHandler_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethods.PUT),\n  delete: createHttpHandler(_handlers_HttpHandler_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethods.DELETE),\n  patch: createHttpHandler(_handlers_HttpHandler_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethods.PATCH),\n  options: createHttpHandler(_handlers_HttpHandler_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethods.OPTIONS)\n};\n\n//# sourceMappingURL=http.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL2h0dHAubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBR29DO0FBQ3BDO0FBQ0EsMkNBQTJDO0FBQzNDLGVBQWUsa0VBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsa0VBQVc7QUFDckMseUJBQXlCLGtFQUFXO0FBQ3BDLDBCQUEwQixrRUFBVztBQUNyQyx5QkFBeUIsa0VBQVc7QUFDcEMsNEJBQTRCLGtFQUFXO0FBQ3ZDLDJCQUEyQixrRUFBVztBQUN0Qyw2QkFBNkIsa0VBQVc7QUFDeEM7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL2h0dHAubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEh0dHBNZXRob2RzLFxuICBIdHRwSGFuZGxlclxufSBmcm9tICcuL2hhbmRsZXJzL0h0dHBIYW5kbGVyLm1qcyc7XG5mdW5jdGlvbiBjcmVhdGVIdHRwSGFuZGxlcihtZXRob2QpIHtcbiAgcmV0dXJuIChwcmVkaWNhdGUsIHJlc29sdmVyLCBvcHRpb25zID0ge30pID0+IHtcbiAgICByZXR1cm4gbmV3IEh0dHBIYW5kbGVyKG1ldGhvZCwgcHJlZGljYXRlLCByZXNvbHZlciwgb3B0aW9ucyk7XG4gIH07XG59XG5jb25zdCBodHRwID0ge1xuICBhbGw6IGNyZWF0ZUh0dHBIYW5kbGVyKC8uKy8pLFxuICBoZWFkOiBjcmVhdGVIdHRwSGFuZGxlcihIdHRwTWV0aG9kcy5IRUFEKSxcbiAgZ2V0OiBjcmVhdGVIdHRwSGFuZGxlcihIdHRwTWV0aG9kcy5HRVQpLFxuICBwb3N0OiBjcmVhdGVIdHRwSGFuZGxlcihIdHRwTWV0aG9kcy5QT1NUKSxcbiAgcHV0OiBjcmVhdGVIdHRwSGFuZGxlcihIdHRwTWV0aG9kcy5QVVQpLFxuICBkZWxldGU6IGNyZWF0ZUh0dHBIYW5kbGVyKEh0dHBNZXRob2RzLkRFTEVURSksXG4gIHBhdGNoOiBjcmVhdGVIdHRwSGFuZGxlcihIdHRwTWV0aG9kcy5QQVRDSCksXG4gIG9wdGlvbnM6IGNyZWF0ZUh0dHBIYW5kbGVyKEh0dHBNZXRob2RzLk9QVElPTlMpXG59O1xuZXhwb3J0IHtcbiAgaHR0cFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHAubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/http.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/isCommonAssetRequest.mjs":
/*!************************************************************!*\
  !*** ./node_modules/msw/lib/core/isCommonAssetRequest.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCommonAssetRequest: () => (/* binding */ isCommonAssetRequest)\n/* harmony export */ });\nfunction isCommonAssetRequest(request) {\n  const url = new URL(request.url);\n  if (url.protocol === \"file:\") {\n    return true;\n  }\n  if (/(fonts\\.googleapis\\.com)/.test(url.hostname)) {\n    return true;\n  }\n  if (/node_modules/.test(url.pathname)) {\n    return true;\n  }\n  if (url.pathname.includes(\"@vite\")) {\n    return true;\n  }\n  return /\\.(s?css|less|m?jsx?|m?tsx?|html|ttf|otf|woff|woff2|eot|gif|jpe?g|png|avif|webp|svg|mp4|webm|ogg|mov|mp3|wav|ogg|flac|aac|pdf|txt|csv|json|xml|md|zip|tar|gz|rar|7z)$/i.test(\n    url.pathname\n  );\n}\n\n//# sourceMappingURL=isCommonAssetRequest.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL2lzQ29tbW9uQXNzZXRSZXF1ZXN0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa29sYXMvbmlrL2lxdXAvbm9kZV9tb2R1bGVzL21zdy9saWIvY29yZS9pc0NvbW1vbkFzc2V0UmVxdWVzdC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNDb21tb25Bc3NldFJlcXVlc3QocmVxdWVzdCkge1xuICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgaWYgKHVybC5wcm90b2NvbCA9PT0gXCJmaWxlOlwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKC8oZm9udHNcXC5nb29nbGVhcGlzXFwuY29tKS8udGVzdCh1cmwuaG9zdG5hbWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKC9ub2RlX21vZHVsZXMvLnRlc3QodXJsLnBhdGhuYW1lKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh1cmwucGF0aG5hbWUuaW5jbHVkZXMoXCJAdml0ZVwiKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiAvXFwuKHM/Y3NzfGxlc3N8bT9qc3g/fG0/dHN4P3xodG1sfHR0ZnxvdGZ8d29mZnx3b2ZmMnxlb3R8Z2lmfGpwZT9nfHBuZ3xhdmlmfHdlYnB8c3ZnfG1wNHx3ZWJtfG9nZ3xtb3Z8bXAzfHdhdnxvZ2d8ZmxhY3xhYWN8cGRmfHR4dHxjc3Z8anNvbnx4bWx8bWR8emlwfHRhcnxnenxyYXJ8N3opJC9pLnRlc3QoXG4gICAgdXJsLnBhdGhuYW1lXG4gICk7XG59XG5leHBvcnQge1xuICBpc0NvbW1vbkFzc2V0UmVxdWVzdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQ29tbW9uQXNzZXRSZXF1ZXN0Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/isCommonAssetRequest.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/HttpResponse/decorators.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/HttpResponse/decorators.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decorateResponse: () => (/* binding */ decorateResponse),\n/* harmony export */   kSetCookie: () => (/* binding */ kSetCookie),\n/* harmony export */   normalizeResponseInit: () => (/* binding */ normalizeResponseInit)\n/* harmony export */ });\n/* harmony import */ var _bundled_es_modules_statuses__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bundled-es-modules/statuses */ \"(ssr)/./node_modules/@bundled-es-modules/statuses/index-esm.js\");\n/* harmony import */ var headers_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! headers-polyfill */ \"(ssr)/./node_modules/headers-polyfill/lib/index.mjs\");\n\n\nconst { message } = _bundled_es_modules_statuses__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\nconst kSetCookie = Symbol(\"kSetCookie\");\nfunction normalizeResponseInit(init = {}) {\n  const status = init?.status || 200;\n  const statusText = init?.statusText || message[status] || \"\";\n  const headers = new Headers(init?.headers);\n  return {\n    ...init,\n    headers,\n    status,\n    statusText\n  };\n}\nfunction decorateResponse(response, init) {\n  if (init.type) {\n    Object.defineProperty(response, \"type\", {\n      value: init.type,\n      enumerable: true,\n      writable: false\n    });\n  }\n  const responseCookies = init.headers.get(\"set-cookie\");\n  if (responseCookies) {\n    Object.defineProperty(response, kSetCookie, {\n      value: responseCookies,\n      enumerable: false,\n      writable: false\n    });\n    if (typeof document !== \"undefined\") {\n      const responseCookiePairs = headers_polyfill__WEBPACK_IMPORTED_MODULE_1__.Headers.prototype.getSetCookie.call(\n        init.headers\n      );\n      for (const cookieString of responseCookiePairs) {\n        document.cookie = cookieString;\n      }\n    }\n  }\n  return response;\n}\n\n//# sourceMappingURL=decorators.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL0h0dHBSZXNwb25zZS9kZWNvcmF0b3JzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRDtBQUNVO0FBQzlELFFBQVEsVUFBVSxFQUFFLG9FQUFRO0FBQzVCO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esa0NBQWtDLHFEQUFlO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtvbGFzL25pay9pcXVwL25vZGVfbW9kdWxlcy9tc3cvbGliL2NvcmUvdXRpbHMvSHR0cFJlc3BvbnNlL2RlY29yYXRvcnMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdGF0dXNlcyBmcm9tIFwiQGJ1bmRsZWQtZXMtbW9kdWxlcy9zdGF0dXNlc1wiO1xuaW1wb3J0IHsgSGVhZGVycyBhcyBIZWFkZXJzUG9seWZpbGwgfSBmcm9tIFwiaGVhZGVycy1wb2x5ZmlsbFwiO1xuY29uc3QgeyBtZXNzYWdlIH0gPSBzdGF0dXNlcztcbmNvbnN0IGtTZXRDb29raWUgPSBTeW1ib2woXCJrU2V0Q29va2llXCIpO1xuZnVuY3Rpb24gbm9ybWFsaXplUmVzcG9uc2VJbml0KGluaXQgPSB7fSkge1xuICBjb25zdCBzdGF0dXMgPSBpbml0Py5zdGF0dXMgfHwgMjAwO1xuICBjb25zdCBzdGF0dXNUZXh0ID0gaW5pdD8uc3RhdHVzVGV4dCB8fCBtZXNzYWdlW3N0YXR1c10gfHwgXCJcIjtcbiAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKGluaXQ/LmhlYWRlcnMpO1xuICByZXR1cm4ge1xuICAgIC4uLmluaXQsXG4gICAgaGVhZGVycyxcbiAgICBzdGF0dXMsXG4gICAgc3RhdHVzVGV4dFxuICB9O1xufVxuZnVuY3Rpb24gZGVjb3JhdGVSZXNwb25zZShyZXNwb25zZSwgaW5pdCkge1xuICBpZiAoaW5pdC50eXBlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3BvbnNlLCBcInR5cGVcIiwge1xuICAgICAgdmFsdWU6IGluaXQudHlwZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuICBjb25zdCByZXNwb25zZUNvb2tpZXMgPSBpbml0LmhlYWRlcnMuZ2V0KFwic2V0LWNvb2tpZVwiKTtcbiAgaWYgKHJlc3BvbnNlQ29va2llcykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNwb25zZSwga1NldENvb2tpZSwge1xuICAgICAgdmFsdWU6IHJlc3BvbnNlQ29va2llcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY29uc3QgcmVzcG9uc2VDb29raWVQYWlycyA9IEhlYWRlcnNQb2x5ZmlsbC5wcm90b3R5cGUuZ2V0U2V0Q29va2llLmNhbGwoXG4gICAgICAgIGluaXQuaGVhZGVyc1xuICAgICAgKTtcbiAgICAgIGZvciAoY29uc3QgY29va2llU3RyaW5nIG9mIHJlc3BvbnNlQ29va2llUGFpcnMpIHtcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llU3RyaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzcG9uc2U7XG59XG5leHBvcnQge1xuICBkZWNvcmF0ZVJlc3BvbnNlLFxuICBrU2V0Q29va2llLFxuICBub3JtYWxpemVSZXNwb25zZUluaXRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvcmF0b3JzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/HttpResponse/decorators.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/cookieStore.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/cookieStore.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cookieStore: () => (/* binding */ cookieStore)\n/* harmony export */ });\n/* harmony import */ var is_node_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-node-process */ \"(ssr)/./node_modules/is-node-process/lib/index.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var tough_cookie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tough-cookie */ \"(ssr)/./node_modules/msw/node_modules/tough-cookie/dist/index.js\");\n/* harmony import */ var _internal_jsonParse_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/jsonParse.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/jsonParse.mjs\");\n\n\n\n\nclass CookieStore {\n  #storageKey = \"__msw-cookie-store__\";\n  #jar;\n  #memoryStore;\n  constructor() {\n    if (!(0,is_node_process__WEBPACK_IMPORTED_MODULE_0__.isNodeProcess)()) {\n      (0,outvariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(\n        typeof localStorage !== \"undefined\",\n        \"Failed to create a CookieStore: `localStorage` is not available in this environment. This is likely an issue with your environment, which has been detected as browser (or browser-like) environment and must implement global browser APIs correctly.\"\n      );\n    }\n    this.#memoryStore = new tough_cookie__WEBPACK_IMPORTED_MODULE_2__.MemoryCookieStore();\n    this.#memoryStore.idx = this.getCookieStoreIndex();\n    this.#jar = new tough_cookie__WEBPACK_IMPORTED_MODULE_2__.CookieJar(this.#memoryStore);\n  }\n  getCookies(url) {\n    return this.#jar.getCookiesSync(url);\n  }\n  async setCookie(cookieName, url) {\n    await this.#jar.setCookie(cookieName, url);\n    this.persist();\n  }\n  getCookieStoreIndex() {\n    if (typeof localStorage === \"undefined\") {\n      return {};\n    }\n    const cookiesString = localStorage.getItem(this.#storageKey);\n    if (cookiesString == null) {\n      return {};\n    }\n    const rawCookies = (0,_internal_jsonParse_mjs__WEBPACK_IMPORTED_MODULE_3__.jsonParse)(cookiesString);\n    if (rawCookies == null) {\n      return {};\n    }\n    const cookies = {};\n    for (const rawCookie of rawCookies) {\n      const cookie = tough_cookie__WEBPACK_IMPORTED_MODULE_2__.Cookie.fromJSON(rawCookie);\n      if (cookie != null && cookie.domain != null && cookie.path != null) {\n        cookies[cookie.domain] ||= {};\n        cookies[cookie.domain][cookie.path] ||= {};\n        cookies[cookie.domain][cookie.path][cookie.key] = cookie;\n      }\n    }\n    return cookies;\n  }\n  persist() {\n    if (typeof localStorage === \"undefined\") {\n      return;\n    }\n    const data = [];\n    const { idx } = this.#memoryStore;\n    for (const domain in idx) {\n      for (const path in idx[domain]) {\n        for (const key in idx[domain][path]) {\n          data.push(idx[domain][path][key].toJSON());\n        }\n      }\n    }\n    localStorage.setItem(this.#storageKey, JSON.stringify(data));\n  }\n}\nconst cookieStore = new CookieStore();\n\n//# sourceMappingURL=cookieStore.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2Nvb2tpZVN0b3JlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFnRDtBQUNUO0FBS2pCO0FBQytCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDhEQUFhO0FBQ3RCLE1BQU0scURBQVM7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwyREFBaUI7QUFDN0M7QUFDQSxvQkFBb0IsbURBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0VBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixnREFBTTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa29sYXMvbmlrL2lxdXAvbm9kZV9tb2R1bGVzL21zdy9saWIvY29yZS91dGlscy9jb29raWVTdG9yZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb2RlUHJvY2VzcyB9IGZyb20gXCJpcy1ub2RlLXByb2Nlc3NcIjtcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gXCJvdXR2YXJpYW50XCI7XG5pbXBvcnQge1xuICBDb29raWUsXG4gIENvb2tpZUphcixcbiAgTWVtb3J5Q29va2llU3RvcmVcbn0gZnJvbSBcInRvdWdoLWNvb2tpZVwiO1xuaW1wb3J0IHsganNvblBhcnNlIH0gZnJvbSAnLi9pbnRlcm5hbC9qc29uUGFyc2UubWpzJztcbmNsYXNzIENvb2tpZVN0b3JlIHtcbiAgI3N0b3JhZ2VLZXkgPSBcIl9fbXN3LWNvb2tpZS1zdG9yZV9fXCI7XG4gICNqYXI7XG4gICNtZW1vcnlTdG9yZTtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKCFpc05vZGVQcm9jZXNzKCkpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIGxvY2FsU3RvcmFnZSAhPT0gXCJ1bmRlZmluZWRcIixcbiAgICAgICAgXCJGYWlsZWQgdG8gY3JlYXRlIGEgQ29va2llU3RvcmU6IGBsb2NhbFN0b3JhZ2VgIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudC4gVGhpcyBpcyBsaWtlbHkgYW4gaXNzdWUgd2l0aCB5b3VyIGVudmlyb25tZW50LCB3aGljaCBoYXMgYmVlbiBkZXRlY3RlZCBhcyBicm93c2VyIChvciBicm93c2VyLWxpa2UpIGVudmlyb25tZW50IGFuZCBtdXN0IGltcGxlbWVudCBnbG9iYWwgYnJvd3NlciBBUElzIGNvcnJlY3RseS5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy4jbWVtb3J5U3RvcmUgPSBuZXcgTWVtb3J5Q29va2llU3RvcmUoKTtcbiAgICB0aGlzLiNtZW1vcnlTdG9yZS5pZHggPSB0aGlzLmdldENvb2tpZVN0b3JlSW5kZXgoKTtcbiAgICB0aGlzLiNqYXIgPSBuZXcgQ29va2llSmFyKHRoaXMuI21lbW9yeVN0b3JlKTtcbiAgfVxuICBnZXRDb29raWVzKHVybCkge1xuICAgIHJldHVybiB0aGlzLiNqYXIuZ2V0Q29va2llc1N5bmModXJsKTtcbiAgfVxuICBhc3luYyBzZXRDb29raWUoY29va2llTmFtZSwgdXJsKSB7XG4gICAgYXdhaXQgdGhpcy4jamFyLnNldENvb2tpZShjb29raWVOYW1lLCB1cmwpO1xuICAgIHRoaXMucGVyc2lzdCgpO1xuICB9XG4gIGdldENvb2tpZVN0b3JlSW5kZXgoKSB7XG4gICAgaWYgKHR5cGVvZiBsb2NhbFN0b3JhZ2UgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgY29uc3QgY29va2llc1N0cmluZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuI3N0b3JhZ2VLZXkpO1xuICAgIGlmIChjb29raWVzU3RyaW5nID09IG51bGwpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgY29uc3QgcmF3Q29va2llcyA9IGpzb25QYXJzZShjb29raWVzU3RyaW5nKTtcbiAgICBpZiAocmF3Q29va2llcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IGNvb2tpZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHJhd0Nvb2tpZSBvZiByYXdDb29raWVzKSB7XG4gICAgICBjb25zdCBjb29raWUgPSBDb29raWUuZnJvbUpTT04ocmF3Q29va2llKTtcbiAgICAgIGlmIChjb29raWUgIT0gbnVsbCAmJiBjb29raWUuZG9tYWluICE9IG51bGwgJiYgY29va2llLnBhdGggIT0gbnVsbCkge1xuICAgICAgICBjb29raWVzW2Nvb2tpZS5kb21haW5dIHx8PSB7fTtcbiAgICAgICAgY29va2llc1tjb29raWUuZG9tYWluXVtjb29raWUucGF0aF0gfHw9IHt9O1xuICAgICAgICBjb29raWVzW2Nvb2tpZS5kb21haW5dW2Nvb2tpZS5wYXRoXVtjb29raWUua2V5XSA9IGNvb2tpZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvb2tpZXM7XG4gIH1cbiAgcGVyc2lzdCgpIHtcbiAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gW107XG4gICAgY29uc3QgeyBpZHggfSA9IHRoaXMuI21lbW9yeVN0b3JlO1xuICAgIGZvciAoY29uc3QgZG9tYWluIGluIGlkeCkge1xuICAgICAgZm9yIChjb25zdCBwYXRoIGluIGlkeFtkb21haW5dKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGlkeFtkb21haW5dW3BhdGhdKSB7XG4gICAgICAgICAgZGF0YS5wdXNoKGlkeFtkb21haW5dW3BhdGhdW2tleV0udG9KU09OKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuI3N0b3JhZ2VLZXksIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgfVxufVxuY29uc3QgY29va2llU3RvcmUgPSBuZXcgQ29va2llU3RvcmUoKTtcbmV4cG9ydCB7XG4gIGNvb2tpZVN0b3JlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29va2llU3RvcmUubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/cookieStore.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/executeHandlers.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/executeHandlers.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeHandlers: () => (/* binding */ executeHandlers)\n/* harmony export */ });\nconst executeHandlers = async ({\n  request,\n  requestId,\n  handlers,\n  resolutionContext\n}) => {\n  let matchingHandler = null;\n  let result = null;\n  for (const handler of handlers) {\n    result = await handler.run({ request, requestId, resolutionContext });\n    if (result !== null) {\n      matchingHandler = handler;\n    }\n    if (result?.response) {\n      break;\n    }\n  }\n  if (matchingHandler) {\n    return {\n      handler: matchingHandler,\n      parsedResult: result?.parsedResult,\n      response: result?.response\n    };\n  }\n  return null;\n};\n\n//# sourceMappingURL=executeHandlers.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2V4ZWN1dGVIYW5kbGVycy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHVDQUF1QztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtvbGFzL25pay9pcXVwL25vZGVfbW9kdWxlcy9tc3cvbGliL2NvcmUvdXRpbHMvZXhlY3V0ZUhhbmRsZXJzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleGVjdXRlSGFuZGxlcnMgPSBhc3luYyAoe1xuICByZXF1ZXN0LFxuICByZXF1ZXN0SWQsXG4gIGhhbmRsZXJzLFxuICByZXNvbHV0aW9uQ29udGV4dFxufSkgPT4ge1xuICBsZXQgbWF0Y2hpbmdIYW5kbGVyID0gbnVsbDtcbiAgbGV0IHJlc3VsdCA9IG51bGw7XG4gIGZvciAoY29uc3QgaGFuZGxlciBvZiBoYW5kbGVycykge1xuICAgIHJlc3VsdCA9IGF3YWl0IGhhbmRsZXIucnVuKHsgcmVxdWVzdCwgcmVxdWVzdElkLCByZXNvbHV0aW9uQ29udGV4dCB9KTtcbiAgICBpZiAocmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICBtYXRjaGluZ0hhbmRsZXIgPSBoYW5kbGVyO1xuICAgIH1cbiAgICBpZiAocmVzdWx0Py5yZXNwb25zZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChtYXRjaGluZ0hhbmRsZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGFuZGxlcjogbWF0Y2hpbmdIYW5kbGVyLFxuICAgICAgcGFyc2VkUmVzdWx0OiByZXN1bHQ/LnBhcnNlZFJlc3VsdCxcbiAgICAgIHJlc3BvbnNlOiByZXN1bHQ/LnJlc3BvbnNlXG4gICAgfTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5leHBvcnQge1xuICBleGVjdXRlSGFuZGxlcnNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGVjdXRlSGFuZGxlcnMubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/executeHandlers.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/handleRequest.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/handleRequest.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleRequest: () => (/* binding */ handleRequest)\n/* harmony export */ });\n/* harmony import */ var _open_draft_until__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @open-draft/until */ \"(ssr)/./node_modules/@open-draft/until/lib/index.mjs\");\n/* harmony import */ var _executeHandlers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./executeHandlers.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/executeHandlers.mjs\");\n/* harmony import */ var _request_onUnhandledRequest_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./request/onUnhandledRequest.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/request/onUnhandledRequest.mjs\");\n/* harmony import */ var _request_storeResponseCookies_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./request/storeResponseCookies.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/request/storeResponseCookies.mjs\");\n\n\n\n\nasync function handleRequest(request, requestId, handlers, options, emitter, handleRequestOptions) {\n  emitter.emit(\"request:start\", { request, requestId });\n  if (request.headers.get(\"accept\")?.includes(\"msw/passthrough\")) {\n    emitter.emit(\"request:end\", { request, requestId });\n    handleRequestOptions?.onPassthroughResponse?.(request);\n    return;\n  }\n  const lookupResult = await (0,_open_draft_until__WEBPACK_IMPORTED_MODULE_0__.until)(() => {\n    return (0,_executeHandlers_mjs__WEBPACK_IMPORTED_MODULE_1__.executeHandlers)({\n      request,\n      requestId,\n      handlers,\n      resolutionContext: handleRequestOptions?.resolutionContext\n    });\n  });\n  if (lookupResult.error) {\n    emitter.emit(\"unhandledException\", {\n      error: lookupResult.error,\n      request,\n      requestId\n    });\n    throw lookupResult.error;\n  }\n  if (!lookupResult.data) {\n    await (0,_request_onUnhandledRequest_mjs__WEBPACK_IMPORTED_MODULE_2__.onUnhandledRequest)(request, options.onUnhandledRequest);\n    emitter.emit(\"request:unhandled\", { request, requestId });\n    emitter.emit(\"request:end\", { request, requestId });\n    handleRequestOptions?.onPassthroughResponse?.(request);\n    return;\n  }\n  const { response } = lookupResult.data;\n  if (!response) {\n    emitter.emit(\"request:end\", { request, requestId });\n    handleRequestOptions?.onPassthroughResponse?.(request);\n    return;\n  }\n  if (response.status === 302 && response.headers.get(\"x-msw-intention\") === \"passthrough\") {\n    emitter.emit(\"request:end\", { request, requestId });\n    handleRequestOptions?.onPassthroughResponse?.(request);\n    return;\n  }\n  await (0,_request_storeResponseCookies_mjs__WEBPACK_IMPORTED_MODULE_3__.storeResponseCookies)(request, response);\n  emitter.emit(\"request:match\", { request, requestId });\n  const requiredLookupResult = lookupResult.data;\n  handleRequestOptions?.onMockedResponse?.(response, requiredLookupResult);\n  emitter.emit(\"request:end\", { request, requestId });\n  return response;\n}\n\n//# sourceMappingURL=handleRequest.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2hhbmRsZVJlcXVlc3QubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTBDO0FBQ2M7QUFDYztBQUNJO0FBQzFFO0FBQ0Esa0NBQWtDLG9CQUFvQjtBQUN0RDtBQUNBLGtDQUFrQyxvQkFBb0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHdEQUFLO0FBQ2xDLFdBQVcscUVBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsVUFBVSxtRkFBa0I7QUFDNUIsd0NBQXdDLG9CQUFvQjtBQUM1RCxrQ0FBa0Msb0JBQW9CO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLFVBQVUsV0FBVztBQUNyQjtBQUNBLGtDQUFrQyxvQkFBb0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msb0JBQW9CO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUZBQW9CO0FBQzVCLGtDQUFrQyxvQkFBb0I7QUFDdEQ7QUFDQTtBQUNBLGdDQUFnQyxvQkFBb0I7QUFDcEQ7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtvbGFzL25pay9pcXVwL25vZGVfbW9kdWxlcy9tc3cvbGliL2NvcmUvdXRpbHMvaGFuZGxlUmVxdWVzdC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW50aWwgfSBmcm9tIFwiQG9wZW4tZHJhZnQvdW50aWxcIjtcbmltcG9ydCB7IGV4ZWN1dGVIYW5kbGVycyB9IGZyb20gJy4vZXhlY3V0ZUhhbmRsZXJzLm1qcyc7XG5pbXBvcnQgeyBvblVuaGFuZGxlZFJlcXVlc3QgfSBmcm9tICcuL3JlcXVlc3Qvb25VbmhhbmRsZWRSZXF1ZXN0Lm1qcyc7XG5pbXBvcnQgeyBzdG9yZVJlc3BvbnNlQ29va2llcyB9IGZyb20gJy4vcmVxdWVzdC9zdG9yZVJlc3BvbnNlQ29va2llcy5tanMnO1xuYXN5bmMgZnVuY3Rpb24gaGFuZGxlUmVxdWVzdChyZXF1ZXN0LCByZXF1ZXN0SWQsIGhhbmRsZXJzLCBvcHRpb25zLCBlbWl0dGVyLCBoYW5kbGVSZXF1ZXN0T3B0aW9ucykge1xuICBlbWl0dGVyLmVtaXQoXCJyZXF1ZXN0OnN0YXJ0XCIsIHsgcmVxdWVzdCwgcmVxdWVzdElkIH0pO1xuICBpZiAocmVxdWVzdC5oZWFkZXJzLmdldChcImFjY2VwdFwiKT8uaW5jbHVkZXMoXCJtc3cvcGFzc3Rocm91Z2hcIikpIHtcbiAgICBlbWl0dGVyLmVtaXQoXCJyZXF1ZXN0OmVuZFwiLCB7IHJlcXVlc3QsIHJlcXVlc3RJZCB9KTtcbiAgICBoYW5kbGVSZXF1ZXN0T3B0aW9ucz8ub25QYXNzdGhyb3VnaFJlc3BvbnNlPy4ocmVxdWVzdCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGxvb2t1cFJlc3VsdCA9IGF3YWl0IHVudGlsKCgpID0+IHtcbiAgICByZXR1cm4gZXhlY3V0ZUhhbmRsZXJzKHtcbiAgICAgIHJlcXVlc3QsXG4gICAgICByZXF1ZXN0SWQsXG4gICAgICBoYW5kbGVycyxcbiAgICAgIHJlc29sdXRpb25Db250ZXh0OiBoYW5kbGVSZXF1ZXN0T3B0aW9ucz8ucmVzb2x1dGlvbkNvbnRleHRcbiAgICB9KTtcbiAgfSk7XG4gIGlmIChsb29rdXBSZXN1bHQuZXJyb3IpIHtcbiAgICBlbWl0dGVyLmVtaXQoXCJ1bmhhbmRsZWRFeGNlcHRpb25cIiwge1xuICAgICAgZXJyb3I6IGxvb2t1cFJlc3VsdC5lcnJvcixcbiAgICAgIHJlcXVlc3QsXG4gICAgICByZXF1ZXN0SWRcbiAgICB9KTtcbiAgICB0aHJvdyBsb29rdXBSZXN1bHQuZXJyb3I7XG4gIH1cbiAgaWYgKCFsb29rdXBSZXN1bHQuZGF0YSkge1xuICAgIGF3YWl0IG9uVW5oYW5kbGVkUmVxdWVzdChyZXF1ZXN0LCBvcHRpb25zLm9uVW5oYW5kbGVkUmVxdWVzdCk7XG4gICAgZW1pdHRlci5lbWl0KFwicmVxdWVzdDp1bmhhbmRsZWRcIiwgeyByZXF1ZXN0LCByZXF1ZXN0SWQgfSk7XG4gICAgZW1pdHRlci5lbWl0KFwicmVxdWVzdDplbmRcIiwgeyByZXF1ZXN0LCByZXF1ZXN0SWQgfSk7XG4gICAgaGFuZGxlUmVxdWVzdE9wdGlvbnM/Lm9uUGFzc3Rocm91Z2hSZXNwb25zZT8uKHJlcXVlc3QpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB7IHJlc3BvbnNlIH0gPSBsb29rdXBSZXN1bHQuZGF0YTtcbiAgaWYgKCFyZXNwb25zZSkge1xuICAgIGVtaXR0ZXIuZW1pdChcInJlcXVlc3Q6ZW5kXCIsIHsgcmVxdWVzdCwgcmVxdWVzdElkIH0pO1xuICAgIGhhbmRsZVJlcXVlc3RPcHRpb25zPy5vblBhc3N0aHJvdWdoUmVzcG9uc2U/LihyZXF1ZXN0KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMzAyICYmIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwieC1tc3ctaW50ZW50aW9uXCIpID09PSBcInBhc3N0aHJvdWdoXCIpIHtcbiAgICBlbWl0dGVyLmVtaXQoXCJyZXF1ZXN0OmVuZFwiLCB7IHJlcXVlc3QsIHJlcXVlc3RJZCB9KTtcbiAgICBoYW5kbGVSZXF1ZXN0T3B0aW9ucz8ub25QYXNzdGhyb3VnaFJlc3BvbnNlPy4ocmVxdWVzdCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGF3YWl0IHN0b3JlUmVzcG9uc2VDb29raWVzKHJlcXVlc3QsIHJlc3BvbnNlKTtcbiAgZW1pdHRlci5lbWl0KFwicmVxdWVzdDptYXRjaFwiLCB7IHJlcXVlc3QsIHJlcXVlc3RJZCB9KTtcbiAgY29uc3QgcmVxdWlyZWRMb29rdXBSZXN1bHQgPSBsb29rdXBSZXN1bHQuZGF0YTtcbiAgaGFuZGxlUmVxdWVzdE9wdGlvbnM/Lm9uTW9ja2VkUmVzcG9uc2U/LihyZXNwb25zZSwgcmVxdWlyZWRMb29rdXBSZXN1bHQpO1xuICBlbWl0dGVyLmVtaXQoXCJyZXF1ZXN0OmVuZFwiLCB7IHJlcXVlc3QsIHJlcXVlc3RJZCB9KTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuZXhwb3J0IHtcbiAgaGFuZGxlUmVxdWVzdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhbmRsZVJlcXVlc3QubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/handleRequest.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/internal/Disposable.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/internal/Disposable.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Disposable: () => (/* binding */ Disposable)\n/* harmony export */ });\nclass Disposable {\n  subscriptions = [];\n  dispose() {\n    let subscription;\n    while (subscription = this.subscriptions.shift()) {\n      subscription();\n    }\n  }\n}\n\n//# sourceMappingURL=Disposable.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL0Rpc3Bvc2FibGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL0Rpc3Bvc2FibGUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIERpc3Bvc2FibGUge1xuICBzdWJzY3JpcHRpb25zID0gW107XG4gIGRpc3Bvc2UoKSB7XG4gICAgbGV0IHN1YnNjcmlwdGlvbjtcbiAgICB3aGlsZSAoc3Vic2NyaXB0aW9uID0gdGhpcy5zdWJzY3JpcHRpb25zLnNoaWZ0KCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbigpO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IHtcbiAgRGlzcG9zYWJsZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURpc3Bvc2FibGUubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/internal/Disposable.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/internal/devUtils.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/internal/devUtils.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InternalError: () => (/* binding */ InternalError),\n/* harmony export */   devUtils: () => (/* binding */ devUtils)\n/* harmony export */ });\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n\nconst LIBRARY_PREFIX = \"[MSW]\";\nfunction formatMessage(message, ...positionals) {\n  const interpolatedMessage = (0,outvariant__WEBPACK_IMPORTED_MODULE_0__.format)(message, ...positionals);\n  return `${LIBRARY_PREFIX} ${interpolatedMessage}`;\n}\nfunction warn(message, ...positionals) {\n  console.warn(formatMessage(message, ...positionals));\n}\nfunction error(message, ...positionals) {\n  console.error(formatMessage(message, ...positionals));\n}\nconst devUtils = {\n  formatMessage,\n  warn,\n  error\n};\nclass InternalError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"InternalError\";\n  }\n}\n\n//# sourceMappingURL=devUtils.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL2RldlV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0M7QUFDcEM7QUFDQTtBQUNBLDhCQUE4QixrREFBTTtBQUNwQyxZQUFZLGdCQUFnQixFQUFFLG9CQUFvQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL2RldlV0aWxzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JtYXQgfSBmcm9tIFwib3V0dmFyaWFudFwiO1xuY29uc3QgTElCUkFSWV9QUkVGSVggPSBcIltNU1ddXCI7XG5mdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG1lc3NhZ2UsIC4uLnBvc2l0aW9uYWxzKSB7XG4gIGNvbnN0IGludGVycG9sYXRlZE1lc3NhZ2UgPSBmb3JtYXQobWVzc2FnZSwgLi4ucG9zaXRpb25hbHMpO1xuICByZXR1cm4gYCR7TElCUkFSWV9QUkVGSVh9ICR7aW50ZXJwb2xhdGVkTWVzc2FnZX1gO1xufVxuZnVuY3Rpb24gd2FybihtZXNzYWdlLCAuLi5wb3NpdGlvbmFscykge1xuICBjb25zb2xlLndhcm4oZm9ybWF0TWVzc2FnZShtZXNzYWdlLCAuLi5wb3NpdGlvbmFscykpO1xufVxuZnVuY3Rpb24gZXJyb3IobWVzc2FnZSwgLi4ucG9zaXRpb25hbHMpIHtcbiAgY29uc29sZS5lcnJvcihmb3JtYXRNZXNzYWdlKG1lc3NhZ2UsIC4uLnBvc2l0aW9uYWxzKSk7XG59XG5jb25zdCBkZXZVdGlscyA9IHtcbiAgZm9ybWF0TWVzc2FnZSxcbiAgd2FybixcbiAgZXJyb3Jcbn07XG5jbGFzcyBJbnRlcm5hbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJJbnRlcm5hbEVycm9yXCI7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIEludGVybmFsRXJyb3IsXG4gIGRldlV0aWxzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGV2VXRpbHMubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/internal/devUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/internal/getCallFrame.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/internal/getCallFrame.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCallFrame: () => (/* binding */ getCallFrame)\n/* harmony export */ });\nconst SOURCE_FRAME = /[\\/\\\\]msw[\\/\\\\]src[\\/\\\\](.+)/;\nconst BUILD_FRAME = /(node_modules)?[\\/\\\\]lib[\\/\\\\](core|browser|node|native|iife)[\\/\\\\]|^[^\\/\\\\]*$/;\nfunction getCallFrame(error) {\n  const stack = error.stack;\n  if (!stack) {\n    return;\n  }\n  const frames = stack.split(\"\\n\").slice(1);\n  const declarationFrame = frames.find((frame) => {\n    return !(SOURCE_FRAME.test(frame) || BUILD_FRAME.test(frame));\n  });\n  if (!declarationFrame) {\n    return;\n  }\n  const declarationPath = declarationFrame.replace(/\\s*at [^()]*\\(([^)]+)\\)/, \"$1\").replace(/^@/, \"\");\n  return declarationPath;\n}\n\n//# sourceMappingURL=getCallFrame.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL2dldENhbGxGcmFtZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtvbGFzL25pay9pcXVwL25vZGVfbW9kdWxlcy9tc3cvbGliL2NvcmUvdXRpbHMvaW50ZXJuYWwvZ2V0Q2FsbEZyYW1lLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTT1VSQ0VfRlJBTUUgPSAvW1xcL1xcXFxdbXN3W1xcL1xcXFxdc3JjW1xcL1xcXFxdKC4rKS87XG5jb25zdCBCVUlMRF9GUkFNRSA9IC8obm9kZV9tb2R1bGVzKT9bXFwvXFxcXF1saWJbXFwvXFxcXF0oY29yZXxicm93c2VyfG5vZGV8bmF0aXZlfGlpZmUpW1xcL1xcXFxdfF5bXlxcL1xcXFxdKiQvO1xuZnVuY3Rpb24gZ2V0Q2FsbEZyYW1lKGVycm9yKSB7XG4gIGNvbnN0IHN0YWNrID0gZXJyb3Iuc3RhY2s7XG4gIGlmICghc3RhY2spIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZnJhbWVzID0gc3RhY2suc3BsaXQoXCJcXG5cIikuc2xpY2UoMSk7XG4gIGNvbnN0IGRlY2xhcmF0aW9uRnJhbWUgPSBmcmFtZXMuZmluZCgoZnJhbWUpID0+IHtcbiAgICByZXR1cm4gIShTT1VSQ0VfRlJBTUUudGVzdChmcmFtZSkgfHwgQlVJTERfRlJBTUUudGVzdChmcmFtZSkpO1xuICB9KTtcbiAgaWYgKCFkZWNsYXJhdGlvbkZyYW1lKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGRlY2xhcmF0aW9uUGF0aCA9IGRlY2xhcmF0aW9uRnJhbWUucmVwbGFjZSgvXFxzKmF0IFteKCldKlxcKChbXildKylcXCkvLCBcIiQxXCIpLnJlcGxhY2UoL15ALywgXCJcIik7XG4gIHJldHVybiBkZWNsYXJhdGlvblBhdGg7XG59XG5leHBvcnQge1xuICBnZXRDYWxsRnJhbWVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRDYWxsRnJhbWUubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/internal/getCallFrame.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/internal/isHandlerKind.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/internal/isHandlerKind.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHandlerKind: () => (/* binding */ isHandlerKind)\n/* harmony export */ });\nfunction isHandlerKind(kind) {\n  return (input) => {\n    return input != null && typeof input === \"object\" && \"__kind\" in input && input.__kind === kind;\n  };\n}\n\n//# sourceMappingURL=isHandlerKind.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL2lzSGFuZGxlcktpbmQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa29sYXMvbmlrL2lxdXAvbm9kZV9tb2R1bGVzL21zdy9saWIvY29yZS91dGlscy9pbnRlcm5hbC9pc0hhbmRsZXJLaW5kLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc0hhbmRsZXJLaW5kKGtpbmQpIHtcbiAgcmV0dXJuIChpbnB1dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dCAhPSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJiBcIl9fa2luZFwiIGluIGlucHV0ICYmIGlucHV0Ll9fa2luZCA9PT0ga2luZDtcbiAgfTtcbn1cbmV4cG9ydCB7XG4gIGlzSGFuZGxlcktpbmRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0hhbmRsZXJLaW5kLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/internal/isHandlerKind.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/internal/isIterable.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/internal/isIterable.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isIterable: () => (/* binding */ isIterable)\n/* harmony export */ });\nfunction isIterable(fn) {\n  if (!fn) {\n    return false;\n  }\n  return Reflect.has(fn, Symbol.iterator) || Reflect.has(fn, Symbol.asyncIterator);\n}\n\n//# sourceMappingURL=isIterable.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL2lzSXRlcmFibGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL2lzSXRlcmFibGUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzSXRlcmFibGUoZm4pIHtcbiAgaWYgKCFmbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gUmVmbGVjdC5oYXMoZm4sIFN5bWJvbC5pdGVyYXRvcikgfHwgUmVmbGVjdC5oYXMoZm4sIFN5bWJvbC5hc3luY0l0ZXJhdG9yKTtcbn1cbmV4cG9ydCB7XG4gIGlzSXRlcmFibGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/internal/isIterable.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/internal/isObject.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/internal/isObject.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObject: () => (/* binding */ isObject)\n/* harmony export */ });\nfunction isObject(value) {\n  return value != null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n//# sourceMappingURL=isObject.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL2lzT2JqZWN0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa29sYXMvbmlrL2lxdXAvbm9kZV9tb2R1bGVzL21zdy9saWIvY29yZS91dGlscy9pbnRlcm5hbC9pc09iamVjdC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbmV4cG9ydCB7XG4gIGlzT2JqZWN0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNPYmplY3QubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/internal/isObject.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/internal/isStringEqual.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/internal/isStringEqual.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isStringEqual: () => (/* binding */ isStringEqual)\n/* harmony export */ });\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\n\n//# sourceMappingURL=isStringEqual.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL2lzU3RyaW5nRXF1YWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL2lzU3RyaW5nRXF1YWwubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzU3RyaW5nRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkge1xuICByZXR1cm4gYWN0dWFsLnRvTG93ZXJDYXNlKCkgPT09IGV4cGVjdGVkLnRvTG93ZXJDYXNlKCk7XG59XG5leHBvcnQge1xuICBpc1N0cmluZ0VxdWFsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTdHJpbmdFcXVhbC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/internal/isStringEqual.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/internal/jsonParse.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/internal/jsonParse.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsonParse: () => (/* binding */ jsonParse)\n/* harmony export */ });\nfunction jsonParse(value) {\n  try {\n    return JSON.parse(value);\n  } catch {\n    return void 0;\n  }\n}\n\n//# sourceMappingURL=jsonParse.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL2pzb25QYXJzZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL2pzb25QYXJzZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24ganNvblBhcnNlKHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG59XG5leHBvcnQge1xuICBqc29uUGFyc2Vcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29uUGFyc2UubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/internal/jsonParse.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/internal/mergeRight.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/internal/mergeRight.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeRight: () => (/* binding */ mergeRight)\n/* harmony export */ });\n/* harmony import */ var _isObject_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/isObject.mjs\");\n\nfunction mergeRight(left, right) {\n  return Object.entries(right).reduce(\n    (result, [key, rightValue]) => {\n      const leftValue = result[key];\n      if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n        result[key] = leftValue.concat(rightValue);\n        return result;\n      }\n      if ((0,_isObject_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(leftValue) && (0,_isObject_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(rightValue)) {\n        result[key] = mergeRight(leftValue, rightValue);\n        return result;\n      }\n      result[key] = rightValue;\n      return result;\n    },\n    Object.assign({}, left)\n  );\n}\n\n//# sourceMappingURL=mergeRight.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL21lcmdlUmlnaHQubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHVEQUFRLGVBQWUsdURBQVE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxvQkFBb0I7QUFDcEI7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtvbGFzL25pay9pcXVwL25vZGVfbW9kdWxlcy9tc3cvbGliL2NvcmUvdXRpbHMvaW50ZXJuYWwvbWVyZ2VSaWdodC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuL2lzT2JqZWN0Lm1qcyc7XG5mdW5jdGlvbiBtZXJnZVJpZ2h0KGxlZnQsIHJpZ2h0KSB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhyaWdodCkucmVkdWNlKFxuICAgIChyZXN1bHQsIFtrZXksIHJpZ2h0VmFsdWVdKSA9PiB7XG4gICAgICBjb25zdCBsZWZ0VmFsdWUgPSByZXN1bHRba2V5XTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGxlZnRWYWx1ZSkgJiYgQXJyYXkuaXNBcnJheShyaWdodFZhbHVlKSkge1xuICAgICAgICByZXN1bHRba2V5XSA9IGxlZnRWYWx1ZS5jb25jYXQocmlnaHRWYWx1ZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QobGVmdFZhbHVlKSAmJiBpc09iamVjdChyaWdodFZhbHVlKSkge1xuICAgICAgICByZXN1bHRba2V5XSA9IG1lcmdlUmlnaHQobGVmdFZhbHVlLCByaWdodFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJlc3VsdFtrZXldID0gcmlnaHRWYWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBPYmplY3QuYXNzaWduKHt9LCBsZWZ0KVxuICApO1xufVxuZXhwb3J0IHtcbiAgbWVyZ2VSaWdodFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlUmlnaHQubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/internal/mergeRight.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/internal/pipeEvents.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/internal/pipeEvents.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pipeEvents: () => (/* binding */ pipeEvents)\n/* harmony export */ });\nfunction pipeEvents(source, destination) {\n  const rawEmit = source.emit;\n  if (rawEmit._isPiped) {\n    return;\n  }\n  const sourceEmit = function sourceEmit2(event, ...data) {\n    destination.emit(event, ...data);\n    return rawEmit.call(this, event, ...data);\n  };\n  sourceEmit._isPiped = true;\n  source.emit = sourceEmit;\n}\n\n//# sourceMappingURL=pipeEvents.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL3BpcGVFdmVudHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL3BpcGVFdmVudHMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHBpcGVFdmVudHMoc291cmNlLCBkZXN0aW5hdGlvbikge1xuICBjb25zdCByYXdFbWl0ID0gc291cmNlLmVtaXQ7XG4gIGlmIChyYXdFbWl0Ll9pc1BpcGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHNvdXJjZUVtaXQgPSBmdW5jdGlvbiBzb3VyY2VFbWl0MihldmVudCwgLi4uZGF0YSkge1xuICAgIGRlc3RpbmF0aW9uLmVtaXQoZXZlbnQsIC4uLmRhdGEpO1xuICAgIHJldHVybiByYXdFbWl0LmNhbGwodGhpcywgZXZlbnQsIC4uLmRhdGEpO1xuICB9O1xuICBzb3VyY2VFbWl0Ll9pc1BpcGVkID0gdHJ1ZTtcbiAgc291cmNlLmVtaXQgPSBzb3VyY2VFbWl0O1xufVxuZXhwb3J0IHtcbiAgcGlwZUV2ZW50c1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGVFdmVudHMubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/internal/pipeEvents.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/internal/toReadonlyArray.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/internal/toReadonlyArray.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toReadonlyArray: () => (/* binding */ toReadonlyArray)\n/* harmony export */ });\nfunction toReadonlyArray(source) {\n  const clone = [...source];\n  Object.freeze(clone);\n  return clone;\n}\n\n//# sourceMappingURL=toReadonlyArray.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL3RvUmVhZG9ubHlBcnJheS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2ludGVybmFsL3RvUmVhZG9ubHlBcnJheS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gdG9SZWFkb25seUFycmF5KHNvdXJjZSkge1xuICBjb25zdCBjbG9uZSA9IFsuLi5zb3VyY2VdO1xuICBPYmplY3QuZnJlZXplKGNsb25lKTtcbiAgcmV0dXJuIGNsb25lO1xufVxuZXhwb3J0IHtcbiAgdG9SZWFkb25seUFycmF5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9SZWFkb25seUFycmF5Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/internal/toReadonlyArray.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/logging/getStatusCodeColor.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/logging/getStatusCodeColor.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StatusCodeColor: () => (/* binding */ StatusCodeColor),\n/* harmony export */   getStatusCodeColor: () => (/* binding */ getStatusCodeColor)\n/* harmony export */ });\nvar StatusCodeColor = /* @__PURE__ */ ((StatusCodeColor2) => {\n  StatusCodeColor2[\"Success\"] = \"#69AB32\";\n  StatusCodeColor2[\"Warning\"] = \"#F0BB4B\";\n  StatusCodeColor2[\"Danger\"] = \"#E95F5D\";\n  return StatusCodeColor2;\n})(StatusCodeColor || {});\nfunction getStatusCodeColor(status) {\n  if (status < 300) {\n    return \"#69AB32\" /* Success */;\n  }\n  if (status < 400) {\n    return \"#F0BB4B\" /* Warning */;\n  }\n  return \"#E95F5D\" /* Danger */;\n}\n\n//# sourceMappingURL=getStatusCodeColor.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2xvZ2dpbmcvZ2V0U3RhdHVzQ29kZUNvbG9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHVCQUF1QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2xvZ2dpbmcvZ2V0U3RhdHVzQ29kZUNvbG9yLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RhdHVzQ29kZUNvbG9yID0gLyogQF9fUFVSRV9fICovICgoU3RhdHVzQ29kZUNvbG9yMikgPT4ge1xuICBTdGF0dXNDb2RlQ29sb3IyW1wiU3VjY2Vzc1wiXSA9IFwiIzY5QUIzMlwiO1xuICBTdGF0dXNDb2RlQ29sb3IyW1wiV2FybmluZ1wiXSA9IFwiI0YwQkI0QlwiO1xuICBTdGF0dXNDb2RlQ29sb3IyW1wiRGFuZ2VyXCJdID0gXCIjRTk1RjVEXCI7XG4gIHJldHVybiBTdGF0dXNDb2RlQ29sb3IyO1xufSkoU3RhdHVzQ29kZUNvbG9yIHx8IHt9KTtcbmZ1bmN0aW9uIGdldFN0YXR1c0NvZGVDb2xvcihzdGF0dXMpIHtcbiAgaWYgKHN0YXR1cyA8IDMwMCkge1xuICAgIHJldHVybiBcIiM2OUFCMzJcIiAvKiBTdWNjZXNzICovO1xuICB9XG4gIGlmIChzdGF0dXMgPCA0MDApIHtcbiAgICByZXR1cm4gXCIjRjBCQjRCXCIgLyogV2FybmluZyAqLztcbiAgfVxuICByZXR1cm4gXCIjRTk1RjVEXCIgLyogRGFuZ2VyICovO1xufVxuZXhwb3J0IHtcbiAgU3RhdHVzQ29kZUNvbG9yLFxuICBnZXRTdGF0dXNDb2RlQ29sb3Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRTdGF0dXNDb2RlQ29sb3IubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/logging/getStatusCodeColor.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/logging/getTimestamp.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/logging/getTimestamp.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTimestamp: () => (/* binding */ getTimestamp)\n/* harmony export */ });\nfunction getTimestamp(options) {\n  const now = /* @__PURE__ */ new Date();\n  const timestamp = `${now.getHours().toString().padStart(2, \"0\")}:${now.getMinutes().toString().padStart(2, \"0\")}:${now.getSeconds().toString().padStart(2, \"0\")}`;\n  if (options?.milliseconds) {\n    return `${timestamp}.${now.getMilliseconds().toString().padStart(3, \"0\")}`;\n  }\n  return timestamp;\n}\n\n//# sourceMappingURL=getTimestamp.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2xvZ2dpbmcvZ2V0VGltZXN0YW1wLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBLHVCQUF1QiwyQ0FBMkMsR0FBRyw2Q0FBNkMsR0FBRyw2Q0FBNkM7QUFDbEs7QUFDQSxjQUFjLFVBQVUsR0FBRyxrREFBa0Q7QUFDN0U7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa29sYXMvbmlrL2lxdXAvbm9kZV9tb2R1bGVzL21zdy9saWIvY29yZS91dGlscy9sb2dnaW5nL2dldFRpbWVzdGFtcC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0VGltZXN0YW1wKG9wdGlvbnMpIHtcbiAgY29uc3Qgbm93ID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCk7XG4gIGNvbnN0IHRpbWVzdGFtcCA9IGAke25vdy5nZXRIb3VycygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpfToke25vdy5nZXRNaW51dGVzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIil9OiR7bm93LmdldFNlY29uZHMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKX1gO1xuICBpZiAob3B0aW9ucz8ubWlsbGlzZWNvbmRzKSB7XG4gICAgcmV0dXJuIGAke3RpbWVzdGFtcH0uJHtub3cuZ2V0TWlsbGlzZWNvbmRzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgzLCBcIjBcIil9YDtcbiAgfVxuICByZXR1cm4gdGltZXN0YW1wO1xufVxuZXhwb3J0IHtcbiAgZ2V0VGltZXN0YW1wXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VGltZXN0YW1wLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/logging/getTimestamp.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/logging/serializeRequest.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/logging/serializeRequest.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializeRequest: () => (/* binding */ serializeRequest)\n/* harmony export */ });\nasync function serializeRequest(request) {\n  const requestClone = request.clone();\n  const requestText = await requestClone.text();\n  return {\n    url: new URL(request.url),\n    method: request.method,\n    headers: Object.fromEntries(request.headers.entries()),\n    body: requestText\n  };\n}\n\n//# sourceMappingURL=serializeRequest.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2xvZ2dpbmcvc2VyaWFsaXplUmVxdWVzdC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa29sYXMvbmlrL2lxdXAvbm9kZV9tb2R1bGVzL21zdy9saWIvY29yZS91dGlscy9sb2dnaW5nL3NlcmlhbGl6ZVJlcXVlc3QubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImFzeW5jIGZ1bmN0aW9uIHNlcmlhbGl6ZVJlcXVlc3QocmVxdWVzdCkge1xuICBjb25zdCByZXF1ZXN0Q2xvbmUgPSByZXF1ZXN0LmNsb25lKCk7XG4gIGNvbnN0IHJlcXVlc3RUZXh0ID0gYXdhaXQgcmVxdWVzdENsb25lLnRleHQoKTtcbiAgcmV0dXJuIHtcbiAgICB1cmw6IG5ldyBVUkwocmVxdWVzdC51cmwpLFxuICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgaGVhZGVyczogT2JqZWN0LmZyb21FbnRyaWVzKHJlcXVlc3QuaGVhZGVycy5lbnRyaWVzKCkpLFxuICAgIGJvZHk6IHJlcXVlc3RUZXh0XG4gIH07XG59XG5leHBvcnQge1xuICBzZXJpYWxpemVSZXF1ZXN0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VyaWFsaXplUmVxdWVzdC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/logging/serializeRequest.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/logging/serializeResponse.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/logging/serializeResponse.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializeResponse: () => (/* binding */ serializeResponse)\n/* harmony export */ });\n/* harmony import */ var _bundled_es_modules_statuses__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bundled-es-modules/statuses */ \"(ssr)/./node_modules/@bundled-es-modules/statuses/index-esm.js\");\n\nconst { message } = _bundled_es_modules_statuses__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\nasync function serializeResponse(response) {\n  const responseClone = response.clone();\n  const responseText = await responseClone.text();\n  const responseStatus = responseClone.status || 200;\n  const responseStatusText = responseClone.statusText || message[responseStatus] || \"OK\";\n  return {\n    status: responseStatus,\n    statusText: responseStatusText,\n    headers: Object.fromEntries(responseClone.headers.entries()),\n    body: responseText\n  };\n}\n\n//# sourceMappingURL=serializeResponse.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL2xvZ2dpbmcvc2VyaWFsaXplUmVzcG9uc2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9EO0FBQ3BELFFBQVEsVUFBVSxFQUFFLG9FQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtvbGFzL25pay9pcXVwL25vZGVfbW9kdWxlcy9tc3cvbGliL2NvcmUvdXRpbHMvbG9nZ2luZy9zZXJpYWxpemVSZXNwb25zZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0YXR1c2VzIGZyb20gXCJAYnVuZGxlZC1lcy1tb2R1bGVzL3N0YXR1c2VzXCI7XG5jb25zdCB7IG1lc3NhZ2UgfSA9IHN0YXR1c2VzO1xuYXN5bmMgZnVuY3Rpb24gc2VyaWFsaXplUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgY29uc3QgcmVzcG9uc2VDbG9uZSA9IHJlc3BvbnNlLmNsb25lKCk7XG4gIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHJlc3BvbnNlQ2xvbmUudGV4dCgpO1xuICBjb25zdCByZXNwb25zZVN0YXR1cyA9IHJlc3BvbnNlQ2xvbmUuc3RhdHVzIHx8IDIwMDtcbiAgY29uc3QgcmVzcG9uc2VTdGF0dXNUZXh0ID0gcmVzcG9uc2VDbG9uZS5zdGF0dXNUZXh0IHx8IG1lc3NhZ2VbcmVzcG9uc2VTdGF0dXNdIHx8IFwiT0tcIjtcbiAgcmV0dXJuIHtcbiAgICBzdGF0dXM6IHJlc3BvbnNlU3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlU3RhdHVzVGV4dCxcbiAgICBoZWFkZXJzOiBPYmplY3QuZnJvbUVudHJpZXMocmVzcG9uc2VDbG9uZS5oZWFkZXJzLmVudHJpZXMoKSksXG4gICAgYm9keTogcmVzcG9uc2VUZXh0XG4gIH07XG59XG5leHBvcnQge1xuICBzZXJpYWxpemVSZXNwb25zZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcmlhbGl6ZVJlc3BvbnNlLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/logging/serializeResponse.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/matching/matchRequestUrl.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/matching/matchRequestUrl.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coercePath: () => (/* binding */ coercePath),\n/* harmony export */   isPath: () => (/* binding */ isPath),\n/* harmony export */   matchRequestUrl: () => (/* binding */ matchRequestUrl)\n/* harmony export */ });\n/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path-to-regexp */ \"(ssr)/./node_modules/path-to-regexp/dist.es2015/index.js\");\n/* harmony import */ var _mswjs_interceptors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mswjs/interceptors */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/node/index.mjs\");\n/* harmony import */ var _normalizePath_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./normalizePath.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/matching/normalizePath.mjs\");\n\n\n\nfunction coercePath(path) {\n  return path.replace(\n    /([:a-zA-Z_-]*)(\\*{1,2})+/g,\n    (_, parameterName, wildcard) => {\n      const expression = \"(.*)\";\n      if (!parameterName) {\n        return expression;\n      }\n      return parameterName.startsWith(\":\") ? `${parameterName}${wildcard}` : `${parameterName}${expression}`;\n    }\n  ).replace(/([^\\/])(:)(?=\\d+)/, \"$1\\\\$2\").replace(/^([^\\/]+)(:)(?=\\/\\/)/, \"$1\\\\$2\");\n}\nfunction matchRequestUrl(url, path, baseUrl) {\n  const normalizedPath = (0,_normalizePath_mjs__WEBPACK_IMPORTED_MODULE_1__.normalizePath)(path, baseUrl);\n  const cleanPath = typeof normalizedPath === \"string\" ? coercePath(normalizedPath) : normalizedPath;\n  const cleanUrl = (0,_mswjs_interceptors__WEBPACK_IMPORTED_MODULE_0__.getCleanUrl)(url);\n  const result = (0,path_to_regexp__WEBPACK_IMPORTED_MODULE_2__.match)(cleanPath, { decode: decodeURIComponent })(cleanUrl);\n  const params = result && result.params || {};\n  return {\n    matches: result !== false,\n    params\n  };\n}\nfunction isPath(value) {\n  return typeof value === \"string\" || value instanceof RegExp;\n}\n\n//# sourceMappingURL=matchRequestUrl.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL21hdGNoaW5nL21hdGNoUmVxdWVzdFVybC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXVDO0FBQ1c7QUFDRTtBQUNwRDtBQUNBO0FBQ0EsdUJBQXVCLElBQUk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxjQUFjLEVBQUUsU0FBUyxPQUFPLGNBQWMsRUFBRSxXQUFXO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlFQUFhO0FBQ3RDO0FBQ0EsbUJBQW1CLGdFQUFXO0FBQzlCLGlCQUFpQixxREFBSyxjQUFjLDRCQUE0QjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL21hdGNoaW5nL21hdGNoUmVxdWVzdFVybC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF0Y2ggfSBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcbmltcG9ydCB7IGdldENsZWFuVXJsIH0gZnJvbSBcIkBtc3dqcy9pbnRlcmNlcHRvcnNcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZVBhdGggfSBmcm9tICcuL25vcm1hbGl6ZVBhdGgubWpzJztcbmZ1bmN0aW9uIGNvZXJjZVBhdGgocGF0aCkge1xuICByZXR1cm4gcGF0aC5yZXBsYWNlKFxuICAgIC8oWzphLXpBLVpfLV0qKShcXCp7MSwyfSkrL2csXG4gICAgKF8sIHBhcmFtZXRlck5hbWUsIHdpbGRjYXJkKSA9PiB7XG4gICAgICBjb25zdCBleHByZXNzaW9uID0gXCIoLiopXCI7XG4gICAgICBpZiAoIXBhcmFtZXRlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb247XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyYW1ldGVyTmFtZS5zdGFydHNXaXRoKFwiOlwiKSA/IGAke3BhcmFtZXRlck5hbWV9JHt3aWxkY2FyZH1gIDogYCR7cGFyYW1ldGVyTmFtZX0ke2V4cHJlc3Npb259YDtcbiAgICB9XG4gICkucmVwbGFjZSgvKFteXFwvXSkoOikoPz1cXGQrKS8sIFwiJDFcXFxcJDJcIikucmVwbGFjZSgvXihbXlxcL10rKSg6KSg/PVxcL1xcLykvLCBcIiQxXFxcXCQyXCIpO1xufVxuZnVuY3Rpb24gbWF0Y2hSZXF1ZXN0VXJsKHVybCwgcGF0aCwgYmFzZVVybCkge1xuICBjb25zdCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVBhdGgocGF0aCwgYmFzZVVybCk7XG4gIGNvbnN0IGNsZWFuUGF0aCA9IHR5cGVvZiBub3JtYWxpemVkUGF0aCA9PT0gXCJzdHJpbmdcIiA/IGNvZXJjZVBhdGgobm9ybWFsaXplZFBhdGgpIDogbm9ybWFsaXplZFBhdGg7XG4gIGNvbnN0IGNsZWFuVXJsID0gZ2V0Q2xlYW5VcmwodXJsKTtcbiAgY29uc3QgcmVzdWx0ID0gbWF0Y2goY2xlYW5QYXRoLCB7IGRlY29kZTogZGVjb2RlVVJJQ29tcG9uZW50IH0pKGNsZWFuVXJsKTtcbiAgY29uc3QgcGFyYW1zID0gcmVzdWx0ICYmIHJlc3VsdC5wYXJhbXMgfHwge307XG4gIHJldHVybiB7XG4gICAgbWF0Y2hlczogcmVzdWx0ICE9PSBmYWxzZSxcbiAgICBwYXJhbXNcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzUGF0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwO1xufVxuZXhwb3J0IHtcbiAgY29lcmNlUGF0aCxcbiAgaXNQYXRoLFxuICBtYXRjaFJlcXVlc3RVcmxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXRjaFJlcXVlc3RVcmwubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/matching/matchRequestUrl.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/matching/normalizePath.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/matching/normalizePath.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizePath: () => (/* binding */ normalizePath)\n/* harmony export */ });\n/* harmony import */ var _url_cleanUrl_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../url/cleanUrl.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/url/cleanUrl.mjs\");\n/* harmony import */ var _url_getAbsoluteUrl_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../url/getAbsoluteUrl.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/url/getAbsoluteUrl.mjs\");\n\n\nfunction normalizePath(path, baseUrl) {\n  if (path instanceof RegExp) {\n    return path;\n  }\n  const maybeAbsoluteUrl = (0,_url_getAbsoluteUrl_mjs__WEBPACK_IMPORTED_MODULE_0__.getAbsoluteUrl)(path, baseUrl);\n  return (0,_url_cleanUrl_mjs__WEBPACK_IMPORTED_MODULE_1__.cleanUrl)(maybeAbsoluteUrl);\n}\n\n//# sourceMappingURL=normalizePath.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL21hdGNoaW5nL25vcm1hbGl6ZVBhdGgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQztBQUNZO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHVFQUFjO0FBQ3pDLFNBQVMsMkRBQVE7QUFDakI7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL21hdGNoaW5nL25vcm1hbGl6ZVBhdGgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsZWFuVXJsIH0gZnJvbSAnLi4vdXJsL2NsZWFuVXJsLm1qcyc7XG5pbXBvcnQgeyBnZXRBYnNvbHV0ZVVybCB9IGZyb20gJy4uL3VybC9nZXRBYnNvbHV0ZVVybC5tanMnO1xuZnVuY3Rpb24gbm9ybWFsaXplUGF0aChwYXRoLCBiYXNlVXJsKSB7XG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbiAgY29uc3QgbWF5YmVBYnNvbHV0ZVVybCA9IGdldEFic29sdXRlVXJsKHBhdGgsIGJhc2VVcmwpO1xuICByZXR1cm4gY2xlYW5VcmwobWF5YmVBYnNvbHV0ZVVybCk7XG59XG5leHBvcnQge1xuICBub3JtYWxpemVQYXRoXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9ybWFsaXplUGF0aC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/matching/normalizePath.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/request/getRequestCookies.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/request/getRequestCookies.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAllRequestCookies: () => (/* binding */ getAllRequestCookies)\n/* harmony export */ });\n/* harmony import */ var _bundled_es_modules_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bundled-es-modules/cookie */ \"(ssr)/./node_modules/@bundled-es-modules/cookie/index-esm.js\");\n/* harmony import */ var _cookieStore_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cookieStore.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/cookieStore.mjs\");\n\n\nfunction parseCookies(input) {\n  const parsedCookies = _bundled_es_modules_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(input);\n  const cookies = {};\n  for (const cookieName in parsedCookies) {\n    if (typeof parsedCookies[cookieName] !== \"undefined\") {\n      cookies[cookieName] = parsedCookies[cookieName];\n    }\n  }\n  return cookies;\n}\nfunction getAllDocumentCookies() {\n  return parseCookies(document.cookie);\n}\nfunction getDocumentCookies(request) {\n  if (typeof document === \"undefined\" || typeof location === \"undefined\") {\n    return {};\n  }\n  switch (request.credentials) {\n    case \"same-origin\": {\n      const requestUrl = new URL(request.url);\n      return location.origin === requestUrl.origin ? getAllDocumentCookies() : {};\n    }\n    case \"include\": {\n      return getAllDocumentCookies();\n    }\n    default: {\n      return {};\n    }\n  }\n}\nfunction getAllRequestCookies(request) {\n  const requestCookieHeader = request.headers.get(\"cookie\");\n  const cookiesFromHeaders = requestCookieHeader ? parseCookies(requestCookieHeader) : {};\n  const cookiesFromDocument = getDocumentCookies(request);\n  for (const name in cookiesFromDocument) {\n    request.headers.append(\n      \"cookie\",\n      _bundled_es_modules_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].serialize(name, cookiesFromDocument[name])\n    );\n  }\n  const cookiesFromStore = _cookieStore_mjs__WEBPACK_IMPORTED_MODULE_1__.cookieStore.getCookies(request.url);\n  const storedCookiesObject = Object.fromEntries(\n    cookiesFromStore.map((cookie) => [cookie.key, cookie.value])\n  );\n  for (const cookie of cookiesFromStore) {\n    request.headers.append(\"cookie\", cookie.toString());\n  }\n  return {\n    ...cookiesFromDocument,\n    ...storedCookiesObject,\n    ...cookiesFromHeaders\n  };\n}\n\n//# sourceMappingURL=getRequestCookies.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL3JlcXVlc3QvZ2V0UmVxdWVzdENvb2tpZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDtBQUNKO0FBQ2pEO0FBQ0Esd0JBQXdCLGtFQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGtFQUFXO0FBQ2pCO0FBQ0E7QUFDQSwyQkFBMkIseURBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa29sYXMvbmlrL2lxdXAvbm9kZV9tb2R1bGVzL21zdy9saWIvY29yZS91dGlscy9yZXF1ZXN0L2dldFJlcXVlc3RDb29raWVzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29va2llVXRpbHMgZnJvbSBcIkBidW5kbGVkLWVzLW1vZHVsZXMvY29va2llXCI7XG5pbXBvcnQgeyBjb29raWVTdG9yZSB9IGZyb20gJy4uL2Nvb2tpZVN0b3JlLm1qcyc7XG5mdW5jdGlvbiBwYXJzZUNvb2tpZXMoaW5wdXQpIHtcbiAgY29uc3QgcGFyc2VkQ29va2llcyA9IGNvb2tpZVV0aWxzLnBhcnNlKGlucHV0KTtcbiAgY29uc3QgY29va2llcyA9IHt9O1xuICBmb3IgKGNvbnN0IGNvb2tpZU5hbWUgaW4gcGFyc2VkQ29va2llcykge1xuICAgIGlmICh0eXBlb2YgcGFyc2VkQ29va2llc1tjb29raWVOYW1lXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY29va2llc1tjb29raWVOYW1lXSA9IHBhcnNlZENvb2tpZXNbY29va2llTmFtZV07XG4gICAgfVxuICB9XG4gIHJldHVybiBjb29raWVzO1xufVxuZnVuY3Rpb24gZ2V0QWxsRG9jdW1lbnRDb29raWVzKCkge1xuICByZXR1cm4gcGFyc2VDb29raWVzKGRvY3VtZW50LmNvb2tpZSk7XG59XG5mdW5jdGlvbiBnZXREb2N1bWVudENvb2tpZXMocmVxdWVzdCkge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBzd2l0Y2ggKHJlcXVlc3QuY3JlZGVudGlhbHMpIHtcbiAgICBjYXNlIFwic2FtZS1vcmlnaW5cIjoge1xuICAgICAgY29uc3QgcmVxdWVzdFVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgcmV0dXJuIGxvY2F0aW9uLm9yaWdpbiA9PT0gcmVxdWVzdFVybC5vcmlnaW4gPyBnZXRBbGxEb2N1bWVudENvb2tpZXMoKSA6IHt9O1xuICAgIH1cbiAgICBjYXNlIFwiaW5jbHVkZVwiOiB7XG4gICAgICByZXR1cm4gZ2V0QWxsRG9jdW1lbnRDb29raWVzKCk7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEFsbFJlcXVlc3RDb29raWVzKHJlcXVlc3QpIHtcbiAgY29uc3QgcmVxdWVzdENvb2tpZUhlYWRlciA9IHJlcXVlc3QuaGVhZGVycy5nZXQoXCJjb29raWVcIik7XG4gIGNvbnN0IGNvb2tpZXNGcm9tSGVhZGVycyA9IHJlcXVlc3RDb29raWVIZWFkZXIgPyBwYXJzZUNvb2tpZXMocmVxdWVzdENvb2tpZUhlYWRlcikgOiB7fTtcbiAgY29uc3QgY29va2llc0Zyb21Eb2N1bWVudCA9IGdldERvY3VtZW50Q29va2llcyhyZXF1ZXN0KTtcbiAgZm9yIChjb25zdCBuYW1lIGluIGNvb2tpZXNGcm9tRG9jdW1lbnQpIHtcbiAgICByZXF1ZXN0LmhlYWRlcnMuYXBwZW5kKFxuICAgICAgXCJjb29raWVcIixcbiAgICAgIGNvb2tpZVV0aWxzLnNlcmlhbGl6ZShuYW1lLCBjb29raWVzRnJvbURvY3VtZW50W25hbWVdKVxuICAgICk7XG4gIH1cbiAgY29uc3QgY29va2llc0Zyb21TdG9yZSA9IGNvb2tpZVN0b3JlLmdldENvb2tpZXMocmVxdWVzdC51cmwpO1xuICBjb25zdCBzdG9yZWRDb29raWVzT2JqZWN0ID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgIGNvb2tpZXNGcm9tU3RvcmUubWFwKChjb29raWUpID0+IFtjb29raWUua2V5LCBjb29raWUudmFsdWVdKVxuICApO1xuICBmb3IgKGNvbnN0IGNvb2tpZSBvZiBjb29raWVzRnJvbVN0b3JlKSB7XG4gICAgcmVxdWVzdC5oZWFkZXJzLmFwcGVuZChcImNvb2tpZVwiLCBjb29raWUudG9TdHJpbmcoKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAuLi5jb29raWVzRnJvbURvY3VtZW50LFxuICAgIC4uLnN0b3JlZENvb2tpZXNPYmplY3QsXG4gICAgLi4uY29va2llc0Zyb21IZWFkZXJzXG4gIH07XG59XG5leHBvcnQge1xuICBnZXRBbGxSZXF1ZXN0Q29va2llc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFJlcXVlc3RDb29raWVzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/request/getRequestCookies.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/request/onUnhandledRequest.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/request/onUnhandledRequest.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   onUnhandledRequest: () => (/* binding */ onUnhandledRequest)\n/* harmony export */ });\n/* harmony import */ var _toPublicUrl_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPublicUrl.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/request/toPublicUrl.mjs\");\n/* harmony import */ var _internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/devUtils.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/devUtils.mjs\");\n/* harmony import */ var _isCommonAssetRequest_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../isCommonAssetRequest.mjs */ \"(ssr)/./node_modules/msw/lib/core/isCommonAssetRequest.mjs\");\n\n\n\nasync function onUnhandledRequest(request, strategy = \"warn\") {\n  const url = new URL(request.url);\n  const publicUrl = (0,_toPublicUrl_mjs__WEBPACK_IMPORTED_MODULE_0__.toPublicUrl)(url) + url.search;\n  const requestBody = request.method === \"HEAD\" || request.method === \"GET\" ? null : await request.clone().text();\n  const messageDetails = `\n\n  \\u2022 ${request.method} ${publicUrl}\n\n${requestBody ? `  \\u2022 Request body: ${requestBody}\n\n` : \"\"}`;\n  const unhandledRequestMessage = `intercepted a request without a matching request handler:${messageDetails}If you still wish to intercept this unhandled request, please create a request handler for it.\nRead more: https://mswjs.io/docs/http/intercepting-requests`;\n  function applyStrategy(strategy2) {\n    switch (strategy2) {\n      case \"error\": {\n        _internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.devUtils.error(\"Error: %s\", unhandledRequestMessage);\n        throw new _internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.InternalError(\n          _internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.devUtils.formatMessage(\n            'Cannot bypass a request when using the \"error\" strategy for the \"onUnhandledRequest\" option.'\n          )\n        );\n      }\n      case \"warn\": {\n        _internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.devUtils.warn(\"Warning: %s\", unhandledRequestMessage);\n        break;\n      }\n      case \"bypass\":\n        break;\n      default:\n        throw new _internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.InternalError(\n          _internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.devUtils.formatMessage(\n            'Failed to react to an unhandled request: unknown strategy \"%s\". Please provide one of the supported strategies (\"bypass\", \"warn\", \"error\") or a custom callback function as the value of the \"onUnhandledRequest\" option.',\n            strategy2\n          )\n        );\n    }\n  }\n  if (typeof strategy === \"function\") {\n    strategy(request, {\n      warning: applyStrategy.bind(null, \"warn\"),\n      error: applyStrategy.bind(null, \"error\")\n    });\n    return;\n  }\n  if (!(0,_isCommonAssetRequest_mjs__WEBPACK_IMPORTED_MODULE_2__.isCommonAssetRequest)(request)) {\n    applyStrategy(strategy);\n  }\n}\n\n//# sourceMappingURL=onUnhandledRequest.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL3JlcXVlc3Qvb25VbmhhbmRsZWRSZXF1ZXN0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdEO0FBQ21CO0FBQ0c7QUFDdEU7QUFDQTtBQUNBLG9CQUFvQiw2REFBVztBQUMvQjtBQUNBOztBQUVBLFdBQVcsZ0JBQWdCLEVBQUU7O0FBRTdCLEVBQUUsd0NBQXdDOztBQUUxQyxPQUFPO0FBQ1AsOEZBQThGLGVBQWU7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDREQUFRO0FBQ2hCLGtCQUFrQixpRUFBYTtBQUMvQixVQUFVLDREQUFRO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDREQUFRO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUVBQWE7QUFDL0IsVUFBVSw0REFBUTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsT0FBTywrRUFBb0I7QUFDM0I7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa29sYXMvbmlrL2lxdXAvbm9kZV9tb2R1bGVzL21zdy9saWIvY29yZS91dGlscy9yZXF1ZXN0L29uVW5oYW5kbGVkUmVxdWVzdC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdG9QdWJsaWNVcmwgfSBmcm9tICcuL3RvUHVibGljVXJsLm1qcyc7XG5pbXBvcnQgeyBJbnRlcm5hbEVycm9yLCBkZXZVdGlscyB9IGZyb20gJy4uL2ludGVybmFsL2RldlV0aWxzLm1qcyc7XG5pbXBvcnQgeyBpc0NvbW1vbkFzc2V0UmVxdWVzdCB9IGZyb20gJy4uLy4uL2lzQ29tbW9uQXNzZXRSZXF1ZXN0Lm1qcyc7XG5hc3luYyBmdW5jdGlvbiBvblVuaGFuZGxlZFJlcXVlc3QocmVxdWVzdCwgc3RyYXRlZ3kgPSBcIndhcm5cIikge1xuICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgY29uc3QgcHVibGljVXJsID0gdG9QdWJsaWNVcmwodXJsKSArIHVybC5zZWFyY2g7XG4gIGNvbnN0IHJlcXVlc3RCb2R5ID0gcmVxdWVzdC5tZXRob2QgPT09IFwiSEVBRFwiIHx8IHJlcXVlc3QubWV0aG9kID09PSBcIkdFVFwiID8gbnVsbCA6IGF3YWl0IHJlcXVlc3QuY2xvbmUoKS50ZXh0KCk7XG4gIGNvbnN0IG1lc3NhZ2VEZXRhaWxzID0gYFxuXG4gIFxcdTIwMjIgJHtyZXF1ZXN0Lm1ldGhvZH0gJHtwdWJsaWNVcmx9XG5cbiR7cmVxdWVzdEJvZHkgPyBgICBcXHUyMDIyIFJlcXVlc3QgYm9keTogJHtyZXF1ZXN0Qm9keX1cblxuYCA6IFwiXCJ9YDtcbiAgY29uc3QgdW5oYW5kbGVkUmVxdWVzdE1lc3NhZ2UgPSBgaW50ZXJjZXB0ZWQgYSByZXF1ZXN0IHdpdGhvdXQgYSBtYXRjaGluZyByZXF1ZXN0IGhhbmRsZXI6JHttZXNzYWdlRGV0YWlsc31JZiB5b3Ugc3RpbGwgd2lzaCB0byBpbnRlcmNlcHQgdGhpcyB1bmhhbmRsZWQgcmVxdWVzdCwgcGxlYXNlIGNyZWF0ZSBhIHJlcXVlc3QgaGFuZGxlciBmb3IgaXQuXG5SZWFkIG1vcmU6IGh0dHBzOi8vbXN3anMuaW8vZG9jcy9odHRwL2ludGVyY2VwdGluZy1yZXF1ZXN0c2A7XG4gIGZ1bmN0aW9uIGFwcGx5U3RyYXRlZ3koc3RyYXRlZ3kyKSB7XG4gICAgc3dpdGNoIChzdHJhdGVneTIpIHtcbiAgICAgIGNhc2UgXCJlcnJvclwiOiB7XG4gICAgICAgIGRldlV0aWxzLmVycm9yKFwiRXJyb3I6ICVzXCIsIHVuaGFuZGxlZFJlcXVlc3RNZXNzYWdlKTtcbiAgICAgICAgdGhyb3cgbmV3IEludGVybmFsRXJyb3IoXG4gICAgICAgICAgZGV2VXRpbHMuZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICAgICdDYW5ub3QgYnlwYXNzIGEgcmVxdWVzdCB3aGVuIHVzaW5nIHRoZSBcImVycm9yXCIgc3RyYXRlZ3kgZm9yIHRoZSBcIm9uVW5oYW5kbGVkUmVxdWVzdFwiIG9wdGlvbi4nXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2FzZSBcIndhcm5cIjoge1xuICAgICAgICBkZXZVdGlscy53YXJuKFwiV2FybmluZzogJXNcIiwgdW5oYW5kbGVkUmVxdWVzdE1lc3NhZ2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJieXBhc3NcIjpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgSW50ZXJuYWxFcnJvcihcbiAgICAgICAgICBkZXZVdGlscy5mb3JtYXRNZXNzYWdlKFxuICAgICAgICAgICAgJ0ZhaWxlZCB0byByZWFjdCB0byBhbiB1bmhhbmRsZWQgcmVxdWVzdDogdW5rbm93biBzdHJhdGVneSBcIiVzXCIuIFBsZWFzZSBwcm92aWRlIG9uZSBvZiB0aGUgc3VwcG9ydGVkIHN0cmF0ZWdpZXMgKFwiYnlwYXNzXCIsIFwid2FyblwiLCBcImVycm9yXCIpIG9yIGEgY3VzdG9tIGNhbGxiYWNrIGZ1bmN0aW9uIGFzIHRoZSB2YWx1ZSBvZiB0aGUgXCJvblVuaGFuZGxlZFJlcXVlc3RcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHN0cmF0ZWd5MlxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJhdGVneSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgc3RyYXRlZ3kocmVxdWVzdCwge1xuICAgICAgd2FybmluZzogYXBwbHlTdHJhdGVneS5iaW5kKG51bGwsIFwid2FyblwiKSxcbiAgICAgIGVycm9yOiBhcHBseVN0cmF0ZWd5LmJpbmQobnVsbCwgXCJlcnJvclwiKVxuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWlzQ29tbW9uQXNzZXRSZXF1ZXN0KHJlcXVlc3QpKSB7XG4gICAgYXBwbHlTdHJhdGVneShzdHJhdGVneSk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIG9uVW5oYW5kbGVkUmVxdWVzdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9uVW5oYW5kbGVkUmVxdWVzdC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/request/onUnhandledRequest.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/request/storeResponseCookies.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/request/storeResponseCookies.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storeResponseCookies: () => (/* binding */ storeResponseCookies)\n/* harmony export */ });\n/* harmony import */ var _cookieStore_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cookieStore.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/cookieStore.mjs\");\n/* harmony import */ var _HttpResponse_decorators_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../HttpResponse/decorators.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/HttpResponse/decorators.mjs\");\n\n\nasync function storeResponseCookies(request, response) {\n  const responseCookies = Reflect.get(response, _HttpResponse_decorators_mjs__WEBPACK_IMPORTED_MODULE_0__.kSetCookie);\n  if (responseCookies) {\n    await _cookieStore_mjs__WEBPACK_IMPORTED_MODULE_1__.cookieStore.setCookie(responseCookies, request.url);\n  }\n}\n\n//# sourceMappingURL=storeResponseCookies.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL3JlcXVlc3Qvc3RvcmVSZXNwb25zZUNvb2tpZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRDtBQUNXO0FBQzVEO0FBQ0EsZ0RBQWdELG9FQUFVO0FBQzFEO0FBQ0EsVUFBVSx5REFBVztBQUNyQjtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa29sYXMvbmlrL2lxdXAvbm9kZV9tb2R1bGVzL21zdy9saWIvY29yZS91dGlscy9yZXF1ZXN0L3N0b3JlUmVzcG9uc2VDb29raWVzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb29raWVTdG9yZSB9IGZyb20gJy4uL2Nvb2tpZVN0b3JlLm1qcyc7XG5pbXBvcnQgeyBrU2V0Q29va2llIH0gZnJvbSAnLi4vSHR0cFJlc3BvbnNlL2RlY29yYXRvcnMubWpzJztcbmFzeW5jIGZ1bmN0aW9uIHN0b3JlUmVzcG9uc2VDb29raWVzKHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IHJlc3BvbnNlQ29va2llcyA9IFJlZmxlY3QuZ2V0KHJlc3BvbnNlLCBrU2V0Q29va2llKTtcbiAgaWYgKHJlc3BvbnNlQ29va2llcykge1xuICAgIGF3YWl0IGNvb2tpZVN0b3JlLnNldENvb2tpZShyZXNwb25zZUNvb2tpZXMsIHJlcXVlc3QudXJsKTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgc3RvcmVSZXNwb25zZUNvb2tpZXNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdG9yZVJlc3BvbnNlQ29va2llcy5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/request/storeResponseCookies.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/request/toPublicUrl.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/request/toPublicUrl.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toPublicUrl: () => (/* binding */ toPublicUrl)\n/* harmony export */ });\nfunction toPublicUrl(url) {\n  if (typeof location === \"undefined\") {\n    return url.toString();\n  }\n  const urlInstance = url instanceof URL ? url : new URL(url);\n  return urlInstance.origin === location.origin ? urlInstance.pathname : urlInstance.origin + urlInstance.pathname;\n}\n\n//# sourceMappingURL=toPublicUrl.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL3JlcXVlc3QvdG9QdWJsaWNVcmwubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtvbGFzL25pay9pcXVwL25vZGVfbW9kdWxlcy9tc3cvbGliL2NvcmUvdXRpbHMvcmVxdWVzdC90b1B1YmxpY1VybC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gdG9QdWJsaWNVcmwodXJsKSB7XG4gIGlmICh0eXBlb2YgbG9jYXRpb24gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG4gIH1cbiAgY29uc3QgdXJsSW5zdGFuY2UgPSB1cmwgaW5zdGFuY2VvZiBVUkwgPyB1cmwgOiBuZXcgVVJMKHVybCk7XG4gIHJldHVybiB1cmxJbnN0YW5jZS5vcmlnaW4gPT09IGxvY2F0aW9uLm9yaWdpbiA/IHVybEluc3RhbmNlLnBhdGhuYW1lIDogdXJsSW5zdGFuY2Uub3JpZ2luICsgdXJsSW5zdGFuY2UucGF0aG5hbWU7XG59XG5leHBvcnQge1xuICB0b1B1YmxpY1VybFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvUHVibGljVXJsLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/request/toPublicUrl.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/toResponseInit.mjs":
/*!************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/toResponseInit.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toResponseInit: () => (/* binding */ toResponseInit)\n/* harmony export */ });\nfunction toResponseInit(response) {\n  return {\n    status: response.status,\n    statusText: response.statusText,\n    headers: Object.fromEntries(response.headers.entries())\n  };\n}\n\n//# sourceMappingURL=toResponseInit.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL3RvUmVzcG9uc2VJbml0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL3RvUmVzcG9uc2VJbml0Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB0b1Jlc3BvbnNlSW5pdChyZXNwb25zZSkge1xuICByZXR1cm4ge1xuICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogT2JqZWN0LmZyb21FbnRyaWVzKHJlc3BvbnNlLmhlYWRlcnMuZW50cmllcygpKVxuICB9O1xufVxuZXhwb3J0IHtcbiAgdG9SZXNwb25zZUluaXRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b1Jlc3BvbnNlSW5pdC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/toResponseInit.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/url/cleanUrl.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/url/cleanUrl.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanUrl: () => (/* binding */ cleanUrl),\n/* harmony export */   getSearchParams: () => (/* binding */ getSearchParams)\n/* harmony export */ });\nconst REDUNDANT_CHARACTERS_EXP = /[\\?|#].*$/g;\nfunction getSearchParams(path) {\n  return new URL(`/${path}`, \"http://localhost\").searchParams;\n}\nfunction cleanUrl(path) {\n  if (path.endsWith(\"?\")) {\n    return path;\n  }\n  return path.replace(REDUNDANT_CHARACTERS_EXP, \"\");\n}\n\n//# sourceMappingURL=cleanUrl.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL3VybC9jbGVhblVybC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0EscUJBQXFCLEtBQUs7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL3VybC9jbGVhblVybC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUkVEVU5EQU5UX0NIQVJBQ1RFUlNfRVhQID0gL1tcXD98I10uKiQvZztcbmZ1bmN0aW9uIGdldFNlYXJjaFBhcmFtcyhwYXRoKSB7XG4gIHJldHVybiBuZXcgVVJMKGAvJHtwYXRofWAsIFwiaHR0cDovL2xvY2FsaG9zdFwiKS5zZWFyY2hQYXJhbXM7XG59XG5mdW5jdGlvbiBjbGVhblVybChwYXRoKSB7XG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiP1wiKSkge1xuICAgIHJldHVybiBwYXRoO1xuICB9XG4gIHJldHVybiBwYXRoLnJlcGxhY2UoUkVEVU5EQU5UX0NIQVJBQ1RFUlNfRVhQLCBcIlwiKTtcbn1cbmV4cG9ydCB7XG4gIGNsZWFuVXJsLFxuICBnZXRTZWFyY2hQYXJhbXNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGVhblVybC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/url/cleanUrl.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/url/getAbsoluteUrl.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/url/getAbsoluteUrl.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAbsoluteUrl: () => (/* binding */ getAbsoluteUrl)\n/* harmony export */ });\n/* harmony import */ var _isAbsoluteUrl_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isAbsoluteUrl.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/url/isAbsoluteUrl.mjs\");\n\nfunction getAbsoluteUrl(path, baseUrl) {\n  if ((0,_isAbsoluteUrl_mjs__WEBPACK_IMPORTED_MODULE_0__.isAbsoluteUrl)(path)) {\n    return path;\n  }\n  if (path.startsWith(\"*\")) {\n    return path;\n  }\n  const origin = baseUrl || typeof location !== \"undefined\" && location.href;\n  return origin ? (\n    // Encode and decode the path to preserve escaped characters.\n    decodeURI(new URL(encodeURI(path), origin).href)\n  ) : path;\n}\n\n//# sourceMappingURL=getAbsoluteUrl.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL3VybC9nZXRBYnNvbHV0ZVVybC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFDcEQ7QUFDQSxNQUFNLGlFQUFhO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL3VybC9nZXRBYnNvbHV0ZVVybC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNBYnNvbHV0ZVVybCB9IGZyb20gJy4vaXNBYnNvbHV0ZVVybC5tanMnO1xuZnVuY3Rpb24gZ2V0QWJzb2x1dGVVcmwocGF0aCwgYmFzZVVybCkge1xuICBpZiAoaXNBYnNvbHV0ZVVybChwYXRoKSkge1xuICAgIHJldHVybiBwYXRoO1xuICB9XG4gIGlmIChwYXRoLnN0YXJ0c1dpdGgoXCIqXCIpKSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbiAgY29uc3Qgb3JpZ2luID0gYmFzZVVybCB8fCB0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgbG9jYXRpb24uaHJlZjtcbiAgcmV0dXJuIG9yaWdpbiA/IChcbiAgICAvLyBFbmNvZGUgYW5kIGRlY29kZSB0aGUgcGF0aCB0byBwcmVzZXJ2ZSBlc2NhcGVkIGNoYXJhY3RlcnMuXG4gICAgZGVjb2RlVVJJKG5ldyBVUkwoZW5jb2RlVVJJKHBhdGgpLCBvcmlnaW4pLmhyZWYpXG4gICkgOiBwYXRoO1xufVxuZXhwb3J0IHtcbiAgZ2V0QWJzb2x1dGVVcmxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBYnNvbHV0ZVVybC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/url/getAbsoluteUrl.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/utils/url/isAbsoluteUrl.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/msw/lib/core/utils/url/isAbsoluteUrl.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAbsoluteUrl: () => (/* binding */ isAbsoluteUrl)\n/* harmony export */ });\nfunction isAbsoluteUrl(url) {\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n}\n\n//# sourceMappingURL=isAbsoluteUrl.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3V0aWxzL3VybC9pc0Fic29sdXRlVXJsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL25pa29sYXMvbmlrL2lxdXAvbm9kZV9tb2R1bGVzL21zdy9saWIvY29yZS91dGlscy91cmwvaXNBYnNvbHV0ZVVybC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNBYnNvbHV0ZVVybCh1cmwpIHtcbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuZXhwb3J0IHtcbiAgaXNBYnNvbHV0ZVVybFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQWJzb2x1dGVVcmwubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/utils/url/isAbsoluteUrl.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/ws/handleWebSocketEvent.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/msw/lib/core/ws/handleWebSocketEvent.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleWebSocketEvent: () => (/* binding */ handleWebSocketEvent)\n/* harmony export */ });\n/* harmony import */ var _webSocketInterceptor_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webSocketInterceptor.mjs */ \"(ssr)/./node_modules/msw/lib/core/ws/webSocketInterceptor.mjs\");\n/* harmony import */ var _utils_request_onUnhandledRequest_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/request/onUnhandledRequest.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/request/onUnhandledRequest.mjs\");\n/* harmony import */ var _utils_internal_isHandlerKind_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/internal/isHandlerKind.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/isHandlerKind.mjs\");\n\n\n\nfunction handleWebSocketEvent(options) {\n  _webSocketInterceptor_mjs__WEBPACK_IMPORTED_MODULE_0__.webSocketInterceptor.on(\"connection\", async (connection) => {\n    const handlers = options.getHandlers().filter((0,_utils_internal_isHandlerKind_mjs__WEBPACK_IMPORTED_MODULE_1__.isHandlerKind)(\"EventHandler\"));\n    if (handlers.length > 0) {\n      options?.onMockedConnection(connection);\n      await Promise.all(\n        handlers.map((handler) => {\n          return handler.run(connection);\n        })\n      );\n      return;\n    }\n    const request = new Request(connection.client.url, {\n      headers: {\n        upgrade: \"websocket\",\n        connection: \"upgrade\"\n      }\n    });\n    await (0,_utils_request_onUnhandledRequest_mjs__WEBPACK_IMPORTED_MODULE_2__.onUnhandledRequest)(\n      request,\n      options.getUnhandledRequestStrategy()\n    ).catch((error) => {\n      const errorEvent = new Event(\"error\");\n      Object.defineProperty(errorEvent, \"cause\", {\n        enumerable: true,\n        configurable: false,\n        value: error\n      });\n      connection.client.socket.dispatchEvent(errorEvent);\n    });\n    options?.onPassthroughConnection(connection);\n    connection.server.connect();\n  });\n}\n\n//# sourceMappingURL=handleWebSocketEvent.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3dzL2hhbmRsZVdlYlNvY2tldEV2ZW50Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtFO0FBR2pCO0FBQ21CO0FBQ3BFO0FBQ0EsRUFBRSwyRUFBb0I7QUFDdEIsa0RBQWtELGdGQUFhO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxVQUFVLHlGQUFrQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3dzL2hhbmRsZVdlYlNvY2tldEV2ZW50Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3ZWJTb2NrZXRJbnRlcmNlcHRvciB9IGZyb20gJy4vd2ViU29ja2V0SW50ZXJjZXB0b3IubWpzJztcbmltcG9ydCB7XG4gIG9uVW5oYW5kbGVkUmVxdWVzdFxufSBmcm9tICcuLi91dGlscy9yZXF1ZXN0L29uVW5oYW5kbGVkUmVxdWVzdC5tanMnO1xuaW1wb3J0IHsgaXNIYW5kbGVyS2luZCB9IGZyb20gJy4uL3V0aWxzL2ludGVybmFsL2lzSGFuZGxlcktpbmQubWpzJztcbmZ1bmN0aW9uIGhhbmRsZVdlYlNvY2tldEV2ZW50KG9wdGlvbnMpIHtcbiAgd2ViU29ja2V0SW50ZXJjZXB0b3Iub24oXCJjb25uZWN0aW9uXCIsIGFzeW5jIChjb25uZWN0aW9uKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlcnMgPSBvcHRpb25zLmdldEhhbmRsZXJzKCkuZmlsdGVyKGlzSGFuZGxlcktpbmQoXCJFdmVudEhhbmRsZXJcIikpO1xuICAgIGlmIChoYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICBvcHRpb25zPy5vbk1vY2tlZENvbm5lY3Rpb24oY29ubmVjdGlvbik7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgaGFuZGxlcnMubWFwKChoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZXIucnVuKGNvbm5lY3Rpb24pO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGNvbm5lY3Rpb24uY2xpZW50LnVybCwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICB1cGdyYWRlOiBcIndlYnNvY2tldFwiLFxuICAgICAgICBjb25uZWN0aW9uOiBcInVwZ3JhZGVcIlxuICAgICAgfVxuICAgIH0pO1xuICAgIGF3YWl0IG9uVW5oYW5kbGVkUmVxdWVzdChcbiAgICAgIHJlcXVlc3QsXG4gICAgICBvcHRpb25zLmdldFVuaGFuZGxlZFJlcXVlc3RTdHJhdGVneSgpXG4gICAgKS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yRXZlbnQgPSBuZXcgRXZlbnQoXCJlcnJvclwiKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvckV2ZW50LCBcImNhdXNlXCIsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IGVycm9yXG4gICAgICB9KTtcbiAgICAgIGNvbm5lY3Rpb24uY2xpZW50LnNvY2tldC5kaXNwYXRjaEV2ZW50KGVycm9yRXZlbnQpO1xuICAgIH0pO1xuICAgIG9wdGlvbnM/Lm9uUGFzc3Rocm91Z2hDb25uZWN0aW9uKGNvbm5lY3Rpb24pO1xuICAgIGNvbm5lY3Rpb24uc2VydmVyLmNvbm5lY3QoKTtcbiAgfSk7XG59XG5leHBvcnQge1xuICBoYW5kbGVXZWJTb2NrZXRFdmVudFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhbmRsZVdlYlNvY2tldEV2ZW50Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/ws/handleWebSocketEvent.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/ws/utils/attachWebSocketLogger.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/msw/lib/core/ws/utils/attachWebSocketLogger.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   attachWebSocketLogger: () => (/* binding */ attachWebSocketLogger),\n/* harmony export */   logConnectionOpen: () => (/* binding */ logConnectionOpen)\n/* harmony export */ });\n/* harmony import */ var _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/internal/devUtils.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/internal/devUtils.mjs\");\n/* harmony import */ var _utils_logging_getTimestamp_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/logging/getTimestamp.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/logging/getTimestamp.mjs\");\n/* harmony import */ var _utils_request_toPublicUrl_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/request/toPublicUrl.mjs */ \"(ssr)/./node_modules/msw/lib/core/utils/request/toPublicUrl.mjs\");\n/* harmony import */ var _getMessageLength_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getMessageLength.mjs */ \"(ssr)/./node_modules/msw/lib/core/ws/utils/getMessageLength.mjs\");\n/* harmony import */ var _getPublicData_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getPublicData.mjs */ \"(ssr)/./node_modules/msw/lib/core/ws/utils/getPublicData.mjs\");\n\n\n\n\n\nconst colors = {\n  system: \"#3b82f6\",\n  outgoing: \"#22c55e\",\n  incoming: \"#ef4444\",\n  mocked: \"#ff6a33\"\n};\nfunction attachWebSocketLogger(connection) {\n  const { client, server } = connection;\n  logConnectionOpen(client);\n  client.addEventListener(\"message\", (event) => {\n    logOutgoingClientMessage(event);\n  });\n  client.addEventListener(\"close\", (event) => {\n    logConnectionClose(event);\n  });\n  client.socket.addEventListener(\"error\", (event) => {\n    logClientError(event);\n  });\n  client.send = new Proxy(client.send, {\n    apply(target, thisArg, args) {\n      const [data] = args;\n      const messageEvent = new MessageEvent(\"message\", { data });\n      Object.defineProperties(messageEvent, {\n        currentTarget: {\n          enumerable: true,\n          writable: false,\n          value: client.socket\n        },\n        target: {\n          enumerable: true,\n          writable: false,\n          value: client.socket\n        }\n      });\n      queueMicrotask(() => {\n        logIncomingMockedClientMessage(messageEvent);\n      });\n      return Reflect.apply(target, thisArg, args);\n    }\n  });\n  server.addEventListener(\n    \"open\",\n    () => {\n      server.addEventListener(\"message\", (event) => {\n        logIncomingServerMessage(event);\n      });\n    },\n    { once: true }\n  );\n  server.send = new Proxy(server.send, {\n    apply(target, thisArg, args) {\n      const [data] = args;\n      const messageEvent = new MessageEvent(\"message\", { data });\n      Object.defineProperties(messageEvent, {\n        currentTarget: {\n          enumerable: true,\n          writable: false,\n          value: server.socket\n        },\n        target: {\n          enumerable: true,\n          writable: false,\n          value: server.socket\n        }\n      });\n      logOutgoingMockedClientMessage(messageEvent);\n      return Reflect.apply(target, thisArg, args);\n    }\n  });\n}\nfunction logConnectionOpen(client) {\n  const publicUrl = (0,_utils_request_toPublicUrl_mjs__WEBPACK_IMPORTED_MODULE_0__.toPublicUrl)(client.url);\n  console.groupCollapsed(\n    _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.devUtils.formatMessage(`${(0,_utils_logging_getTimestamp_mjs__WEBPACK_IMPORTED_MODULE_2__.getTimestamp)()} %c\\u25B6%c ${publicUrl}`),\n    `color:${colors.system}`,\n    \"color:inherit\"\n  );\n  console.log(\"Client:\", client.socket);\n  console.groupEnd();\n}\nfunction logConnectionClose(event) {\n  const target = event.target;\n  const publicUrl = (0,_utils_request_toPublicUrl_mjs__WEBPACK_IMPORTED_MODULE_0__.toPublicUrl)(target.url);\n  console.groupCollapsed(\n    _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.devUtils.formatMessage(\n      `${(0,_utils_logging_getTimestamp_mjs__WEBPACK_IMPORTED_MODULE_2__.getTimestamp)({ milliseconds: true })} %c\\u25A0%c ${publicUrl}`\n    ),\n    `color:${colors.system}`,\n    \"color:inherit\"\n  );\n  console.log(event);\n  console.groupEnd();\n}\nfunction logClientError(event) {\n  const socket = event.target;\n  const publicUrl = (0,_utils_request_toPublicUrl_mjs__WEBPACK_IMPORTED_MODULE_0__.toPublicUrl)(socket.url);\n  console.groupCollapsed(\n    _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.devUtils.formatMessage(\n      `${(0,_utils_logging_getTimestamp_mjs__WEBPACK_IMPORTED_MODULE_2__.getTimestamp)({ milliseconds: true })} %c\\xD7%c ${publicUrl}`\n    ),\n    `color:${colors.system}`,\n    \"color:inherit\"\n  );\n  console.log(event);\n  console.groupEnd();\n}\nasync function logOutgoingClientMessage(event) {\n  const byteLength = (0,_getMessageLength_mjs__WEBPACK_IMPORTED_MODULE_3__.getMessageLength)(event.data);\n  const publicData = await (0,_getPublicData_mjs__WEBPACK_IMPORTED_MODULE_4__.getPublicData)(event.data);\n  const arrow = event.defaultPrevented ? \"\\u21E1\" : \"\\u2B06\";\n  console.groupCollapsed(\n    _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.devUtils.formatMessage(\n      `${(0,_utils_logging_getTimestamp_mjs__WEBPACK_IMPORTED_MODULE_2__.getTimestamp)({ milliseconds: true })} %c${arrow}%c ${publicData} %c${byteLength}%c`\n    ),\n    `color:${colors.outgoing}`,\n    \"color:inherit\",\n    \"color:gray;font-weight:normal\",\n    \"color:inherit;font-weight:inherit\"\n  );\n  console.log(event);\n  console.groupEnd();\n}\nasync function logOutgoingMockedClientMessage(event) {\n  const byteLength = (0,_getMessageLength_mjs__WEBPACK_IMPORTED_MODULE_3__.getMessageLength)(event.data);\n  const publicData = await (0,_getPublicData_mjs__WEBPACK_IMPORTED_MODULE_4__.getPublicData)(event.data);\n  console.groupCollapsed(\n    _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.devUtils.formatMessage(\n      `${(0,_utils_logging_getTimestamp_mjs__WEBPACK_IMPORTED_MODULE_2__.getTimestamp)({ milliseconds: true })} %c\\u2B06%c ${publicData} %c${byteLength}%c`\n    ),\n    `color:${colors.mocked}`,\n    \"color:inherit\",\n    \"color:gray;font-weight:normal\",\n    \"color:inherit;font-weight:inherit\"\n  );\n  console.log(event);\n  console.groupEnd();\n}\nasync function logIncomingMockedClientMessage(event) {\n  const byteLength = (0,_getMessageLength_mjs__WEBPACK_IMPORTED_MODULE_3__.getMessageLength)(event.data);\n  const publicData = await (0,_getPublicData_mjs__WEBPACK_IMPORTED_MODULE_4__.getPublicData)(event.data);\n  console.groupCollapsed(\n    _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.devUtils.formatMessage(\n      `${(0,_utils_logging_getTimestamp_mjs__WEBPACK_IMPORTED_MODULE_2__.getTimestamp)({ milliseconds: true })} %c\\u2B07%c ${publicData} %c${byteLength}%c`\n    ),\n    `color:${colors.mocked}`,\n    \"color:inherit\",\n    \"color:gray;font-weight:normal\",\n    \"color:inherit;font-weight:inherit\"\n  );\n  console.log(event);\n  console.groupEnd();\n}\nasync function logIncomingServerMessage(event) {\n  const byteLength = (0,_getMessageLength_mjs__WEBPACK_IMPORTED_MODULE_3__.getMessageLength)(event.data);\n  const publicData = await (0,_getPublicData_mjs__WEBPACK_IMPORTED_MODULE_4__.getPublicData)(event.data);\n  const arrow = event.defaultPrevented ? \"\\u21E3\" : \"\\u2B07\";\n  console.groupCollapsed(\n    _utils_internal_devUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.devUtils.formatMessage(\n      `${(0,_utils_logging_getTimestamp_mjs__WEBPACK_IMPORTED_MODULE_2__.getTimestamp)({ milliseconds: true })} %c${arrow}%c ${publicData} %c${byteLength}%c`\n    ),\n    `color:${colors.incoming}`,\n    \"color:inherit\",\n    \"color:gray;font-weight:normal\",\n    \"color:inherit;font-weight:inherit\"\n  );\n  console.log(event);\n  console.groupEnd();\n}\n\n//# sourceMappingURL=attachWebSocketLogger.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/ws/utils/attachWebSocketLogger.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/ws/utils/getMessageLength.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/msw/lib/core/ws/utils/getMessageLength.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMessageLength: () => (/* binding */ getMessageLength)\n/* harmony export */ });\nfunction getMessageLength(data) {\n  if (data instanceof Blob) {\n    return data.size;\n  }\n  if (data instanceof ArrayBuffer) {\n    return data.byteLength;\n  }\n  return new Blob([data]).size;\n}\n\n//# sourceMappingURL=getMessageLength.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3dzL3V0aWxzL2dldE1lc3NhZ2VMZW5ndGgubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbmlrb2xhcy9uaWsvaXF1cC9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3dzL3V0aWxzL2dldE1lc3NhZ2VMZW5ndGgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGdldE1lc3NhZ2VMZW5ndGgoZGF0YSkge1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICByZXR1cm4gZGF0YS5zaXplO1xuICB9XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZGF0YS5ieXRlTGVuZ3RoO1xuICB9XG4gIHJldHVybiBuZXcgQmxvYihbZGF0YV0pLnNpemU7XG59XG5leHBvcnQge1xuICBnZXRNZXNzYWdlTGVuZ3RoXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0TWVzc2FnZUxlbmd0aC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/ws/utils/getMessageLength.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/ws/utils/getPublicData.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/msw/lib/core/ws/utils/getPublicData.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPublicData: () => (/* binding */ getPublicData)\n/* harmony export */ });\n/* harmony import */ var _truncateMessage_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./truncateMessage.mjs */ \"(ssr)/./node_modules/msw/lib/core/ws/utils/truncateMessage.mjs\");\n\nasync function getPublicData(data) {\n  if (data instanceof Blob) {\n    const text = await data.text();\n    return `Blob(${(0,_truncateMessage_mjs__WEBPACK_IMPORTED_MODULE_0__.truncateMessage)(text)})`;\n  }\n  if (typeof data === \"object\" && \"byteLength\" in data) {\n    const text = new TextDecoder().decode(data);\n    return `ArrayBuffer(${(0,_truncateMessage_mjs__WEBPACK_IMPORTED_MODULE_0__.truncateMessage)(text)})`;\n  }\n  return (0,_truncateMessage_mjs__WEBPACK_IMPORTED_MODULE_0__.truncateMessage)(data);\n}\n\n//# sourceMappingURL=getPublicData.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3dzL3V0aWxzL2dldFB1YmxpY0RhdGEubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixxRUFBZSxPQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxRUFBZSxPQUFPO0FBQ2hEO0FBQ0EsU0FBUyxxRUFBZTtBQUN4QjtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtvbGFzL25pay9pcXVwL25vZGVfbW9kdWxlcy9tc3cvbGliL2NvcmUvd3MvdXRpbHMvZ2V0UHVibGljRGF0YS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJ1bmNhdGVNZXNzYWdlIH0gZnJvbSAnLi90cnVuY2F0ZU1lc3NhZ2UubWpzJztcbmFzeW5jIGZ1bmN0aW9uIGdldFB1YmxpY0RhdGEoZGF0YSkge1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICBjb25zdCB0ZXh0ID0gYXdhaXQgZGF0YS50ZXh0KCk7XG4gICAgcmV0dXJuIGBCbG9iKCR7dHJ1bmNhdGVNZXNzYWdlKHRleHQpfSlgO1xuICB9XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiAmJiBcImJ5dGVMZW5ndGhcIiBpbiBkYXRhKSB7XG4gICAgY29uc3QgdGV4dCA9IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShkYXRhKTtcbiAgICByZXR1cm4gYEFycmF5QnVmZmVyKCR7dHJ1bmNhdGVNZXNzYWdlKHRleHQpfSlgO1xuICB9XG4gIHJldHVybiB0cnVuY2F0ZU1lc3NhZ2UoZGF0YSk7XG59XG5leHBvcnQge1xuICBnZXRQdWJsaWNEYXRhXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0UHVibGljRGF0YS5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/ws/utils/getPublicData.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/ws/utils/truncateMessage.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/msw/lib/core/ws/utils/truncateMessage.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   truncateMessage: () => (/* binding */ truncateMessage)\n/* harmony export */ });\nconst MAX_LENGTH = 24;\nfunction truncateMessage(message) {\n  if (message.length <= MAX_LENGTH) {\n    return message;\n  }\n  return `${message.slice(0, MAX_LENGTH)}\\u2026`;\n}\n\n//# sourceMappingURL=truncateMessage.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3dzL3V0aWxzL3RydW5jYXRlTWVzc2FnZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZCQUE2QjtBQUN6QztBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtvbGFzL25pay9pcXVwL25vZGVfbW9kdWxlcy9tc3cvbGliL2NvcmUvd3MvdXRpbHMvdHJ1bmNhdGVNZXNzYWdlLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBNQVhfTEVOR1RIID0gMjQ7XG5mdW5jdGlvbiB0cnVuY2F0ZU1lc3NhZ2UobWVzc2FnZSkge1xuICBpZiAobWVzc2FnZS5sZW5ndGggPD0gTUFYX0xFTkdUSCkge1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG4gIHJldHVybiBgJHttZXNzYWdlLnNsaWNlKDAsIE1BWF9MRU5HVEgpfVxcdTIwMjZgO1xufVxuZXhwb3J0IHtcbiAgdHJ1bmNhdGVNZXNzYWdlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJ1bmNhdGVNZXNzYWdlLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/ws/utils/truncateMessage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/lib/core/ws/webSocketInterceptor.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/msw/lib/core/ws/webSocketInterceptor.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   webSocketInterceptor: () => (/* binding */ webSocketInterceptor)\n/* harmony export */ });\n/* harmony import */ var _mswjs_interceptors_WebSocket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mswjs/interceptors/WebSocket */ \"(ssr)/./node_modules/@mswjs/interceptors/lib/browser/interceptors/WebSocket/index.mjs\");\n\nconst webSocketInterceptor = new _mswjs_interceptors_WebSocket__WEBPACK_IMPORTED_MODULE_0__.WebSocketInterceptor();\n\n//# sourceMappingURL=webSocketInterceptor.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXN3L2xpYi9jb3JlL3dzL3dlYlNvY2tldEludGVyY2VwdG9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTtBQUNyRSxpQ0FBaUMsK0VBQW9CO0FBR25EO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWtvbGFzL25pay9pcXVwL25vZGVfbW9kdWxlcy9tc3cvbGliL2NvcmUvd3Mvd2ViU29ja2V0SW50ZXJjZXB0b3IubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdlYlNvY2tldEludGVyY2VwdG9yIH0gZnJvbSBcIkBtc3dqcy9pbnRlcmNlcHRvcnMvV2ViU29ja2V0XCI7XG5jb25zdCB3ZWJTb2NrZXRJbnRlcmNlcHRvciA9IG5ldyBXZWJTb2NrZXRJbnRlcmNlcHRvcigpO1xuZXhwb3J0IHtcbiAgd2ViU29ja2V0SW50ZXJjZXB0b3Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWJTb2NrZXRJbnRlcmNlcHRvci5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/lib/core/ws/webSocketInterceptor.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/msw/node_modules/tough-cookie/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/msw/node_modules/tough-cookie/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cookie: () => (/* binding */ Cookie),\n/* harmony export */   CookieJar: () => (/* binding */ CookieJar),\n/* harmony export */   MemoryCookieStore: () => (/* binding */ MemoryCookieStore),\n/* harmony export */   ParameterError: () => (/* binding */ ParameterError),\n/* harmony export */   PrefixSecurityEnum: () => (/* binding */ PrefixSecurityEnum),\n/* harmony export */   Store: () => (/* binding */ Store),\n/* harmony export */   canonicalDomain: () => (/* binding */ canonicalDomain),\n/* harmony export */   cookieCompare: () => (/* binding */ cookieCompare),\n/* harmony export */   defaultPath: () => (/* binding */ defaultPath),\n/* harmony export */   domainMatch: () => (/* binding */ domainMatch),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   fromJSON: () => (/* binding */ fromJSON2),\n/* harmony export */   getPublicSuffix: () => (/* binding */ getPublicSuffix),\n/* harmony export */   parse: () => (/* binding */ parse2),\n/* harmony export */   parseDate: () => (/* binding */ parseDate),\n/* harmony export */   pathMatch: () => (/* binding */ pathMatch),\n/* harmony export */   permuteDomain: () => (/* binding */ permuteDomain),\n/* harmony export */   permutePath: () => (/* binding */ permutePath),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var tldts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tldts */ \"(ssr)/./node_modules/tldts/dist/es6/index.js\");\n// lib/pathMatch.ts\nfunction pathMatch(reqPath, cookiePath) {\n  if (cookiePath === reqPath) {\n    return true;\n  }\n  const idx = reqPath.indexOf(cookiePath);\n  if (idx === 0) {\n    if (cookiePath[cookiePath.length - 1] === \"/\") {\n      return true;\n    }\n    if (reqPath.startsWith(cookiePath) && reqPath[cookiePath.length] === \"/\") {\n      return true;\n    }\n  }\n  return false;\n}\n\n// lib/getPublicSuffix.ts\n\nvar SPECIAL_USE_DOMAINS = [\"local\", \"example\", \"invalid\", \"localhost\", \"test\"];\nvar SPECIAL_TREATMENT_DOMAINS = [\"localhost\", \"invalid\"];\nvar defaultGetPublicSuffixOptions = {\n  allowSpecialUseDomain: false,\n  ignoreError: false\n};\nfunction getPublicSuffix(domain, options = {}) {\n  options = { ...defaultGetPublicSuffixOptions, ...options };\n  const domainParts = domain.split(\".\");\n  const topLevelDomain = domainParts[domainParts.length - 1];\n  const allowSpecialUseDomain = !!options.allowSpecialUseDomain;\n  const ignoreError = !!options.ignoreError;\n  if (allowSpecialUseDomain && topLevelDomain !== void 0 && SPECIAL_USE_DOMAINS.includes(topLevelDomain)) {\n    if (domainParts.length > 1) {\n      const secondLevelDomain = domainParts[domainParts.length - 2];\n      return `${secondLevelDomain}.${topLevelDomain}`;\n    } else if (SPECIAL_TREATMENT_DOMAINS.includes(topLevelDomain)) {\n      return topLevelDomain;\n    }\n  }\n  if (!ignoreError && topLevelDomain !== void 0 && SPECIAL_USE_DOMAINS.includes(topLevelDomain)) {\n    throw new Error(\n      `Cookie has domain set to the public suffix \"${topLevelDomain}\" which is a special use domain. To allow this, configure your CookieJar with {allowSpecialUseDomain: true, rejectPublicSuffixes: false}.`\n    );\n  }\n  const publicSuffix = (0,tldts__WEBPACK_IMPORTED_MODULE_0__.getDomain)(domain, {\n    allowIcannDomains: true,\n    allowPrivateDomains: true\n  });\n  if (publicSuffix) return publicSuffix;\n}\n\n// lib/permuteDomain.ts\nfunction permuteDomain(domain, allowSpecialUseDomain) {\n  const pubSuf = getPublicSuffix(domain, {\n    allowSpecialUseDomain\n  });\n  if (!pubSuf) {\n    return void 0;\n  }\n  if (pubSuf == domain) {\n    return [domain];\n  }\n  if (domain.slice(-1) == \".\") {\n    domain = domain.slice(0, -1);\n  }\n  const prefix = domain.slice(0, -(pubSuf.length + 1));\n  const parts = prefix.split(\".\").reverse();\n  let cur = pubSuf;\n  const permutations = [cur];\n  while (parts.length) {\n    const part = parts.shift();\n    cur = `${part}.${cur}`;\n    permutations.push(cur);\n  }\n  return permutations;\n}\n\n// lib/store.ts\nvar Store = class {\n  constructor() {\n    this.synchronous = false;\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  findCookie(_domain, _path, _key, _callback) {\n    throw new Error(\"findCookie is not implemented\");\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  findCookies(_domain, _path, _allowSpecialUseDomain = false, _callback) {\n    throw new Error(\"findCookies is not implemented\");\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  putCookie(_cookie, _callback) {\n    throw new Error(\"putCookie is not implemented\");\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  updateCookie(_oldCookie, _newCookie, _callback) {\n    throw new Error(\"updateCookie is not implemented\");\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  removeCookie(_domain, _path, _key, _callback) {\n    throw new Error(\"removeCookie is not implemented\");\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  removeCookies(_domain, _path, _callback) {\n    throw new Error(\"removeCookies is not implemented\");\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  removeAllCookies(_callback) {\n    throw new Error(\"removeAllCookies is not implemented\");\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  getAllCookies(_callback) {\n    throw new Error(\n      \"getAllCookies is not implemented (therefore jar cannot be serialized)\"\n    );\n  }\n};\n\n// lib/utils.ts\nvar objectToString = (obj) => Object.prototype.toString.call(obj);\nvar safeArrayToString = (arr, seenArrays) => {\n  if (typeof arr.join !== \"function\") return objectToString(arr);\n  seenArrays.add(arr);\n  const mapped = arr.map(\n    (val) => val === null || val === void 0 || seenArrays.has(val) ? \"\" : safeToStringImpl(val, seenArrays)\n  );\n  return mapped.join();\n};\nvar safeToStringImpl = (val, seenArrays = /* @__PURE__ */ new WeakSet()) => {\n  if (typeof val !== \"object\" || val === null) {\n    return String(val);\n  } else if (typeof val.toString === \"function\") {\n    return Array.isArray(val) ? (\n      // Arrays have a weird custom toString that we need to replicate\n      safeArrayToString(val, seenArrays)\n    ) : (\n      // eslint-disable-next-line @typescript-eslint/no-base-to-string\n      String(val)\n    );\n  } else {\n    return objectToString(val);\n  }\n};\nvar safeToString = (val) => safeToStringImpl(val);\nfunction createPromiseCallback(cb) {\n  let callback;\n  let resolve;\n  let reject;\n  const promise = new Promise((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  if (typeof cb === \"function\") {\n    callback = (err, result) => {\n      try {\n        if (err) cb(err);\n        else cb(null, result);\n      } catch (e) {\n        reject(e instanceof Error ? e : new Error());\n      }\n    };\n  } else {\n    callback = (err, result) => {\n      try {\n        if (err) reject(err);\n        else resolve(result);\n      } catch (e) {\n        reject(e instanceof Error ? e : new Error());\n      }\n    };\n  }\n  return {\n    promise,\n    callback,\n    resolve: (value) => {\n      callback(null, value);\n      return promise;\n    },\n    reject: (error) => {\n      callback(error);\n      return promise;\n    }\n  };\n}\nfunction inOperator(k, o) {\n  return k in o;\n}\n\n// lib/memstore.ts\nvar MemoryCookieStore = class extends Store {\n  /**\n   * Create a new {@link MemoryCookieStore}.\n   */\n  constructor() {\n    super();\n    this.synchronous = true;\n    this.idx = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  findCookie(domain, path, key, callback) {\n    const promiseCallback = createPromiseCallback(callback);\n    if (domain == null || path == null || key == null) {\n      return promiseCallback.resolve(void 0);\n    }\n    const result = this.idx[domain]?.[path]?.[key];\n    return promiseCallback.resolve(result);\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  findCookies(domain, path, allowSpecialUseDomain = false, callback) {\n    if (typeof allowSpecialUseDomain === \"function\") {\n      callback = allowSpecialUseDomain;\n      allowSpecialUseDomain = true;\n    }\n    const results = [];\n    const promiseCallback = createPromiseCallback(callback);\n    if (!domain) {\n      return promiseCallback.resolve([]);\n    }\n    let pathMatcher;\n    if (!path) {\n      pathMatcher = function matchAll(domainIndex) {\n        for (const curPath in domainIndex) {\n          const pathIndex = domainIndex[curPath];\n          for (const key in pathIndex) {\n            const value = pathIndex[key];\n            if (value) {\n              results.push(value);\n            }\n          }\n        }\n      };\n    } else {\n      pathMatcher = function matchRFC(domainIndex) {\n        for (const cookiePath in domainIndex) {\n          if (pathMatch(path, cookiePath)) {\n            const pathIndex = domainIndex[cookiePath];\n            for (const key in pathIndex) {\n              const value = pathIndex[key];\n              if (value) {\n                results.push(value);\n              }\n            }\n          }\n        }\n      };\n    }\n    const domains = permuteDomain(domain, allowSpecialUseDomain) || [domain];\n    const idx = this.idx;\n    domains.forEach((curDomain) => {\n      const domainIndex = idx[curDomain];\n      if (!domainIndex) {\n        return;\n      }\n      pathMatcher(domainIndex);\n    });\n    return promiseCallback.resolve(results);\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  putCookie(cookie, callback) {\n    const promiseCallback = createPromiseCallback(callback);\n    const { domain, path, key } = cookie;\n    if (domain == null || path == null || key == null) {\n      return promiseCallback.resolve(void 0);\n    }\n    const domainEntry = this.idx[domain] ?? /* @__PURE__ */ Object.create(null);\n    this.idx[domain] = domainEntry;\n    const pathEntry = domainEntry[path] ?? /* @__PURE__ */ Object.create(null);\n    domainEntry[path] = pathEntry;\n    pathEntry[key] = cookie;\n    return promiseCallback.resolve(void 0);\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  updateCookie(_oldCookie, newCookie, callback) {\n    if (callback) this.putCookie(newCookie, callback);\n    else return this.putCookie(newCookie);\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  removeCookie(domain, path, key, callback) {\n    const promiseCallback = createPromiseCallback(callback);\n    delete this.idx[domain]?.[path]?.[key];\n    return promiseCallback.resolve(void 0);\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  removeCookies(domain, path, callback) {\n    const promiseCallback = createPromiseCallback(callback);\n    const domainEntry = this.idx[domain];\n    if (domainEntry) {\n      if (path) {\n        delete domainEntry[path];\n      } else {\n        delete this.idx[domain];\n      }\n    }\n    return promiseCallback.resolve(void 0);\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  removeAllCookies(callback) {\n    const promiseCallback = createPromiseCallback(callback);\n    this.idx = /* @__PURE__ */ Object.create(null);\n    return promiseCallback.resolve(void 0);\n  }\n  /**\n   * @internal No doc because this is an overload that supports the implementation\n   */\n  getAllCookies(callback) {\n    const promiseCallback = createPromiseCallback(callback);\n    const cookies = [];\n    const idx = this.idx;\n    const domains = Object.keys(idx);\n    domains.forEach((domain) => {\n      const domainEntry = idx[domain] ?? {};\n      const paths = Object.keys(domainEntry);\n      paths.forEach((path) => {\n        const pathEntry = domainEntry[path] ?? {};\n        const keys = Object.keys(pathEntry);\n        keys.forEach((key) => {\n          const keyEntry = pathEntry[key];\n          if (keyEntry != null) {\n            cookies.push(keyEntry);\n          }\n        });\n      });\n    });\n    cookies.sort((a, b) => {\n      return (a.creationIndex || 0) - (b.creationIndex || 0);\n    });\n    return promiseCallback.resolve(cookies);\n  }\n};\n\n// lib/validators.ts\nfunction isNonEmptyString(data) {\n  return isString(data) && data !== \"\";\n}\nfunction isEmptyString(data) {\n  return data === \"\" || data instanceof String && data.toString() === \"\";\n}\nfunction isString(data) {\n  return typeof data === \"string\" || data instanceof String;\n}\nfunction isObject(data) {\n  return objectToString(data) === \"[object Object]\";\n}\nfunction validate(bool, cbOrMessage, message) {\n  if (bool) return;\n  const cb = typeof cbOrMessage === \"function\" ? cbOrMessage : void 0;\n  let options = typeof cbOrMessage === \"function\" ? message : cbOrMessage;\n  if (!isObject(options)) options = \"[object Object]\";\n  const err = new ParameterError(safeToString(options));\n  if (cb) cb(err);\n  else throw err;\n}\nvar ParameterError = class extends Error {\n};\n\n// lib/version.ts\nvar version = \"6.0.0\";\n\n// lib/cookie/constants.ts\nvar PrefixSecurityEnum = {\n  SILENT: \"silent\",\n  STRICT: \"strict\",\n  DISABLED: \"unsafe-disabled\"\n};\nObject.freeze(PrefixSecurityEnum);\nvar IP_V6_REGEX = `\n\\\\[?(?:\n(?:[a-fA-F\\\\d]{1,4}:){7}(?:[a-fA-F\\\\d]{1,4}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|:[a-fA-F\\\\d]{1,4}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,2}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){4}(?:(?::[a-fA-F\\\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,3}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){3}(?:(?::[a-fA-F\\\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,4}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){2}(?:(?::[a-fA-F\\\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,5}|:)|\n(?:[a-fA-F\\\\d]{1,4}:){1}(?:(?::[a-fA-F\\\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,6}|:)|\n(?::(?:(?::[a-fA-F\\\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}|(?::[a-fA-F\\\\d]{1,4}){1,7}|:))\n)(?:%[0-9a-zA-Z]{1,})?\\\\]?\n`.replace(/\\s*\\/\\/.*$/gm, \"\").replace(/\\n/g, \"\").trim();\nvar IP_V6_REGEX_OBJECT = new RegExp(`^${IP_V6_REGEX}$`);\nvar IP_V4_REGEX = `(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])`;\nvar IP_V4_REGEX_OBJECT = new RegExp(`^${IP_V4_REGEX}$`);\n\n// lib/cookie/canonicalDomain.ts\nfunction domainToASCII(domain) {\n  return new URL(`http://${domain}`).hostname;\n}\nfunction canonicalDomain(domainName) {\n  if (domainName == null) {\n    return void 0;\n  }\n  let str = domainName.trim().replace(/^\\./, \"\");\n  if (IP_V6_REGEX_OBJECT.test(str)) {\n    if (!str.startsWith(\"[\")) {\n      str = \"[\" + str;\n    }\n    if (!str.endsWith(\"]\")) {\n      str = str + \"]\";\n    }\n    return domainToASCII(str).slice(1, -1);\n  }\n  if (/[^\\u0001-\\u007f]/.test(str)) {\n    return domainToASCII(str);\n  }\n  return str.toLowerCase();\n}\n\n// lib/cookie/formatDate.ts\nfunction formatDate(date) {\n  return date.toUTCString();\n}\n\n// lib/cookie/parseDate.ts\nvar DATE_DELIM = /[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]/;\nvar MONTH_TO_NUM = {\n  jan: 0,\n  feb: 1,\n  mar: 2,\n  apr: 3,\n  may: 4,\n  jun: 5,\n  jul: 6,\n  aug: 7,\n  sep: 8,\n  oct: 9,\n  nov: 10,\n  dec: 11\n};\nfunction parseDigits(token, minDigits, maxDigits, trailingOK) {\n  let count = 0;\n  while (count < token.length) {\n    const c = token.charCodeAt(count);\n    if (c <= 47 || c >= 58) {\n      break;\n    }\n    count++;\n  }\n  if (count < minDigits || count > maxDigits) {\n    return;\n  }\n  if (!trailingOK && count != token.length) {\n    return;\n  }\n  return parseInt(token.slice(0, count), 10);\n}\nfunction parseTime(token) {\n  const parts = token.split(\":\");\n  const result = [0, 0, 0];\n  if (parts.length !== 3) {\n    return;\n  }\n  for (let i = 0; i < 3; i++) {\n    const trailingOK = i == 2;\n    const numPart = parts[i];\n    if (numPart === void 0) {\n      return;\n    }\n    const num = parseDigits(numPart, 1, 2, trailingOK);\n    if (num === void 0) {\n      return;\n    }\n    result[i] = num;\n  }\n  return result;\n}\nfunction parseMonth(token) {\n  token = String(token).slice(0, 3).toLowerCase();\n  switch (token) {\n    case \"jan\":\n      return MONTH_TO_NUM.jan;\n    case \"feb\":\n      return MONTH_TO_NUM.feb;\n    case \"mar\":\n      return MONTH_TO_NUM.mar;\n    case \"apr\":\n      return MONTH_TO_NUM.apr;\n    case \"may\":\n      return MONTH_TO_NUM.may;\n    case \"jun\":\n      return MONTH_TO_NUM.jun;\n    case \"jul\":\n      return MONTH_TO_NUM.jul;\n    case \"aug\":\n      return MONTH_TO_NUM.aug;\n    case \"sep\":\n      return MONTH_TO_NUM.sep;\n    case \"oct\":\n      return MONTH_TO_NUM.oct;\n    case \"nov\":\n      return MONTH_TO_NUM.nov;\n    case \"dec\":\n      return MONTH_TO_NUM.dec;\n    default:\n      return;\n  }\n}\nfunction parseDate(cookieDate) {\n  if (!cookieDate) {\n    return;\n  }\n  const tokens = cookieDate.split(DATE_DELIM);\n  let hour;\n  let minute;\n  let second;\n  let dayOfMonth;\n  let month;\n  let year;\n  for (let i = 0; i < tokens.length; i++) {\n    const token = (tokens[i] ?? \"\").trim();\n    if (!token.length) {\n      continue;\n    }\n    if (second === void 0) {\n      const result = parseTime(token);\n      if (result) {\n        hour = result[0];\n        minute = result[1];\n        second = result[2];\n        continue;\n      }\n    }\n    if (dayOfMonth === void 0) {\n      const result = parseDigits(token, 1, 2, true);\n      if (result !== void 0) {\n        dayOfMonth = result;\n        continue;\n      }\n    }\n    if (month === void 0) {\n      const result = parseMonth(token);\n      if (result !== void 0) {\n        month = result;\n        continue;\n      }\n    }\n    if (year === void 0) {\n      const result = parseDigits(token, 2, 4, true);\n      if (result !== void 0) {\n        year = result;\n        if (year >= 70 && year <= 99) {\n          year += 1900;\n        } else if (year >= 0 && year <= 69) {\n          year += 2e3;\n        }\n      }\n    }\n  }\n  if (dayOfMonth === void 0 || month === void 0 || year === void 0 || hour === void 0 || minute === void 0 || second === void 0 || dayOfMonth < 1 || dayOfMonth > 31 || year < 1601 || hour > 23 || minute > 59 || second > 59) {\n    return;\n  }\n  return new Date(Date.UTC(year, month, dayOfMonth, hour, minute, second));\n}\n\n// lib/cookie/cookie.ts\nvar COOKIE_OCTETS = /^[\\x21\\x23-\\x2B\\x2D-\\x3A\\x3C-\\x5B\\x5D-\\x7E]+$/;\nvar PATH_VALUE = /[\\x20-\\x3A\\x3C-\\x7E]+/;\nvar CONTROL_CHARS = /[\\x00-\\x1F]/;\nvar TERMINATORS = [\"\\n\", \"\\r\", \"\\0\"];\nfunction trimTerminator(str) {\n  if (isEmptyString(str)) return str;\n  for (let t = 0; t < TERMINATORS.length; t++) {\n    const terminator = TERMINATORS[t];\n    const terminatorIdx = terminator ? str.indexOf(terminator) : -1;\n    if (terminatorIdx !== -1) {\n      str = str.slice(0, terminatorIdx);\n    }\n  }\n  return str;\n}\nfunction parseCookiePair(cookiePair, looseMode) {\n  cookiePair = trimTerminator(cookiePair);\n  let firstEq = cookiePair.indexOf(\"=\");\n  if (looseMode) {\n    if (firstEq === 0) {\n      cookiePair = cookiePair.substring(1);\n      firstEq = cookiePair.indexOf(\"=\");\n    }\n  } else {\n    if (firstEq <= 0) {\n      return void 0;\n    }\n  }\n  let cookieName, cookieValue;\n  if (firstEq <= 0) {\n    cookieName = \"\";\n    cookieValue = cookiePair.trim();\n  } else {\n    cookieName = cookiePair.slice(0, firstEq).trim();\n    cookieValue = cookiePair.slice(firstEq + 1).trim();\n  }\n  if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {\n    return void 0;\n  }\n  const c = new Cookie();\n  c.key = cookieName;\n  c.value = cookieValue;\n  return c;\n}\nfunction parse(str, options) {\n  if (isEmptyString(str) || !isString(str)) {\n    return void 0;\n  }\n  str = str.trim();\n  const firstSemi = str.indexOf(\";\");\n  const cookiePair = firstSemi === -1 ? str : str.slice(0, firstSemi);\n  const c = parseCookiePair(cookiePair, options?.loose ?? false);\n  if (!c) {\n    return void 0;\n  }\n  if (firstSemi === -1) {\n    return c;\n  }\n  const unparsed = str.slice(firstSemi + 1).trim();\n  if (unparsed.length === 0) {\n    return c;\n  }\n  const cookie_avs = unparsed.split(\";\");\n  while (cookie_avs.length) {\n    const av = (cookie_avs.shift() ?? \"\").trim();\n    if (av.length === 0) {\n      continue;\n    }\n    const av_sep = av.indexOf(\"=\");\n    let av_key, av_value;\n    if (av_sep === -1) {\n      av_key = av;\n      av_value = null;\n    } else {\n      av_key = av.slice(0, av_sep);\n      av_value = av.slice(av_sep + 1);\n    }\n    av_key = av_key.trim().toLowerCase();\n    if (av_value) {\n      av_value = av_value.trim();\n    }\n    switch (av_key) {\n      case \"expires\":\n        if (av_value) {\n          const exp = parseDate(av_value);\n          if (exp) {\n            c.expires = exp;\n          }\n        }\n        break;\n      case \"max-age\":\n        if (av_value) {\n          if (/^-?[0-9]+$/.test(av_value)) {\n            const delta = parseInt(av_value, 10);\n            c.setMaxAge(delta);\n          }\n        }\n        break;\n      case \"domain\":\n        if (av_value) {\n          const domain = av_value.trim().replace(/^\\./, \"\");\n          if (domain) {\n            c.domain = domain.toLowerCase();\n          }\n        }\n        break;\n      case \"path\":\n        c.path = av_value && av_value[0] === \"/\" ? av_value : null;\n        break;\n      case \"secure\":\n        c.secure = true;\n        break;\n      case \"httponly\":\n        c.httpOnly = true;\n        break;\n      case \"samesite\":\n        switch (av_value ? av_value.toLowerCase() : \"\") {\n          case \"strict\":\n            c.sameSite = \"strict\";\n            break;\n          case \"lax\":\n            c.sameSite = \"lax\";\n            break;\n          case \"none\":\n            c.sameSite = \"none\";\n            break;\n          default:\n            c.sameSite = void 0;\n            break;\n        }\n        break;\n      default:\n        c.extensions = c.extensions || [];\n        c.extensions.push(av);\n        break;\n    }\n  }\n  return c;\n}\nfunction fromJSON(str) {\n  if (!str || isEmptyString(str)) {\n    return void 0;\n  }\n  let obj;\n  if (typeof str === \"string\") {\n    try {\n      obj = JSON.parse(str);\n    } catch {\n      return void 0;\n    }\n  } else {\n    obj = str;\n  }\n  const c = new Cookie();\n  Cookie.serializableProperties.forEach((prop) => {\n    if (obj && typeof obj === \"object\" && inOperator(prop, obj)) {\n      const val = obj[prop];\n      if (val === void 0) {\n        return;\n      }\n      if (inOperator(prop, cookieDefaults) && val === cookieDefaults[prop]) {\n        return;\n      }\n      switch (prop) {\n        case \"key\":\n        case \"value\":\n        case \"sameSite\":\n          if (typeof val === \"string\") {\n            c[prop] = val;\n          }\n          break;\n        case \"expires\":\n        case \"creation\":\n        case \"lastAccessed\":\n          if (typeof val === \"number\" || typeof val === \"string\" || val instanceof Date) {\n            c[prop] = obj[prop] == \"Infinity\" ? \"Infinity\" : new Date(val);\n          } else if (val === null) {\n            c[prop] = null;\n          }\n          break;\n        case \"maxAge\":\n          if (typeof val === \"number\" || val === \"Infinity\" || val === \"-Infinity\") {\n            c[prop] = val;\n          }\n          break;\n        case \"domain\":\n        case \"path\":\n          if (typeof val === \"string\" || val === null) {\n            c[prop] = val;\n          }\n          break;\n        case \"secure\":\n        case \"httpOnly\":\n          if (typeof val === \"boolean\") {\n            c[prop] = val;\n          }\n          break;\n        case \"extensions\":\n          if (Array.isArray(val) && val.every((item) => typeof item === \"string\")) {\n            c[prop] = val;\n          }\n          break;\n        case \"hostOnly\":\n        case \"pathIsDefault\":\n          if (typeof val === \"boolean\" || val === null) {\n            c[prop] = val;\n          }\n          break;\n      }\n    }\n  });\n  return c;\n}\nvar cookieDefaults = {\n  // the order in which the RFC has them:\n  key: \"\",\n  value: \"\",\n  expires: \"Infinity\",\n  maxAge: null,\n  domain: null,\n  path: null,\n  secure: false,\n  httpOnly: false,\n  extensions: null,\n  // set by the CookieJar:\n  hostOnly: null,\n  pathIsDefault: null,\n  creation: null,\n  lastAccessed: null,\n  sameSite: void 0\n};\nvar _Cookie = class _Cookie {\n  /**\n   * Create a new Cookie instance.\n   * @public\n   * @param options - The attributes to set on the cookie\n   */\n  constructor(options = {}) {\n    this.key = options.key ?? cookieDefaults.key;\n    this.value = options.value ?? cookieDefaults.value;\n    this.expires = options.expires ?? cookieDefaults.expires;\n    this.maxAge = options.maxAge ?? cookieDefaults.maxAge;\n    this.domain = options.domain ?? cookieDefaults.domain;\n    this.path = options.path ?? cookieDefaults.path;\n    this.secure = options.secure ?? cookieDefaults.secure;\n    this.httpOnly = options.httpOnly ?? cookieDefaults.httpOnly;\n    this.extensions = options.extensions ?? cookieDefaults.extensions;\n    this.creation = options.creation ?? cookieDefaults.creation;\n    this.hostOnly = options.hostOnly ?? cookieDefaults.hostOnly;\n    this.pathIsDefault = options.pathIsDefault ?? cookieDefaults.pathIsDefault;\n    this.lastAccessed = options.lastAccessed ?? cookieDefaults.lastAccessed;\n    this.sameSite = options.sameSite ?? cookieDefaults.sameSite;\n    this.creation = options.creation ?? /* @__PURE__ */ new Date();\n    Object.defineProperty(this, \"creationIndex\", {\n      configurable: false,\n      enumerable: false,\n      // important for assert.deepEqual checks\n      writable: true,\n      value: ++_Cookie.cookiesCreated\n    });\n    this.creationIndex = _Cookie.cookiesCreated;\n  }\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    const now = Date.now();\n    const hostOnly = this.hostOnly != null ? this.hostOnly.toString() : \"?\";\n    const createAge = this.creation && this.creation !== \"Infinity\" ? `${String(now - this.creation.getTime())}ms` : \"?\";\n    const accessAge = this.lastAccessed && this.lastAccessed !== \"Infinity\" ? `${String(now - this.lastAccessed.getTime())}ms` : \"?\";\n    return `Cookie=\"${this.toString()}; hostOnly=${hostOnly}; aAge=${accessAge}; cAge=${createAge}\"`;\n  }\n  /**\n   * For convenience in using `JSON.stringify(cookie)`. Returns a plain-old Object that can be JSON-serialized.\n   *\n   * @remarks\n   * - Any `Date` properties (such as {@link Cookie.expires}, {@link Cookie.creation}, and {@link Cookie.lastAccessed}) are exported in ISO format (`Date.toISOString()`).\n   *\n   *  - Custom Cookie properties are discarded. In tough-cookie 1.x, since there was no {@link Cookie.toJSON} method explicitly defined, all enumerable properties were captured.\n   *      If you want a property to be serialized, add the property name to {@link Cookie.serializableProperties}.\n   */\n  toJSON() {\n    const obj = {};\n    for (const prop of _Cookie.serializableProperties) {\n      const val = this[prop];\n      if (val === cookieDefaults[prop]) {\n        continue;\n      }\n      switch (prop) {\n        case \"key\":\n        case \"value\":\n        case \"sameSite\":\n          if (typeof val === \"string\") {\n            obj[prop] = val;\n          }\n          break;\n        case \"expires\":\n        case \"creation\":\n        case \"lastAccessed\":\n          if (typeof val === \"number\" || typeof val === \"string\" || val instanceof Date) {\n            obj[prop] = val == \"Infinity\" ? \"Infinity\" : new Date(val).toISOString();\n          } else if (val === null) {\n            obj[prop] = null;\n          }\n          break;\n        case \"maxAge\":\n          if (typeof val === \"number\" || val === \"Infinity\" || val === \"-Infinity\") {\n            obj[prop] = val;\n          }\n          break;\n        case \"domain\":\n        case \"path\":\n          if (typeof val === \"string\" || val === null) {\n            obj[prop] = val;\n          }\n          break;\n        case \"secure\":\n        case \"httpOnly\":\n          if (typeof val === \"boolean\") {\n            obj[prop] = val;\n          }\n          break;\n        case \"extensions\":\n          if (Array.isArray(val)) {\n            obj[prop] = val;\n          }\n          break;\n        case \"hostOnly\":\n        case \"pathIsDefault\":\n          if (typeof val === \"boolean\" || val === null) {\n            obj[prop] = val;\n          }\n          break;\n      }\n    }\n    return obj;\n  }\n  /**\n   * Does a deep clone of this cookie, implemented exactly as `Cookie.fromJSON(cookie.toJSON())`.\n   * @public\n   */\n  clone() {\n    return fromJSON(this.toJSON());\n  }\n  /**\n   * Validates cookie attributes for semantic correctness. Useful for \"lint\" checking any `Set-Cookie` headers you generate.\n   * For now, it returns a boolean, but eventually could return a reason string.\n   *\n   * @remarks\n   * Works for a few things, but is by no means comprehensive.\n   *\n   * @beta\n   */\n  validate() {\n    if (!this.value || !COOKIE_OCTETS.test(this.value)) {\n      return false;\n    }\n    if (this.expires != \"Infinity\" && !(this.expires instanceof Date) && !parseDate(this.expires)) {\n      return false;\n    }\n    if (this.maxAge != null && this.maxAge !== \"Infinity\" && (this.maxAge === \"-Infinity\" || this.maxAge <= 0)) {\n      return false;\n    }\n    if (this.path != null && !PATH_VALUE.test(this.path)) {\n      return false;\n    }\n    const cdomain = this.cdomain();\n    if (cdomain) {\n      if (cdomain.match(/\\.$/)) {\n        return false;\n      }\n      const suffix = getPublicSuffix(cdomain);\n      if (suffix == null) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Sets the 'Expires' attribute on a cookie.\n   *\n   * @remarks\n   * When given a `string` value it will be parsed with {@link parseDate}. If the value can't be parsed as a cookie date\n   * then the 'Expires' attribute will be set to `\"Infinity\"`.\n   *\n   * @param exp - the new value for the 'Expires' attribute of the cookie.\n   */\n  setExpires(exp) {\n    if (exp instanceof Date) {\n      this.expires = exp;\n    } else {\n      this.expires = parseDate(exp) || \"Infinity\";\n    }\n  }\n  /**\n   * Sets the 'Max-Age' attribute (in seconds) on a cookie.\n   *\n   * @remarks\n   * Coerces `-Infinity` to `\"-Infinity\"` and `Infinity` to `\"Infinity\"` so it can be serialized to JSON.\n   *\n   * @param age - the new value for the 'Max-Age' attribute (in seconds).\n   */\n  setMaxAge(age) {\n    if (age === Infinity) {\n      this.maxAge = \"Infinity\";\n    } else if (age === -Infinity) {\n      this.maxAge = \"-Infinity\";\n    } else {\n      this.maxAge = age;\n    }\n  }\n  /**\n   * Encodes to a `Cookie` header value (specifically, the {@link Cookie.key} and {@link Cookie.value} properties joined with \"=\").\n   * @public\n   */\n  cookieString() {\n    const val = this.value || \"\";\n    if (this.key) {\n      return `${this.key}=${val}`;\n    }\n    return val;\n  }\n  /**\n   * Encodes to a `Set-Cookie header` value.\n   * @public\n   */\n  toString() {\n    let str = this.cookieString();\n    if (this.expires != \"Infinity\") {\n      if (this.expires instanceof Date) {\n        str += `; Expires=${formatDate(this.expires)}`;\n      }\n    }\n    if (this.maxAge != null && this.maxAge != Infinity) {\n      str += `; Max-Age=${String(this.maxAge)}`;\n    }\n    if (this.domain && !this.hostOnly) {\n      str += `; Domain=${this.domain}`;\n    }\n    if (this.path) {\n      str += `; Path=${this.path}`;\n    }\n    if (this.secure) {\n      str += \"; Secure\";\n    }\n    if (this.httpOnly) {\n      str += \"; HttpOnly\";\n    }\n    if (this.sameSite && this.sameSite !== \"none\") {\n      if (this.sameSite.toLowerCase() === _Cookie.sameSiteCanonical.lax.toLowerCase()) {\n        str += `; SameSite=${_Cookie.sameSiteCanonical.lax}`;\n      } else if (this.sameSite.toLowerCase() === _Cookie.sameSiteCanonical.strict.toLowerCase()) {\n        str += `; SameSite=${_Cookie.sameSiteCanonical.strict}`;\n      } else {\n        str += `; SameSite=${this.sameSite}`;\n      }\n    }\n    if (this.extensions) {\n      this.extensions.forEach((ext) => {\n        str += `; ${ext}`;\n      });\n    }\n    return str;\n  }\n  /**\n   * Computes the TTL relative to now (milliseconds).\n   *\n   * @remarks\n   * - `Infinity` is returned for cookies without an explicit expiry\n   *\n   * - `0` is returned if the cookie is expired.\n   *\n   * - Otherwise a time-to-live in milliseconds is returned.\n   *\n   * @param now - passing an explicit value is mostly used for testing purposes since this defaults to the `Date.now()`\n   * @public\n   */\n  TTL(now = Date.now()) {\n    if (this.maxAge != null && typeof this.maxAge === \"number\") {\n      return this.maxAge <= 0 ? 0 : this.maxAge * 1e3;\n    }\n    const expires = this.expires;\n    if (expires === \"Infinity\") {\n      return Infinity;\n    }\n    return (expires?.getTime() ?? now) - (now || Date.now());\n  }\n  /**\n   * Computes the absolute unix-epoch milliseconds that this cookie expires.\n   *\n   * The \"Max-Age\" attribute takes precedence over \"Expires\" (as per the RFC). The {@link Cookie.lastAccessed} attribute\n   * (or the `now` parameter if given) is used to offset the {@link Cookie.maxAge} attribute.\n   *\n   * If Expires ({@link Cookie.expires}) is set, that's returned.\n   *\n   * @param now - can be used to provide a time offset (instead of {@link Cookie.lastAccessed}) to use when calculating the \"Max-Age\" value\n   */\n  expiryTime(now) {\n    if (this.maxAge != null) {\n      const relativeTo = now || this.lastAccessed || /* @__PURE__ */ new Date();\n      const maxAge = typeof this.maxAge === \"number\" ? this.maxAge : -Infinity;\n      const age = maxAge <= 0 ? -Infinity : maxAge * 1e3;\n      if (relativeTo === \"Infinity\") {\n        return Infinity;\n      }\n      return relativeTo.getTime() + age;\n    }\n    if (this.expires == \"Infinity\") {\n      return Infinity;\n    }\n    return this.expires ? this.expires.getTime() : void 0;\n  }\n  /**\n   * Similar to {@link Cookie.expiryTime}, computes the absolute unix-epoch milliseconds that this cookie expires and returns it as a Date.\n   *\n   * The \"Max-Age\" attribute takes precedence over \"Expires\" (as per the RFC). The {@link Cookie.lastAccessed} attribute\n   * (or the `now` parameter if given) is used to offset the {@link Cookie.maxAge} attribute.\n   *\n   * If Expires ({@link Cookie.expires}) is set, that's returned.\n   *\n   * @param now - can be used to provide a time offset (instead of {@link Cookie.lastAccessed}) to use when calculating the \"Max-Age\" value\n   */\n  expiryDate(now) {\n    const millisec = this.expiryTime(now);\n    if (millisec == Infinity) {\n      return /* @__PURE__ */ new Date(2147483647e3);\n    } else if (millisec == -Infinity) {\n      return /* @__PURE__ */ new Date(0);\n    } else {\n      return millisec == void 0 ? void 0 : new Date(millisec);\n    }\n  }\n  /**\n   * Indicates if the cookie has been persisted to a store or not.\n   * @public\n   */\n  isPersistent() {\n    return this.maxAge != null || this.expires != \"Infinity\";\n  }\n  /**\n   * Calls {@link canonicalDomain} with the {@link Cookie.domain} property.\n   * @public\n   */\n  canonicalizedDomain() {\n    return canonicalDomain(this.domain);\n  }\n  /**\n   * Alias for {@link Cookie.canonicalizedDomain}\n   * @public\n   */\n  cdomain() {\n    return canonicalDomain(this.domain);\n  }\n  /**\n   * Parses a string into a Cookie object.\n   *\n   * @remarks\n   * Note: when parsing a `Cookie` header it must be split by ';' before each Cookie string can be parsed.\n   *\n   * @example\n   * ```\n   * // parse a `Set-Cookie` header\n   * const setCookieHeader = 'a=bcd; Expires=Tue, 18 Oct 2011 07:05:03 GMT'\n   * const cookie = Cookie.parse(setCookieHeader)\n   * cookie.key === 'a'\n   * cookie.value === 'bcd'\n   * cookie.expires === new Date(Date.parse('Tue, 18 Oct 2011 07:05:03 GMT'))\n   * ```\n   *\n   * @example\n   * ```\n   * // parse a `Cookie` header\n   * const cookieHeader = 'name=value; name2=value2; name3=value3'\n   * const cookies = cookieHeader.split(';').map(Cookie.parse)\n   * cookies[0].name === 'name'\n   * cookies[0].value === 'value'\n   * cookies[1].name === 'name2'\n   * cookies[1].value === 'value2'\n   * cookies[2].name === 'name3'\n   * cookies[2].value === 'value3'\n   * ```\n   *\n   * @param str - The `Set-Cookie` header or a Cookie string to parse.\n   * @param options - Configures `strict` or `loose` mode for cookie parsing\n   */\n  static parse(str, options) {\n    return parse(str, options);\n  }\n  /**\n   * Does the reverse of {@link Cookie.toJSON}.\n   *\n   * @remarks\n   * Any Date properties (such as .expires, .creation, and .lastAccessed) are parsed via Date.parse, not tough-cookie's parseDate, since ISO timestamps are being handled at this layer.\n   *\n   * @example\n   * ```\n   * const json = JSON.stringify({\n   *   key: 'alpha',\n   *   value: 'beta',\n   *   domain: 'example.com',\n   *   path: '/foo',\n   *   expires: '2038-01-19T03:14:07.000Z',\n   * })\n   * const cookie = Cookie.fromJSON(json)\n   * cookie.key === 'alpha'\n   * cookie.value === 'beta'\n   * cookie.domain === 'example.com'\n   * cookie.path === '/foo'\n   * cookie.expires === new Date(Date.parse('2038-01-19T03:14:07.000Z'))\n   * ```\n   *\n   * @param str - An unparsed JSON string or a value that has already been parsed as JSON\n   */\n  static fromJSON(str) {\n    return fromJSON(str);\n  }\n};\n_Cookie.cookiesCreated = 0;\n/**\n * @internal\n */\n_Cookie.sameSiteLevel = {\n  strict: 3,\n  lax: 2,\n  none: 1\n};\n/**\n * @internal\n */\n_Cookie.sameSiteCanonical = {\n  strict: \"Strict\",\n  lax: \"Lax\"\n};\n/**\n * Cookie properties that will be serialized when using {@link Cookie.fromJSON} and {@link Cookie.toJSON}.\n * @public\n */\n_Cookie.serializableProperties = [\n  \"key\",\n  \"value\",\n  \"expires\",\n  \"maxAge\",\n  \"domain\",\n  \"path\",\n  \"secure\",\n  \"httpOnly\",\n  \"extensions\",\n  \"hostOnly\",\n  \"pathIsDefault\",\n  \"creation\",\n  \"lastAccessed\",\n  \"sameSite\"\n];\nvar Cookie = _Cookie;\n\n// lib/cookie/cookieCompare.ts\nvar MAX_TIME = 2147483647e3;\nfunction cookieCompare(a, b) {\n  let cmp;\n  const aPathLen = a.path ? a.path.length : 0;\n  const bPathLen = b.path ? b.path.length : 0;\n  cmp = bPathLen - aPathLen;\n  if (cmp !== 0) {\n    return cmp;\n  }\n  const aTime = a.creation && a.creation instanceof Date ? a.creation.getTime() : MAX_TIME;\n  const bTime = b.creation && b.creation instanceof Date ? b.creation.getTime() : MAX_TIME;\n  cmp = aTime - bTime;\n  if (cmp !== 0) {\n    return cmp;\n  }\n  cmp = (a.creationIndex || 0) - (b.creationIndex || 0);\n  return cmp;\n}\n\n// lib/cookie/defaultPath.ts\nfunction defaultPath(path) {\n  if (!path || path.slice(0, 1) !== \"/\") {\n    return \"/\";\n  }\n  if (path === \"/\") {\n    return path;\n  }\n  const rightSlash = path.lastIndexOf(\"/\");\n  if (rightSlash === 0) {\n    return \"/\";\n  }\n  return path.slice(0, rightSlash);\n}\n\n// lib/cookie/domainMatch.ts\nvar IP_REGEX_LOWERCASE = /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-f\\d]{1,4}:){7}(?:[a-f\\d]{1,4}|:)|(?:[a-f\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-f\\d]{1,4}|:)|(?:[a-f\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,2}|:)|(?:[a-f\\d]{1,4}:){4}(?:(?::[a-f\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,3}|:)|(?:[a-f\\d]{1,4}:){3}(?:(?::[a-f\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,4}|:)|(?:[a-f\\d]{1,4}:){2}(?:(?::[a-f\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,5}|:)|(?:[a-f\\d]{1,4}:){1}(?:(?::[a-f\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-f\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-f\\d]{1,4}){1,7}|:)))$)/;\nfunction domainMatch(domain, cookieDomain, canonicalize) {\n  if (domain == null || cookieDomain == null) {\n    return void 0;\n  }\n  let _str;\n  let _domStr;\n  if (canonicalize !== false) {\n    _str = canonicalDomain(domain);\n    _domStr = canonicalDomain(cookieDomain);\n  } else {\n    _str = domain;\n    _domStr = cookieDomain;\n  }\n  if (_str == null || _domStr == null) {\n    return void 0;\n  }\n  if (_str == _domStr) {\n    return true;\n  }\n  const idx = _str.lastIndexOf(_domStr);\n  if (idx <= 0) {\n    return false;\n  }\n  if (_str.length !== _domStr.length + idx) {\n    return false;\n  }\n  if (_str.substring(idx - 1, idx) !== \".\") {\n    return false;\n  }\n  return !IP_REGEX_LOWERCASE.test(_str);\n}\n\n// lib/cookie/secureContext.ts\nfunction isLoopbackV4(address) {\n  const octets = address.split(\".\");\n  return octets.length === 4 && octets[0] !== void 0 && parseInt(octets[0], 10) === 127;\n}\nfunction isLoopbackV6(address) {\n  return address === \"::1\";\n}\nfunction isNormalizedLocalhostTLD(lowerHost) {\n  return lowerHost.endsWith(\".localhost\");\n}\nfunction isLocalHostname(host) {\n  const lowerHost = host.toLowerCase();\n  return lowerHost === \"localhost\" || isNormalizedLocalhostTLD(lowerHost);\n}\nfunction hostNoBrackets(host) {\n  if (host.length >= 2 && host.startsWith(\"[\") && host.endsWith(\"]\")) {\n    return host.substring(1, host.length - 1);\n  }\n  return host;\n}\nfunction isPotentiallyTrustworthy(inputUrl, allowSecureOnLocal = true) {\n  let url;\n  if (typeof inputUrl === \"string\") {\n    try {\n      url = new URL(inputUrl);\n    } catch {\n      return false;\n    }\n  } else {\n    url = inputUrl;\n  }\n  const scheme = url.protocol.replace(\":\", \"\").toLowerCase();\n  const hostname = hostNoBrackets(url.hostname).replace(/\\.+$/, \"\");\n  if (scheme === \"https\" || scheme === \"wss\") {\n    return true;\n  }\n  if (!allowSecureOnLocal) {\n    return false;\n  }\n  if (IP_V4_REGEX_OBJECT.test(hostname)) {\n    return isLoopbackV4(hostname);\n  }\n  if (IP_V6_REGEX_OBJECT.test(hostname)) {\n    return isLoopbackV6(hostname);\n  }\n  return isLocalHostname(hostname);\n}\n\n// lib/cookie/cookieJar.ts\nvar defaultSetCookieOptions = {\n  loose: false,\n  sameSiteContext: void 0,\n  ignoreError: false,\n  http: true\n};\nvar defaultGetCookieOptions = {\n  http: true,\n  expire: true,\n  allPaths: false,\n  sameSiteContext: void 0,\n  sort: void 0\n};\nvar SAME_SITE_CONTEXT_VAL_ERR = 'Invalid sameSiteContext option for getCookies(); expected one of \"strict\", \"lax\", or \"none\"';\nfunction getCookieContext(url) {\n  if (url && typeof url === \"object\" && \"hostname\" in url && typeof url.hostname === \"string\" && \"pathname\" in url && typeof url.pathname === \"string\" && \"protocol\" in url && typeof url.protocol === \"string\") {\n    return {\n      hostname: url.hostname,\n      pathname: url.pathname,\n      protocol: url.protocol\n    };\n  } else if (typeof url === \"string\") {\n    try {\n      return new URL(decodeURI(url));\n    } catch {\n      return new URL(url);\n    }\n  } else {\n    throw new ParameterError(\"`url` argument is not a string or URL.\");\n  }\n}\nfunction checkSameSiteContext(value) {\n  const context = String(value).toLowerCase();\n  if (context === \"none\" || context === \"lax\" || context === \"strict\") {\n    return context;\n  } else {\n    return void 0;\n  }\n}\nfunction isSecurePrefixConditionMet(cookie) {\n  const startsWithSecurePrefix = typeof cookie.key === \"string\" && cookie.key.startsWith(\"__Secure-\");\n  return !startsWithSecurePrefix || cookie.secure;\n}\nfunction isHostPrefixConditionMet(cookie) {\n  const startsWithHostPrefix = typeof cookie.key === \"string\" && cookie.key.startsWith(\"__Host-\");\n  return !startsWithHostPrefix || Boolean(\n    cookie.secure && cookie.hostOnly && cookie.path != null && cookie.path === \"/\"\n  );\n}\nfunction getNormalizedPrefixSecurity(prefixSecurity) {\n  const normalizedPrefixSecurity = prefixSecurity.toLowerCase();\n  switch (normalizedPrefixSecurity) {\n    case PrefixSecurityEnum.STRICT:\n    case PrefixSecurityEnum.SILENT:\n    case PrefixSecurityEnum.DISABLED:\n      return normalizedPrefixSecurity;\n    default:\n      return PrefixSecurityEnum.SILENT;\n  }\n}\nvar CookieJar = class _CookieJar {\n  /**\n   * Creates a new `CookieJar` instance.\n   *\n   * @remarks\n   * - If a custom store is not passed to the constructor, an in-memory store ({@link MemoryCookieStore} will be created and used.\n   * - If a boolean value is passed as the `options` parameter, this is equivalent to passing `{ rejectPublicSuffixes: <value> }`\n   *\n   * @param store - a custom {@link Store} implementation (defaults to {@link MemoryCookieStore})\n   * @param options - configures how cookies are processed by the cookie jar\n   */\n  constructor(store, options) {\n    if (typeof options === \"boolean\") {\n      options = { rejectPublicSuffixes: options };\n    }\n    this.rejectPublicSuffixes = options?.rejectPublicSuffixes ?? true;\n    this.enableLooseMode = options?.looseMode ?? false;\n    this.allowSpecialUseDomain = options?.allowSpecialUseDomain ?? true;\n    this.allowSecureOnLocal = options?.allowSecureOnLocal ?? true;\n    this.prefixSecurity = getNormalizedPrefixSecurity(\n      options?.prefixSecurity ?? \"silent\"\n    );\n    this.store = store ?? new MemoryCookieStore();\n  }\n  callSync(fn) {\n    if (!this.store.synchronous) {\n      throw new Error(\n        \"CookieJar store is not synchronous; use async API instead.\"\n      );\n    }\n    let syncErr = null;\n    let syncResult = void 0;\n    try {\n      fn.call(this, (error, result) => {\n        syncErr = error;\n        syncResult = result;\n      });\n    } catch (err) {\n      syncErr = err;\n    }\n    if (syncErr) throw syncErr;\n    return syncResult;\n  }\n  /**\n   * @internal No doc because this is the overload implementation\n   */\n  setCookie(cookie, url, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options;\n      options = void 0;\n    }\n    const promiseCallback = createPromiseCallback(callback);\n    const cb = promiseCallback.callback;\n    let context;\n    try {\n      if (typeof url === \"string\") {\n        validate(\n          isNonEmptyString(url),\n          callback,\n          safeToString(options)\n        );\n      }\n      context = getCookieContext(url);\n      if (typeof url === \"function\") {\n        return promiseCallback.reject(new Error(\"No URL was specified\"));\n      }\n      if (typeof options === \"function\") {\n        options = defaultSetCookieOptions;\n      }\n      validate(typeof cb === \"function\", cb);\n      if (!isNonEmptyString(cookie) && !isObject(cookie) && cookie instanceof String && cookie.length == 0) {\n        return promiseCallback.resolve(void 0);\n      }\n    } catch (err) {\n      return promiseCallback.reject(err);\n    }\n    const host = canonicalDomain(context.hostname) ?? null;\n    const loose = options?.loose || this.enableLooseMode;\n    let sameSiteContext = null;\n    if (options?.sameSiteContext) {\n      sameSiteContext = checkSameSiteContext(options.sameSiteContext);\n      if (!sameSiteContext) {\n        return promiseCallback.reject(new Error(SAME_SITE_CONTEXT_VAL_ERR));\n      }\n    }\n    if (typeof cookie === \"string\" || cookie instanceof String) {\n      const parsedCookie = Cookie.parse(cookie.toString(), { loose });\n      if (!parsedCookie) {\n        const err = new Error(\"Cookie failed to parse\");\n        return options?.ignoreError ? promiseCallback.resolve(void 0) : promiseCallback.reject(err);\n      }\n      cookie = parsedCookie;\n    } else if (!(cookie instanceof Cookie)) {\n      const err = new Error(\n        \"First argument to setCookie must be a Cookie object or string\"\n      );\n      return options?.ignoreError ? promiseCallback.resolve(void 0) : promiseCallback.reject(err);\n    }\n    const now = options?.now || /* @__PURE__ */ new Date();\n    if (this.rejectPublicSuffixes && cookie.domain) {\n      try {\n        const cdomain = cookie.cdomain();\n        const suffix = typeof cdomain === \"string\" ? getPublicSuffix(cdomain, {\n          allowSpecialUseDomain: this.allowSpecialUseDomain,\n          ignoreError: options?.ignoreError\n        }) : null;\n        if (suffix == null && !IP_V6_REGEX_OBJECT.test(cookie.domain)) {\n          const err = new Error(\"Cookie has domain set to a public suffix\");\n          return options?.ignoreError ? promiseCallback.resolve(void 0) : promiseCallback.reject(err);\n        }\n      } catch (err) {\n        return options?.ignoreError ? promiseCallback.resolve(void 0) : (\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          promiseCallback.reject(err)\n        );\n      }\n    }\n    if (cookie.domain) {\n      if (!domainMatch(host ?? void 0, cookie.cdomain() ?? void 0, false)) {\n        const err = new Error(\n          `Cookie not in this host's domain. Cookie:${cookie.cdomain() ?? \"null\"} Request:${host ?? \"null\"}`\n        );\n        return options?.ignoreError ? promiseCallback.resolve(void 0) : promiseCallback.reject(err);\n      }\n      if (cookie.hostOnly == null) {\n        cookie.hostOnly = false;\n      }\n    } else {\n      cookie.hostOnly = true;\n      cookie.domain = host;\n    }\n    if (!cookie.path || cookie.path[0] !== \"/\") {\n      cookie.path = defaultPath(context.pathname);\n      cookie.pathIsDefault = true;\n    }\n    if (options?.http === false && cookie.httpOnly) {\n      const err = new Error(\"Cookie is HttpOnly and this isn't an HTTP API\");\n      return options.ignoreError ? promiseCallback.resolve(void 0) : promiseCallback.reject(err);\n    }\n    if (cookie.sameSite !== \"none\" && cookie.sameSite !== void 0 && sameSiteContext) {\n      if (sameSiteContext === \"none\") {\n        const err = new Error(\n          \"Cookie is SameSite but this is a cross-origin request\"\n        );\n        return options?.ignoreError ? promiseCallback.resolve(void 0) : promiseCallback.reject(err);\n      }\n    }\n    const ignoreErrorForPrefixSecurity = this.prefixSecurity === PrefixSecurityEnum.SILENT;\n    const prefixSecurityDisabled = this.prefixSecurity === PrefixSecurityEnum.DISABLED;\n    if (!prefixSecurityDisabled) {\n      let errorFound = false;\n      let errorMsg;\n      if (!isSecurePrefixConditionMet(cookie)) {\n        errorFound = true;\n        errorMsg = \"Cookie has __Secure prefix but Secure attribute is not set\";\n      } else if (!isHostPrefixConditionMet(cookie)) {\n        errorFound = true;\n        errorMsg = \"Cookie has __Host prefix but either Secure or HostOnly attribute is not set or Path is not '/'\";\n      }\n      if (errorFound) {\n        return options?.ignoreError || ignoreErrorForPrefixSecurity ? promiseCallback.resolve(void 0) : promiseCallback.reject(new Error(errorMsg));\n      }\n    }\n    const store = this.store;\n    if (!store.updateCookie) {\n      store.updateCookie = async function(_oldCookie, newCookie, cb2) {\n        return this.putCookie(newCookie).then(\n          () => cb2?.(null),\n          (error) => cb2?.(error)\n        );\n      };\n    }\n    const withCookie = function withCookie2(err, oldCookie) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      const next = function(err2) {\n        if (err2) {\n          cb(err2);\n        } else if (typeof cookie === \"string\") {\n          cb(null, void 0);\n        } else {\n          cb(null, cookie);\n        }\n      };\n      if (oldCookie) {\n        if (options && \"http\" in options && options.http === false && oldCookie.httpOnly) {\n          err = new Error(\"old Cookie is HttpOnly and this isn't an HTTP API\");\n          if (options.ignoreError) cb(null, void 0);\n          else cb(err);\n          return;\n        }\n        if (cookie instanceof Cookie) {\n          cookie.creation = oldCookie.creation;\n          cookie.creationIndex = oldCookie.creationIndex;\n          cookie.lastAccessed = now;\n          store.updateCookie(oldCookie, cookie, next);\n        }\n      } else {\n        if (cookie instanceof Cookie) {\n          cookie.creation = cookie.lastAccessed = now;\n          store.putCookie(cookie, next);\n        }\n      }\n    };\n    store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);\n    return promiseCallback.promise;\n  }\n  /**\n   * Synchronously attempt to set the {@link Cookie} in the {@link CookieJar}.\n   *\n   * <strong>Note:</strong> Only works if the configured {@link Store} is also synchronous.\n   *\n   * @remarks\n   * - If successfully persisted, the {@link Cookie} will have updated\n   *     {@link Cookie.creation}, {@link Cookie.lastAccessed} and {@link Cookie.hostOnly}\n   *     properties.\n   *\n   * - As per the RFC, the {@link Cookie.hostOnly} flag is set if there was no `Domain={value}`\n   *     attribute on the cookie string. The {@link Cookie.domain} property is set to the\n   *     fully-qualified hostname of `currentUrl` in this case. Matching this cookie requires an\n   *     exact hostname match (not a {@link domainMatch} as per usual)\n   *\n   * @param cookie - The cookie object or cookie string to store. A string value will be parsed into a cookie using {@link Cookie.parse}.\n   * @param url - The domain to store the cookie with.\n   * @param options - Configuration settings to use when storing the cookie.\n   * @public\n   */\n  setCookieSync(cookie, url, options) {\n    const setCookieFn = options ? this.setCookie.bind(this, cookie, url, options) : this.setCookie.bind(this, cookie, url);\n    return this.callSync(setCookieFn);\n  }\n  /**\n   * @internal No doc because this is the overload implementation\n   */\n  getCookies(url, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options;\n      options = defaultGetCookieOptions;\n    } else if (options === void 0) {\n      options = defaultGetCookieOptions;\n    }\n    const promiseCallback = createPromiseCallback(callback);\n    const cb = promiseCallback.callback;\n    let context;\n    try {\n      if (typeof url === \"string\") {\n        validate(isNonEmptyString(url), cb, url);\n      }\n      context = getCookieContext(url);\n      validate(\n        isObject(options),\n        cb,\n        safeToString(options)\n      );\n      validate(typeof cb === \"function\", cb);\n    } catch (parameterError) {\n      return promiseCallback.reject(parameterError);\n    }\n    const host = canonicalDomain(context.hostname);\n    const path = context.pathname || \"/\";\n    const potentiallyTrustworthy = isPotentiallyTrustworthy(\n      url,\n      this.allowSecureOnLocal\n    );\n    let sameSiteLevel = 0;\n    if (options.sameSiteContext) {\n      const sameSiteContext = checkSameSiteContext(options.sameSiteContext);\n      if (sameSiteContext == null) {\n        return promiseCallback.reject(new Error(SAME_SITE_CONTEXT_VAL_ERR));\n      }\n      sameSiteLevel = Cookie.sameSiteLevel[sameSiteContext];\n      if (!sameSiteLevel) {\n        return promiseCallback.reject(new Error(SAME_SITE_CONTEXT_VAL_ERR));\n      }\n    }\n    const http = options.http ?? true;\n    const now = Date.now();\n    const expireCheck = options.expire ?? true;\n    const allPaths = options.allPaths ?? false;\n    const store = this.store;\n    function matchingCookie(c) {\n      if (c.hostOnly) {\n        if (c.domain != host) {\n          return false;\n        }\n      } else {\n        if (!domainMatch(host ?? void 0, c.domain ?? void 0, false)) {\n          return false;\n        }\n      }\n      if (!allPaths && typeof c.path === \"string\" && !pathMatch(path, c.path)) {\n        return false;\n      }\n      if (c.secure && !potentiallyTrustworthy) {\n        return false;\n      }\n      if (c.httpOnly && !http) {\n        return false;\n      }\n      if (sameSiteLevel) {\n        let cookieLevel;\n        if (c.sameSite === \"lax\") {\n          cookieLevel = Cookie.sameSiteLevel.lax;\n        } else if (c.sameSite === \"strict\") {\n          cookieLevel = Cookie.sameSiteLevel.strict;\n        } else {\n          cookieLevel = Cookie.sameSiteLevel.none;\n        }\n        if (cookieLevel > sameSiteLevel) {\n          return false;\n        }\n      }\n      const expiryTime = c.expiryTime();\n      if (expireCheck && expiryTime != void 0 && expiryTime <= now) {\n        store.removeCookie(c.domain, c.path, c.key, () => {\n        });\n        return false;\n      }\n      return true;\n    }\n    store.findCookies(\n      host,\n      allPaths ? null : path,\n      this.allowSpecialUseDomain,\n      (err, cookies) => {\n        if (err) {\n          cb(err);\n          return;\n        }\n        if (cookies == null) {\n          cb(null, []);\n          return;\n        }\n        cookies = cookies.filter(matchingCookie);\n        if (\"sort\" in options && options.sort !== false) {\n          cookies = cookies.sort(cookieCompare);\n        }\n        const now2 = /* @__PURE__ */ new Date();\n        for (const cookie of cookies) {\n          cookie.lastAccessed = now2;\n        }\n        cb(null, cookies);\n      }\n    );\n    return promiseCallback.promise;\n  }\n  /**\n   * Synchronously retrieve the list of cookies that can be sent in a Cookie header for the\n   * current URL.\n   *\n   * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n   *\n   * @remarks\n   * - The array of cookies returned will be sorted according to {@link cookieCompare}.\n   *\n   * - The {@link Cookie.lastAccessed} property will be updated on all returned cookies.\n   *\n   * @param url - The domain to store the cookie with.\n   * @param options - Configuration settings to use when retrieving the cookies.\n   */\n  getCookiesSync(url, options) {\n    return this.callSync(this.getCookies.bind(this, url, options)) ?? [];\n  }\n  /**\n   * @internal No doc because this is the overload implementation\n   */\n  getCookieString(url, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options;\n      options = void 0;\n    }\n    const promiseCallback = createPromiseCallback(callback);\n    const next = function(err, cookies) {\n      if (err) {\n        promiseCallback.callback(err);\n      } else {\n        promiseCallback.callback(\n          null,\n          cookies?.sort(cookieCompare).map((c) => c.cookieString()).join(\"; \")\n        );\n      }\n    };\n    this.getCookies(url, options, next);\n    return promiseCallback.promise;\n  }\n  /**\n   * Synchronous version of `.getCookieString()`. Accepts the same options as `.getCookies()` but returns a string suitable for a\n   * `Cookie` header rather than an Array.\n   *\n   * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n   *\n   * @param url - The domain to store the cookie with.\n   * @param options - Configuration settings to use when retrieving the cookies.\n   */\n  getCookieStringSync(url, options) {\n    return this.callSync(\n      options ? this.getCookieString.bind(this, url, options) : this.getCookieString.bind(this, url)\n    ) ?? \"\";\n  }\n  /**\n   * @internal No doc because this is the overload implementation\n   */\n  getSetCookieStrings(url, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options;\n      options = void 0;\n    }\n    const promiseCallback = createPromiseCallback(\n      callback\n    );\n    const next = function(err, cookies) {\n      if (err) {\n        promiseCallback.callback(err);\n      } else {\n        promiseCallback.callback(\n          null,\n          cookies?.map((c) => {\n            return c.toString();\n          })\n        );\n      }\n    };\n    this.getCookies(url, options, next);\n    return promiseCallback.promise;\n  }\n  /**\n   * Synchronous version of `.getSetCookieStrings()`. Returns an array of strings suitable for `Set-Cookie` headers.\n   * Accepts the same options as `.getCookies()`.\n   *\n   * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n   *\n   * @param url - The domain to store the cookie with.\n   * @param options - Configuration settings to use when retrieving the cookies.\n   */\n  getSetCookieStringsSync(url, options = {}) {\n    return this.callSync(this.getSetCookieStrings.bind(this, url, options)) ?? [];\n  }\n  /**\n   * @internal No doc because this is the overload implementation\n   */\n  serialize(callback) {\n    const promiseCallback = createPromiseCallback(callback);\n    let type = this.store.constructor.name;\n    if (isObject(type)) {\n      type = null;\n    }\n    const serialized = {\n      // The version of tough-cookie that serialized this jar. Generally a good\n      // practice since future versions can make data import decisions based on\n      // known past behavior. When/if this matters, use `semver`.\n      version: `tough-cookie@${version}`,\n      // add the store type, to make humans happy:\n      storeType: type,\n      // CookieJar configuration:\n      rejectPublicSuffixes: this.rejectPublicSuffixes,\n      enableLooseMode: this.enableLooseMode,\n      allowSpecialUseDomain: this.allowSpecialUseDomain,\n      prefixSecurity: getNormalizedPrefixSecurity(this.prefixSecurity),\n      // this gets filled from getAllCookies:\n      cookies: []\n    };\n    if (typeof this.store.getAllCookies !== \"function\") {\n      return promiseCallback.reject(\n        new Error(\n          \"store does not support getAllCookies and cannot be serialized\"\n        )\n      );\n    }\n    this.store.getAllCookies((err, cookies) => {\n      if (err) {\n        promiseCallback.callback(err);\n        return;\n      }\n      if (cookies == null) {\n        promiseCallback.callback(null, serialized);\n        return;\n      }\n      serialized.cookies = cookies.map((cookie) => {\n        const serializedCookie = cookie.toJSON();\n        delete serializedCookie.creationIndex;\n        return serializedCookie;\n      });\n      promiseCallback.callback(null, serialized);\n    });\n    return promiseCallback.promise;\n  }\n  /**\n   * Serialize the CookieJar if the underlying store supports `.getAllCookies`.\n   *\n   * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n   */\n  serializeSync() {\n    return this.callSync((callback) => {\n      this.serialize(callback);\n    });\n  }\n  /**\n   * Alias of {@link CookieJar.serializeSync}. Allows the cookie to be serialized\n   * with `JSON.stringify(cookieJar)`.\n   */\n  toJSON() {\n    return this.serializeSync();\n  }\n  /**\n   * Use the class method CookieJar.deserialize instead of calling this directly\n   * @internal\n   */\n  _importCookies(serialized, callback) {\n    let cookies = void 0;\n    if (serialized && typeof serialized === \"object\" && inOperator(\"cookies\", serialized) && Array.isArray(serialized.cookies)) {\n      cookies = serialized.cookies;\n    }\n    if (!cookies) {\n      callback(new Error(\"serialized jar has no cookies array\"), void 0);\n      return;\n    }\n    cookies = cookies.slice();\n    const putNext = (err) => {\n      if (err) {\n        callback(err, void 0);\n        return;\n      }\n      if (Array.isArray(cookies)) {\n        if (!cookies.length) {\n          callback(err, this);\n          return;\n        }\n        let cookie;\n        try {\n          cookie = Cookie.fromJSON(cookies.shift());\n        } catch (e) {\n          callback(e instanceof Error ? e : new Error(), void 0);\n          return;\n        }\n        if (cookie === void 0) {\n          putNext(null);\n          return;\n        }\n        this.store.putCookie(cookie, putNext);\n      }\n    };\n    putNext(null);\n  }\n  /**\n   * @internal\n   */\n  _importCookiesSync(serialized) {\n    this.callSync(this._importCookies.bind(this, serialized));\n  }\n  /**\n   * @internal No doc because this is the overload implementation\n   */\n  clone(newStore, callback) {\n    if (typeof newStore === \"function\") {\n      callback = newStore;\n      newStore = void 0;\n    }\n    const promiseCallback = createPromiseCallback(callback);\n    const cb = promiseCallback.callback;\n    this.serialize((err, serialized) => {\n      if (err) {\n        return promiseCallback.reject(err);\n      }\n      return _CookieJar.deserialize(serialized ?? \"\", newStore, cb);\n    });\n    return promiseCallback.promise;\n  }\n  /**\n   * @internal\n   */\n  _cloneSync(newStore) {\n    const cloneFn = newStore && typeof newStore !== \"function\" ? this.clone.bind(this, newStore) : this.clone.bind(this);\n    return this.callSync((callback) => {\n      cloneFn(callback);\n    });\n  }\n  /**\n   * Produces a deep clone of this CookieJar. Modifications to the original do\n   * not affect the clone, and vice versa.\n   *\n   * <strong>Note</strong>: Only works if both the configured Store and destination\n   * Store are synchronous.\n   *\n   * @remarks\n   * - When no {@link Store} is provided, a new {@link MemoryCookieStore} will be used.\n   *\n   * - Transferring between store types is supported so long as the source\n   *     implements `.getAllCookies()` and the destination implements `.putCookie()`.\n   *\n   * @param newStore - The target {@link Store} to clone cookies into.\n   */\n  cloneSync(newStore) {\n    if (!newStore) {\n      return this._cloneSync();\n    }\n    if (!newStore.synchronous) {\n      throw new Error(\n        \"CookieJar clone destination store is not synchronous; use async API instead.\"\n      );\n    }\n    return this._cloneSync(newStore);\n  }\n  /**\n   * @internal No doc because this is the overload implementation\n   */\n  removeAllCookies(callback) {\n    const promiseCallback = createPromiseCallback(callback);\n    const cb = promiseCallback.callback;\n    const store = this.store;\n    if (typeof store.removeAllCookies === \"function\" && store.removeAllCookies !== Store.prototype.removeAllCookies) {\n      store.removeAllCookies(cb);\n      return promiseCallback.promise;\n    }\n    store.getAllCookies((err, cookies) => {\n      if (err) {\n        cb(err);\n        return;\n      }\n      if (!cookies) {\n        cookies = [];\n      }\n      if (cookies.length === 0) {\n        cb(null, void 0);\n        return;\n      }\n      let completedCount = 0;\n      const removeErrors = [];\n      const removeCookieCb = function removeCookieCb2(removeErr) {\n        if (removeErr) {\n          removeErrors.push(removeErr);\n        }\n        completedCount++;\n        if (completedCount === cookies.length) {\n          if (removeErrors[0]) cb(removeErrors[0]);\n          else cb(null, void 0);\n          return;\n        }\n      };\n      cookies.forEach((cookie) => {\n        store.removeCookie(\n          cookie.domain,\n          cookie.path,\n          cookie.key,\n          removeCookieCb\n        );\n      });\n    });\n    return promiseCallback.promise;\n  }\n  /**\n   * Removes all cookies from the CookieJar.\n   *\n   * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n   *\n   * @remarks\n   * - This is a new backwards-compatible feature of tough-cookie version 2.5,\n   *     so not all Stores will implement it efficiently. For Stores that do not\n   *     implement `removeAllCookies`, the fallback is to call `removeCookie` after\n   *     `getAllCookies`.\n   *\n   * - If `getAllCookies` fails or isn't implemented in the Store, an error is returned.\n   *\n   * - If one or more of the `removeCookie` calls fail, only the first error is returned.\n   */\n  removeAllCookiesSync() {\n    this.callSync((callback) => {\n      this.removeAllCookies(callback);\n    });\n  }\n  /**\n   * @internal No doc because this is the overload implementation\n   */\n  static deserialize(strOrObj, store, callback) {\n    if (typeof store === \"function\") {\n      callback = store;\n      store = void 0;\n    }\n    const promiseCallback = createPromiseCallback(callback);\n    let serialized;\n    if (typeof strOrObj === \"string\") {\n      try {\n        serialized = JSON.parse(strOrObj);\n      } catch (e) {\n        return promiseCallback.reject(e instanceof Error ? e : new Error());\n      }\n    } else {\n      serialized = strOrObj;\n    }\n    const readSerializedProperty = (property) => {\n      return serialized && typeof serialized === \"object\" && inOperator(property, serialized) ? serialized[property] : void 0;\n    };\n    const readSerializedBoolean = (property) => {\n      const value = readSerializedProperty(property);\n      return typeof value === \"boolean\" ? value : void 0;\n    };\n    const readSerializedString = (property) => {\n      const value = readSerializedProperty(property);\n      return typeof value === \"string\" ? value : void 0;\n    };\n    const jar = new _CookieJar(store, {\n      rejectPublicSuffixes: readSerializedBoolean(\"rejectPublicSuffixes\"),\n      looseMode: readSerializedBoolean(\"enableLooseMode\"),\n      allowSpecialUseDomain: readSerializedBoolean(\"allowSpecialUseDomain\"),\n      prefixSecurity: getNormalizedPrefixSecurity(\n        readSerializedString(\"prefixSecurity\") ?? \"silent\"\n      )\n    });\n    jar._importCookies(serialized, (err) => {\n      if (err) {\n        promiseCallback.callback(err);\n        return;\n      }\n      promiseCallback.callback(null, jar);\n    });\n    return promiseCallback.promise;\n  }\n  /**\n   * A new CookieJar is created and the serialized {@link Cookie} values are added to\n   * the underlying store. Each {@link Cookie} is added via `store.putCookie(...)` in\n   * the order in which they appear in the serialization.\n   *\n   * <strong>Note</strong>: Only works if the configured Store is also synchronous.\n   *\n   * @remarks\n   * - When no {@link Store} is provided, a new {@link MemoryCookieStore} will be used.\n   *\n   * - As a convenience, if `strOrObj` is a string, it is passed through `JSON.parse` first.\n   *\n   * @param strOrObj - A JSON string or object representing the deserialized cookies.\n   * @param store - The underlying store to persist the deserialized cookies into.\n   */\n  static deserializeSync(strOrObj, store) {\n    const serialized = typeof strOrObj === \"string\" ? JSON.parse(strOrObj) : strOrObj;\n    const readSerializedProperty = (property) => {\n      return serialized && typeof serialized === \"object\" && inOperator(property, serialized) ? serialized[property] : void 0;\n    };\n    const readSerializedBoolean = (property) => {\n      const value = readSerializedProperty(property);\n      return typeof value === \"boolean\" ? value : void 0;\n    };\n    const readSerializedString = (property) => {\n      const value = readSerializedProperty(property);\n      return typeof value === \"string\" ? value : void 0;\n    };\n    const jar = new _CookieJar(store, {\n      rejectPublicSuffixes: readSerializedBoolean(\"rejectPublicSuffixes\"),\n      looseMode: readSerializedBoolean(\"enableLooseMode\"),\n      allowSpecialUseDomain: readSerializedBoolean(\"allowSpecialUseDomain\"),\n      prefixSecurity: getNormalizedPrefixSecurity(\n        readSerializedString(\"prefixSecurity\") ?? \"silent\"\n      )\n    });\n    if (!jar.store.synchronous) {\n      throw new Error(\n        \"CookieJar store is not synchronous; use async API instead.\"\n      );\n    }\n    jar._importCookiesSync(serialized);\n    return jar;\n  }\n  /**\n   * Alias of {@link CookieJar.deserializeSync}.\n   *\n   * @remarks\n   * - When no {@link Store} is provided, a new {@link MemoryCookieStore} will be used.\n   *\n   * - As a convenience, if `strOrObj` is a string, it is passed through `JSON.parse` first.\n   *\n   * @param jsonString - A JSON string or object representing the deserialized cookies.\n   * @param store - The underlying store to persist the deserialized cookies into.\n   */\n  static fromJSON(jsonString, store) {\n    return _CookieJar.deserializeSync(jsonString, store);\n  }\n};\n\n// lib/cookie/permutePath.ts\nfunction permutePath(path) {\n  if (path === \"/\") {\n    return [\"/\"];\n  }\n  const permutations = [path];\n  while (path.length > 1) {\n    const lindex = path.lastIndexOf(\"/\");\n    if (lindex === 0) {\n      break;\n    }\n    path = path.slice(0, lindex);\n    permutations.push(path);\n  }\n  permutations.push(\"/\");\n  return permutations;\n}\n\n// lib/cookie/index.ts\nfunction parse2(str, options) {\n  return Cookie.parse(str, options);\n}\nfunction fromJSON2(str) {\n  return Cookie.fromJSON(str);\n}\n\n/*!\n * Copyright (c) 2015-2020, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/msw/node_modules/tough-cookie/dist/index.js\n");

/***/ })

};
;